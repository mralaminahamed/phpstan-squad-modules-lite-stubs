<?php
/**
 * Generated stub declarations for Squad Modules for Divi.
 * @see https://squadmodules.com/
 * @see https://github.com/mralaminahamed/phpstan-squad-modules-lite-stubs
 */

namespace DiviSquad\Base;

/**
 * The Base class for Core
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
abstract class Core
{
    /** The instance of the modules class.
     *
     * @var \DiviSquad\Manager\Modules
     */
    protected $modules;
    /** The instance of the extensions class.
     *
     * @var \DiviSquad\Manager\Extensions
     */
    protected $extensions;
    /** The instance of the modules class for rest API Routes.
     *
     * @var \DiviSquad\Manager\Rest_API_Routes\Modules
     */
    protected $modules_rest_api_routes;
    /** The instance of the extensions class for rest API Routes.
     *
     * @var \DiviSquad\Manager\Rest_API_Routes\Extensions
     */
    protected $extensions_rest_api_routes;
    /**
     * The Plugin name.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $name;
    /**
     * The Plugin Version.
     *
     * @since 1.4.5
     *
     * @var string
     */
    protected $version;
    /**
     * The plugin option prefix
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $opt_prefix;
    /**
     * The Script handle the text domain will be attached to.
     *
     * @var string
     */
    protected $localize_handle;
    /**
     * The full file path to the directory containing translation files.
     *
     * @var string
     */
    protected $localize_path;
    /**
     * Initialize the plugin with required components.
     *
     * @param array $options Options.
     *
     * @return void
     */
    protected abstract function init($options = array());
    /**
     * Load all core components.
     *
     * @return void
     */
    protected abstract function load_core_components();
    /**
     * Register all rest api routes.
     *
     * @return void
     */
    protected abstract function register_ajax_rest_api_routes();
    /**
     * Load all extensions.
     *
     * @return void
     */
    protected abstract function load_all_extensions();
    /**
     * Load all divi modules.
     *
     * @return void
     */
    protected abstract function load_divi_modules_for_builder();
    /**
     * Get the instance of memory.
     *
     * @return \DiviSquad\Base\Memory
     */
    public abstract function get_memory();
    /**
     * Set the instance of memory.
     *
     * @param string $prefix The prefix name for the plugin settings option.
     *
     * @return \DiviSquad\Base\Memory
     */
    public abstract function set_memory($prefix);
    /**
     * Get the plugin name.
     *
     * @return string
     */
    public function get_name()
    {
    }
    /**
     * The full file path to the directory containing translation files.
     *
     * @return string
     */
    public function get_localize_path()
    {
    }
    /**
     * Get the plugin option prefix.
     *
     * @return string
     */
    public function get_option_prefix()
    {
    }
    /**
     * Get the instance of modules.
     *
     * @return \DiviSquad\Manager\Modules
     */
    public function get_modules()
    {
    }
    /**
     * Get the instance of extensions.
     *
     * @return \DiviSquad\Manager\Extensions
     */
    public function get_extensions()
    {
    }
    /**
     * The instance of the modules class for rest API Routes.
     *
     * @return \DiviSquad\Manager\Rest_API_Routes\Modules
     */
    public function get_modules_rest_api_routes()
    {
    }
    /**
     * The instance of the extensions class for rest API Routes.
     *
     * @return \DiviSquad\Manager\Rest_API_Routes\Extensions
     */
    public function get_extensions_rest_api_routes()
    {
    }
    /**
     * Load the local text domain.
     *
     * @return void
     */
    public function load_text_domain()
    {
    }
    /**
     * Set the deactivation hook.
     *
     * @return void
     */
    public function hook_deactivation()
    {
    }
    /**
     * The admin interface asset and others.
     *
     * @return void
     */
    protected function load_global_assets()
    {
    }
    /**
     * Load css variables in the admin panel.
     *
     * @return void
     */
    public function wp_hook_enqueue_admin_scripts()
    {
    }
    /**
     * Load css variables in the frontend.
     *
     * @return void
     */
    public function wp_hook_enqueue_scripts()
    {
    }
    /**
     * Set the localize data.
     *
     * @return void
     */
    public function localize_scripts_data()
    {
    }
    /**
     * Load the localized data in the frontend and admin panel.
     *
     * @return void
     */
    public function wp_hook_enqueue_localize_data()
    {
    }
    /**
     * Localizes a script.
     *
     * Works only if the script has already been registered.
     *
     * @param string $object_name Name for the JavaScript object. Passed directly, so it should be qualified JS variable.
     * @param array  $l10n        The data itself. The data can be either a single or multidimensional array.
     *
     * @return string Localizes a script.
     */
    public function localize_script($object_name, $l10n)
    {
    }
}
namespace DiviSquad\Integration;

/**
 * Divi Squad Core Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
abstract class Core extends \DiviSquad\Base\Core
{
    /**
     * Load all core components.
     *
     * @return void
     */
    protected function load_core_components()
    {
    }
    /**
     * Initialize the plugin with required components.
     *
     * @param array $options Options data.
     *
     * @return void
     */
    protected function init($options = array())
    {
    }
    /**
     * Set the activation hook.
     *
     * @return void
     */
    public function hook_activation()
    {
    }
    /**
     * The admin interface asset and others.
     *
     * @param array $options The plugin options.
     *
     * @return void
     */
    protected function load_admin_interface($options)
    {
    }
    /**
     * Register all rest api routes.
     *
     * @return void
     */
    protected function register_ajax_rest_api_routes()
    {
    }
    /**
     * Load all extensions.
     *
     * @return void
     */
    public function load_all_extensions()
    {
    }
    /**
     * Load the divi custom modules for the divi builder.
     *
     * @return void
     */
    protected function load_divi_modules_for_builder()
    {
    }
    /**
     *  Load the extensions.
     *
     * @return void
     */
    public function initialize_divi_extension()
    {
    }
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @return void
     */
    public function initialize_divi_asset_definitions()
    {
    }
}
namespace DiviSquad;

/**
 * Free Plugin Load class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 * @author          WP Squad <support@thewpsquad.com>
 * @license         GPL-3.0-only
 */
final class SquadModules extends \DiviSquad\Integration\Core
{
    /**
     * The instance of current class.
     *
     * @var self
     */
    private static $instance;
    /**
     * The instance of Memory class.
     *
     * @var \DiviSquad\Base\Memory
     */
    protected $plugin_memory;
    /**
     * The plugin options.
     *
     * @var array
     */
    protected $options;
    /**
     * Constructor.
     *
     * @param array $options The plugin options.
     */
    public function __construct($options)
    {
    }
    /**
     * The plugin options.
     *
     * @return array
     */
    public function get_options()
    {
    }
    /**
     * Get the plugin version number
     *
     * @return string
     */
    public function get_version()
    {
    }
    /**
     * Get the plugin version number
     *
     * @param string $prefix The prefix name for the plugin settings option.
     *
     * @return \DiviSquad\Base\Memory
     */
    public function set_memory($prefix)
    {
    }
    /**
     * Get the plugin version number
     *
     * @return \DiviSquad\Base\Memory
     */
    public function get_memory()
    {
    }
    /**
     * Cloning is forbidden.
     *
     * @access public
     */
    public function __clone()
    {
    }
    /**
     * Serializing instances of this class is forbidden.
     *
     * @access public
     */
    public function __wakeup()
    {
    }
    /**
     *  The instance of current class.
     *
     * @param array $options The plugin options.
     *
     * @return self
     */
    public static function get_instance($options)
    {
    }
}
namespace DiviSquad\Admin;

/**
 * Assets class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Assets
{
    /**
     * The plugin options.
     *
     * @var array
     */
    protected $options;
    /**
     * Constructor.
     *
     * @param array $options The options.
     */
    public function __construct($options)
    {
    }
    /**
     * Get the lis of admin asset allowed page for the plugin.
     *
     * @return array
     * @since 1.2.0
     */
    protected static function get_plugin_asset_allowed_pages()
    {
    }
    /**
     * Enqueue the plugin's scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     */
    public function wp_hook_enqueue_plugin_admin_asset($hook_suffix)
    {
    }
    /**
     * Enqueue extra scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     */
    public function wp_hook_enqueue_extra_admin_asset($hook_suffix)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_common_localize_script_data($exists_data)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_localize_script_data($exists_data)
    {
    }
}
/**
 * Menu class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Menu
{
    /**
     * Enqueue scripts and styles files in the WordPress admin area.
     */
    public function admin_menu_create()
    {
    }
    /**
     * Check permission for extension management.
     *
     * @return string
     */
    public function admin_management_permission()
    {
    }
    /**
     * Default slug for admin main menu.
     *
     * @return string
     */
    public function get_admin_main_menu_slug()
    {
    }
    /**
     * The menu_notice_should_show
     *
     * Check two flags status (admin_menu_notice and admin_promotion),
     * if both true this display menu notice. it'd prevent displaying menu notice multiple time
     *
     * @return bool
     * @since 5.1.0
     */
    public function menu_notice_should_show()
    {
    }
    /**
     * Details about the Main Menu.
     *
     * @return  array Details about the Main Menu.
     */
    public function get_admin_main_menu()
    {
    }
    /**
     * List of Sub Menu.
     *
     * @return  array Details about the submenus.
     */
    public function get_admin_sub_menu()
    {
    }
    /**
     * Load template file for admin pages.
     *
     * @return  void
     */
    public function get_template()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @param string $classes Space-separated list of CSS classes.
     *
     * @return string
     * @since 1.0.4
     */
    public function admin_classes($classes)
    {
    }
}
/**
 * Plugin Action Links class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Plugin_Action_Links
{
    /**
     * Get the instance of self-class
     *
     * @return string
     */
    public function get_plugin_base()
    {
    }
    /**
     * Add some link to plugin action links.
     *
     * @param array $links Exists action links.
     *
     * @return array All action links for plugin.
     */
    public function add_plugin_action_links($links)
    {
    }
}
/**
 * Plugin Admin Footer Text class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Plugin_Admin_Footer_Text
{
    /**
     * Get the plugin screen name.
     *
     * @return string
     */
    public static function get_plugin_screen()
    {
    }
    /**
     * Filters the "Thank you" text displayed in the admin footer.
     *
     * @param string $footer_text The content that will be printed.
     *
     * @return  string
     * @since 1.3.2
     */
    public function add_plugin_footer_text($footer_text)
    {
    }
    /**
     * Filters the version/update text displayed in the admin footer.
     *
     * @param string $content The content that will be printed.
     *
     * @return  string
     * @since 1.4.8
     */
    public function add_update_footer_text($content)
    {
    }
}
/**
 * Plugin Review Class
 *
 * @since       1.2.3
 * @package     squad-modules-for-divi
 */
class Plugin_Review
{
    /**
     * How Long timeout until first banner shown.
     *
     * @var int
     */
    private $first_time_show = 7;
    /**
     * Init constructor.
     */
    public function __construct()
    {
    }
    /**
     * Initial Option.
     */
    public function initial_option()
    {
    }
    /**
     * Check if we can render notice.
     */
    public function can_render_notice()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @param string $classes Space-separated list of CSS classes.
     *
     * @return string
     * @since 1.2.5
     */
    public function admin_body_class($classes)
    {
    }
    /**
     * Get the template path.
     *
     * @return string
     */
    public function get_template()
    {
    }
    /**
     * Show Notice.
     */
    public function admin_notice()
    {
    }
}
/**
 * Plugin Row Meta class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Plugin_Row_Meta
{
    /**
     * Get the plugin base name.
     *
     * @return string
     */
    public static function get_plugin_base()
    {
    }
    /**
     * Filters the array of row meta for each/specific plugin in the Plugins list table.
     * Appends additional links below each/specific plugin on the plugin page.
     *
     * @access  public
     *
     * @param array  $links            An array of the plugin's metadata.
     * @param string $plugin_file_name Path to the plugin file.
     *
     * @return  array
     */
    public function add_plugin_row_meta($links, $plugin_file_name)
    {
    }
}
namespace DiviSquad\Base;

/**
 * Builder DiviBuilderBackend Placeholder class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
abstract class BuilderBackendPlaceholder
{
    /** The instance of the current class.
     *
     * @var self
     */
    protected static $instance;
    /**
     *  Get The defaults data for module.
     *
     * @return array
     */
    public function get_modules_defaults()
    {
    }
    /**
     * Filters backend data passed to the Visual Builder.
     * This function is used to add static helpers whose content rarely changes.
     * eg: google fonts, module default, and so on.
     *
     * @param array $exists Exists definitions.
     *
     * @return array
     */
    public abstract function static_asset_definitions($exists = array());
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @param string $content content.
     *
     * @return string
     */
    public abstract function asset_definitions($content);
}
/**
 * Divi Squad Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
abstract class BuilderIntegrationAPIBase
{
    /**
     * The plugin name.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $name = '';
    /**
     * Absolute path to the plugin's directory.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $plugin_dir = '';
    /**
     * The plugin's directory URL.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $plugin_dir_url = '';
    /**
     * The plugin's version
     *
     * @since 1.0.0
     *
     * @var string The plugin's version
     */
    protected $version = '';
    /**
     * The asset build for the plugin
     *
     * @since 1.0.0
     *
     * @var string The plugin's version
     */
    protected $build_path = 'build/divi-builder-4/';
    /**
     * Divi Squad constructor.
     *
     * @param string $name           The plugin's WP Plugin name.
     * @param string $plugin_dir     Absolute path to the plugin's directory.
     * @param string $plugin_dir_url The plugin's directory URL.
     */
    public function __construct($name, $plugin_dir, $plugin_dir_url)
    {
    }
    /**
     * Get the plugin version number
     *
     * @return string
     */
    public abstract function get_version();
}
/**
 * Divi Squad Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
abstract class BuilderIntegrationAPI extends \DiviSquad\Base\BuilderIntegrationAPIBase
{
    /**
     * Loads custom modules when the builder is ready.
     */
    public abstract function hook_et_builder_ready();
    /**
     * Performs initialization tasks.
     */
    protected function initialize()
    {
    }
    /**
     * Enqueues the plugin's scripts and styles for the admin area.
     */
    public function admin_hook_enqueue_scripts()
    {
    }
    /**
     * Enqueues minified (production) or non-minified (hot reloaded) backend styles.
     */
    public function enqueue_backend_styles()
    {
    }
    /**
     * Enqueues the plugin's scripts and styles.
     */
    public function wp_hook_enqueue_scripts()
    {
    }
}
namespace DiviSquad\Base\BuilderModule\Traits;

/**
 * Field Compatibility class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
trait Field_Compatibility
{
    /**
     * Fix border transition issues.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array
     */
    protected function disq_fix_border_transition(&$fields, $slug, $selector)
    {
    }
    /**
     * Fix font style transition issues.
     *
     * Take all the attributes from divi advanced 'fonts' field and set the transition with given selector.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array $fields
     */
    protected function disq_fix_fonts_transition(&$fields, $slug, $selector)
    {
    }
    /**
     * Fix box-shadow transition issues.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array
     */
    protected function disq_fix_box_shadow_transition(&$fields, $slug, $selector)
    {
    }
}
/**
 * Field Definition class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
trait Field_Definition
{
    /**
     * Add range fields for the module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     * @param array  $conditions The additional conditions for the current field.
     *
     * @return array[]
     */
    protected function disq_add_range_field($label, $properties = array(), $conditions = array())
    {
    }
    /**
     * Default fields for Heading toggles.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_font_field($label, $properties = array())
    {
    }
    /**
     * Add margin and padding fields for the module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array[]
     */
    protected function disq_add_margin_padding_field($label, $properties = array())
    {
    }
    /**
     * Add background fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_background_field($label, $properties = array())
    {
    }
    /**
     * Add background: gradient field for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_background_gradient_field($label, $properties = array())
    {
    }
    /**
     * Add background field options for module.
     *
     * @param array $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_get_background_field_options($properties = array())
    {
    }
    /**
     * Add all background fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     * @param array  $background_fields The additional background fields for the current field.
     *
     * @return array
     */
    protected function disq_add_background_fields($label, $properties = array(), $background_fields = array())
    {
    }
    /**
     * Add yes no fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_yes_no_field($label, $properties = array())
    {
    }
    /**
     * Add color fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_color_field($label, $properties = array())
    {
    }
    /**
     * Add select box fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_select_box_field($label, $properties = array())
    {
    }
    /**
     * Add alignment fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_placement_field($label, $properties = array())
    {
    }
    /**
     * Add alignment fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    protected function disq_add_alignment_field($label, $properties = array())
    {
    }
    /**
     * Add class name for background field.
     *
     * @param array $options The additional options for the current field.
     *
     * @return null|array
     */
    protected function disq_add_background_class($options = array())
    {
    }
    /**
     * Add additional transition fields. e.x hover transition fields.
     *
     * @param array $options The additional options for the current field.
     *
     * @return array
     */
    protected function disq_add_transition_fields($options = array())
    {
    }
}
/**
 * Field Processor class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
trait Field_Processor
{
    /**
     * Process styles for width fields in the module.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    protected function disq_process_additional_styles($options = array())
    {
    }
    /**
     * Collect any props value from mapping values.
     *
     * @param array  $options           The option array data.
     * @param string $qualified_name    The current field name.
     * @param string $last_modified_key The last modified key.
     *
     * @return array
     */
    protected function collect_prop_value_responsive($options, $qualified_name, $last_modified_key)
    {
    }
    /**
     * Process styles for responsive in the module.
     *
     * @param array $options The options property for processing styles.
     *
     * @return void
     */
    protected function disq_process_responsive_styles($options)
    {
    }
    /**
     * Set actual position for icon or image in show on hover effect for the current element with default, responsive and hover.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    protected function process_show_icon_on_hover_styles($options = array())
    {
    }
    /**
     * Collect icon prop width event if responsive mode.
     *
     * @param array $props   List of attributes.
     * @param array $options Options of current width.
     *
     * @return array
     * @since 1.0.0
     */
    private function disq_get_icon_hover_effect_prop_width($props, $options = array())
    {
    }
    /**
     * Collect the value of any props for Icon on hover effect.
     *
     * @param array $props   List of attributes.
     * @param array $options Options of current width.
     *
     * @return string
     * @since 1.0.0
     */
    private function disq_hover_effect_generate_css($props, $options = array())
    {
    }
    /**
     * Collect any props value from mapping values.
     *
     * @param array  $options       The option array data.
     * @param string $current_value The current field value.
     *
     * @return mixed
     */
    protected function disq_collect_prop_mapping_value($options, $current_value)
    {
    }
    /**
     * Process styles for margin and padding fields in the module.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    protected function disq_process_margin_padding_styles($options = array())
    {
    }
    /**
     * Process Text Clip styles.
     *
     * @param array $options The additional options for processing text clip features.
     *
     * @return void
     */
    protected function disq_process_text_clip($options = array())
    {
    }
    /**
     * Process divider styles.
     *
     * @param array $options The additional options for processing divider features.
     *
     * @return void
     */
    protected function disq_process_divider($options = array())
    {
    }
}
/**
 * Fields class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
trait Fields
{
    /**
     * Get HTML tag elements for text item.
     *
     * @return \string[][]
     */
    protected function disq_get_html_tag_elements()
    {
    }
    /**
     * Get heading elements for toggles.
     *
     * @return \string[][]
     */
    protected function disq_get_heading_elements()
    {
    }
    /**
     * Get Block elements for toggles.
     *
     * @return \string[][]
     */
    protected function disq_get_block_elements()
    {
    }
    /**
     * Add text clip settings.
     *
     * @param array $options The options for text clip fields.
     *
     * @return array
     */
    protected function disq_text_clip_fields($options = array())
    {
    }
    /**
     * Add Z Index fields for element.
     *
     * @param array $options The options for z index fields.
     *
     * @return array
     */
    protected function disq_z_index_fields($options = array())
    {
    }
    /**
     *  Get general fields.
     *
     * @return array[]
     */
    protected function disq_get_general_fields()
    {
    }
    /**
     *  Add button fields.
     *
     * @param array $options The options for button fields.
     *
     * @return array
     */
    protected function disq_get_button_fields($options = array())
    {
    }
    /**
     *  Add button associated fields.
     *
     * @param array $options The options for button fields.
     *
     * @return array
     */
    protected function disq_get_button_associated_fields($options = array())
    {
    }
}
namespace DiviSquad\Base\BuilderModule\Traits\Elements;

trait Breadcrumbs
{
    /**
     * Function that generates the HTML from breadcrumbs.
     *
     * @param string $_home_text   The home text.
     * @param string $_before_text The before text for the titles.
     * @param string $_delimiter   The separator.
     *
     * @return string
     */
    protected function disq_get_hansel_and_gretel_breadcrumbs($_home_text = 'Home', $_before_text = '', $_delimiter = '&#x39;')
    {
    }
}
trait Divider
{
    /**
     * The default options for divider.
     *
     * @var array
     */
    protected $divider_defaults = array('divider_style' => 'solid', 'divider_position' => 'bottom', 'divider_weight' => '2px');
    /**
     * The show options for divider.
     *
     * @var array
     */
    protected $show_divider_options = array('off' => 'No', 'on' => 'Yes');
    /**
     * Get the default data.
     *
     * @return array
     */
    public function disq_get_divider_defaults()
    {
    }
    /**
     * Get show options for divider.
     *
     * @return array
     */
    public function disq_get_show_divider_options()
    {
    }
    /**
     * Get the default data for initiate.
     *
     * @return void The shape
     */
    protected function disq_initiate_the_divider_element()
    {
    }
    /**
     * Get the field for divider element
     *
     * @param string $toggle_slug The toggle slug for the general and advanced tabs.
     * @param array  $options     The options for divider element fields.
     *
     * @return array the field
     */
    protected function disq_get_divider_element_fields($toggle_slug = '', $options = array())
    {
    }
}
trait Mask_Shape
{
    /**
     * Get the Mask Shape according the shape type and its secondary_shape type
     *
     * @param string $type   The shape type.
     * @param string $secondary_shape The shape secondary_shape type.
     *
     * @return string The shape
     */
    protected function disq_get_mask_shape($type = 'shape-01', $secondary_shape = 'off')
    {
    }
}
namespace DiviSquad\Base\BuilderModule;

/**
 * Builder Module class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
#[\AllowDynamicProperties]
abstract class Squad_Divi_Builder_Module extends \ET_Builder_Module
{
    use \DiviSquad\Base\BuilderModule\Traits\Field_Compatibility;
    use \DiviSquad\Base\BuilderModule\Traits\Field_Definition;
    use \DiviSquad\Base\BuilderModule\Traits\Field_Processor;
    use \DiviSquad\Base\BuilderModule\Traits\Fields;
    use \DiviSquad\Base\BuilderModule\Traits\Elements\Breadcrumbs;
    use \DiviSquad\Base\BuilderModule\Traits\Elements\Divider;
    use \DiviSquad\Base\BuilderModule\Traits\Elements\Mask_Shape;
    /**
     * Module credits.
     *
     * @var string[]
     * @since 1.0.0
     */
    protected $module_credits = array('module_uri' => '', 'author' => 'Divi Squad', 'author_uri' => 'https://squadmodules.com/?utm_campaign=wporg&utm_source=module_modal&utm_medium=module_author_link');
    /**
     * The icon for module.
     *
     * @var string
     * @since 1.0.0
     */
    protected $icon = '';
    /**
     * The icon path for module.
     *
     * @var string
     * @since 1.0.0
     */
    protected $icon_path = '';
    /**
     * Module folder name.
     *
     * @var string
     * @since 1.0.0
     */
    public $folder_name = 'et_pb_divi_squad_modules';
}
/**
 * Builder Module Helper Class which help to the all module class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
abstract class Squad_Form_Styler_Module extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Get default value for form id.
     *
     * @var string
     */
    protected static $default_form_id = 'cfcd208495d565ef66e7dff9f98764da';
    /**
     * Store all forms and remove redundancy.
     *
     * @var array The collection of forms.
     */
    public static $forms_collection = array('id' => array(), 'title' => array());
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected abstract function get_form_selector_default();
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected abstract function get_form_selector_hover();
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected abstract function get_error_message_selector_default();
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected abstract function get_error_message_selector_hover();
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected abstract function get_success_message_selector_default();
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected abstract function get_success_message_selector_hover();
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected abstract function get_field_selector_default();
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected abstract function get_field_selector_hover();
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected abstract function get_submit_button_selector_default();
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected abstract function get_submit_button_selector_hover();
    /**
     * Declare allowed fields for the module.
     *
     * @return array
     */
    public function disq_get_allowed_form_fields()
    {
    }
    /**
     * Declare all prefixes for custom spacing fields for the module.
     *
     * @return array
     */
    protected function disq_get_custom_spacing_prefixes()
    {
    }
    /**
     * Get toggles for the module's settings modal.
     */
    public function get_settings_modal_toggles()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     */
    public function get_fields()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @param array $fields   List of fields.
     * @param array $removals List of removable fields.
     *
     * @return array[]
     */
    public function disq_remove_pre_assigned_fields($fields, $removals)
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function disq_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs   List of unprocessed attributes.
     * @param array $options Control attributes.
     *
     * @return void
     */
    protected function form_styler_generate_module_styles($attrs, $options)
    {
    }
    /**
     * Collect all forms from the database.
     *
     * @return array
     */
    protected function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
}
namespace DiviSquad\Base;

/**
 * Extensions class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 */
abstract class Extensions
{
    /** The instance of memory.
     *
     * @var Memory
     */
    protected $memory;
    /**
     * The list of inactive extensions.
     *
     * @var array
     */
    protected $inactivates;
    /**
     * The name list of extensions.
     *
     * @var array
     */
    protected $name_lists;
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * Get the plugin version number
     *
     * @return string
     */
    public function get_version()
    {
    }
}
/**
 * Memory class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Memory
{
    /**
     * The store of data (Option data).
     *
     * @var array
     */
    private $data;
    /**
     * The database option prefix.
     *
     * @var string
     */
    private $option_prefix;
    /**
     * The constructor
     *
     * @param string $prefix The prefix name for the plugin settings option.
     *
     * @since 1.2.0
     */
    public function __construct($prefix = 'disq')
    {
    }
    /**
     * Get all data from option.
     *
     * @return array
     */
    public function get_data()
    {
    }
    /**
     * Set the option prefix.
     *
     * @param string $prefix The prefix name for the plugin settings option.
     *
     * @return void
     */
    public function set_prefix($prefix)
    {
    }
    /**
     * Get the option prefix.
     *
     * @return string
     */
    public function get_option_prefix()
    {
    }
    /**
     * Get the field value.
     *
     * @param string                          $field   The field key.
     * @param array|string|numeric|null|false $defaults The default value for field.
     *
     * @return array|string|numeric|null|false
     */
    public function get($field, $defaults = null)
    {
    }
    /**
     * Set the field value.
     *
     * @param string                          $field The field key.
     * @param array|string|numeric|null|false $value The value for field.
     *
     * @return array|string|numeric|null|false
     */
    public function set($field, $value)
    {
    }
    /**
     * Update the field value.
     *
     * @param string                          $field The field key.
     * @param array|string|numeric|null|false $value The value for field.
     *
     * @return array|string|numeric|null|false
     */
    public function update($field, $value)
    {
    }
    /**
     * Delete the field.
     *
     * @param string $field The field key.
     *
     * @return void
     */
    public function delete($field)
    {
    }
    /**
     * Update the database option with stored data.
     *
     * @return void
     */
    private function update_database()
    {
    }
    /**
     * Save the database option with stored data.
     *
     * @param string $option_name The database option name.
     *
     * @return void
     */
    private function save_options($option_name)
    {
    }
}
namespace DiviSquad\Extensions;

/**
 * The Post Duplicator class.
 *
 * @since       1.4.8
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Copy extends \DiviSquad\Base\Extensions
{
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * Verify allowed screen.
     *
     * @return bool
     */
    public function is_ignored_admin_screen()
    {
    }
    /**
     * Add CSS body class name for the available post or page.
     *
     * @param string $classes An array of body class names.
     *
     * @return string
     */
    public function admin_body_class($classes)
    {
    }
    /**
     * Enqueuing scripts for all admin pages.
     *
     * @return void
     */
    public function admin_footer_template()
    {
    }
    /**
     * Enqueuing scripts for all admin pages.
     *
     * @return void
     */
    public function admin_enqueue_scripts()
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_localize_script_data($exists_data)
    {
    }
    /**
     * Add the duplicate link to post, page, and custom actions
     *
     * @param string[] $actions An array of row action links. Defaults are 'Edit', 'Quick Edit', 'Restore', 'Trash', 'Delete Permanently', 'Preview', and 'View'.
     * @param \WP_Post $post    The post-object.
     *
     * @return string[] An array of row action links.
     */
    public function row_actions($actions, $post)
    {
    }
    /**
     * Add duplicate action in the bulk actions menu of the list table.
     *
     * @param array $actions An array of the available bulk actions.
     *
     * @return string[] An array of bulk actions.
     */
    public function bulk_actions($actions)
    {
    }
    /**
     * Duplicate the post.
     *
     * @return void
     */
    public function duplicate_the_post()
    {
    }
}
/**
 * The Divi Library Shortcode class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Divi_Layout_Shortcode extends \DiviSquad\Base\Extensions
{
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * Create New Admin Column
     *
     * @param array $columns Exists columns array data.
     *
     * @return array
     */
    public function create_shortcode_column($columns)
    {
    }
    /**
     * Display Shortcode
     *
     * @param string $column The current column name.
     * @param int    $id     The current post id.
     *
     * @return void
     */
    public function shortcode_column_content($column, $id)
    {
    }
    /**
     * Create New Shortcode
     *
     * @param array|string|mixed $atts The attributes of the current shortcode.
     *
     * @return string
     */
    public function shortcode_callback($atts)
    {
    }
    /**
     * Set a random high module index when rendering in the visual builder to avoid conflicts with other modules on the same page
     *
     * @param mixed $value The content of current shortcode.
     *
     * @return mixed
     */
    public function shortcode_set_ajax_module_index($value)
    {
    }
}
/**
 * The Font Upload class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Font_Upload extends \DiviSquad\Base\Extensions
{
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    public function get_available_mime_types()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
}
/**
 * The JSON class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class JSON extends \DiviSquad\Base\Extensions
{
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    public function get_available_mime_types()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     * @since 1.0.0
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
    /**
     * Filters the "real" file type of the given file.
     *
     * @param array  $wp_checked Values for the extension, mime type, and corrected filename.
     * @param string $file       Full path to the file.
     * @param string $filename   The name of the file.
     */
    public function hook_wp_check_filetype_and_ext($wp_checked, $file, $filename)
    {
    }
}
/**
 * The SVG class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <support@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class SVG extends \DiviSquad\Base\Extensions
{
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    public function get_available_mime_types()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     * @since 1.0.0
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
    /**
     * Filters the "real" file type of the given file.
     *
     * @param array    $wp_check Values for the extension, mime type, and corrected filename.
     * @param string   $file     Full path to the file.
     * @param string   $filename The name of the file.
     * @param string[] $mimes    Array of mime types keyed by their file extension regex.
     */
    public function enable__upload($wp_check, $file, $filename, $mimes)
    {
    }
}
namespace DiviSquad\Integration;

/**
 * Admin Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Admin
{
    /**
     * Get the instance of the current class.
     *
     * @param array $options The plugin options.
     *
     * @return void
     */
    public static function load($options)
    {
    }
    /**
     * Get the dynamic portion of the hook name, `$hook_suffix`, refers to the hook suffix
     * for the admin page.
     *
     * @return string
     * @since 1.2.0
     */
    protected static function get_plugin_hook_suffix()
    {
    }
    /**
     * Fires when enqueuing scripts for all admin pages.
     *
     * @param \DiviSquad\Admin\Assets $admin_asset The instance of Admin asset class.
     *
     * @return void
     * @since 1.2.0
     */
    protected static function register_admin_scripts($admin_asset)
    {
    }
    /**
     * Include all actions links for the plugin.
     *
     * @param \DiviSquad\Admin\Plugin_Action_Links $action_links The instance of Plugin action links class.
     *
     * @return void
     * @since 1.2.0
     */
    protected static function register_plugin_action_links($action_links)
    {
    }
    /**
     * Include all row metas for the plugin.
     *
     * @param \DiviSquad\Admin\Plugin_Row_Meta $row_meta The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.2.0
     */
    protected static function register_plugin_row_meta($row_meta)
    {
    }
    /**
     * Include admin footer text for the plugin.
     *
     * @param \DiviSquad\Admin\Plugin_Admin_Footer_Text $footer_text The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.2.0
     */
    protected static function register_plugin_footer_text($footer_text)
    {
    }
    /**
     * Include update footer text for the plugin at admin area.
     *
     * @param \DiviSquad\Admin\Plugin_Admin_Footer_Text $footer_text The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.4.8
     */
    protected static function register_update_footer_text($footer_text)
    {
    }
}
/**
 * Divi Squad Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class DiviBuilder extends \DiviSquad\Base\BuilderIntegrationAPI
{
    /**
     * Get the plugin version number
     *
     * @return string
     */
    public function get_version()
    {
    }
    /**
     * Loads custom modules when the builder is ready.
     *
     * @since 1.0.0
     */
    public function hook_et_builder_ready()
    {
    }
}
/**
 * Define integration helper functionalities for this plugin.
 *
 * @since      1.0.0
 * @package    squad-modules-for-divi
 */
class DiviBuilderBackend extends \DiviSquad\Base\BuilderBackendPlaceholder
{
    /**
     * Filters backend data passed to the Visual Builder.
     * This function is used to add static helpers whose content rarely changes.
     * eg: google fonts, module defaults, and so on.
     *
     * @param array $exists The existed definitions.
     *
     * @return array
     */
    public function static_asset_definitions($exists = array())
    {
    }
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @param string $content content.
     *
     * @return string
     */
    public function asset_definitions($content)
    {
    }
}
/**
 * Define integration helper functionalities for this plugin.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class WP
{
    /**
     * The plugin options.
     *
     * @var array
     */
    protected $options;
    /**
     * Constructor.
     *
     * @param array $options The plugin options.
     */
    public function __construct($options)
    {
    }
    /**
     * Checks compatibility with the current version.
     *
     * @param string $required       Minimum required version.
     * @param string $target_version The current version.
     *
     * @return bool True if a required version is compatible or empty, false if not.
     * @since 1.2.0
     */
    public static function is_version_compatible($required, $target_version)
    {
    }
    /**
     * The journey of a thousand miles starts here.
     *
     * @param callable $callback The callback function.
     *
     * @return bool Some voids are not really void, you have to explore to figure out why not!
     */
    public function let_the_journey_start(callable $callback)
    {
    }
    /**
     * Admin notice for the required php version.
     *
     * @return void
     */
    public function required_php_version_missing_notice()
    {
    }
    /**
     * Admin notice for the required WordPress version.
     *
     * @return void
     */
    public function required_wordpress_version_missing_notice()
    {
    }
}
namespace DiviSquad\Manager;

/**
 * Assets Class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Assets
{
    /**
     * Enqueue scripts for frontend.
     *
     * @return void
     */
    public function enqueue_scripts()
    {
    }
    /**
     * Load requires asset extra in the visual builder by default.
     *
     * @param string $output Exist output.
     *
     * @return string
     */
    public function wp_localize_script_data($output)
    {
    }
    /**
     * Enqueue scripts for builder.
     *
     * @return void
     */
    public function enqueue_scripts_vb()
    {
    }
}
/**
 * Extensions class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Extensions
{
    /**
     * Activate all extensions.
     */
    public function activate_extensions()
    {
    }
    /**
     * Get available extensions.
     *
     * @return array[]
     */
    public function get_available_extensions()
    {
    }
    /**
     * Check the current extension is an inactive extension.
     *
     * @param array $extension The current extension.
     *
     * @return array|null
     */
    protected function is_inactive_extension($extension)
    {
    }
    /**
     *  Check the current extension is an active extension.
     *
     * @param array $extension The current extension.
     *
     * @return array|null
     */
    protected function is_active_extension($extension)
    {
    }
    /**
     * Get filtered extensions.
     *
     * @param callable $callback   The callback function for filter the current extension.
     * @param array    $extensions The available extensions.
     *
     * @return array
     */
    protected function get_filtered_extensions($callback, $extensions)
    {
    }
    /**
     * Get inactive extensions.
     *
     * @return array
     */
    protected function get_inactive_extensions()
    {
    }
    /**
     * Get default active extensions.
     *
     * @return array
     */
    protected function get_default_active_extensions()
    {
    }
    /**
     * Load enabled extensions
     *
     * @param string $path          The defined directory.
     * @param array  $my_extensions The activated extensions.
     *
     * @return void
     */
    protected function load_extensions_files($path, $my_extensions)
    {
    }
    /**
     * Load enabled extensions
     *
     * @param string $path The defined directory.
     *
     * @return void
     */
    public function load_extensions($path)
    {
    }
}
/**
 * Modules class
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Modules
{
    /**
     * Activate all modules.
     */
    public function active_modules()
    {
    }
    /**
     *  Get available modules.
     *
     * @return array[]
     */
    public function get_available_modules()
    {
    }
    /**
     * Check the current module type.
     *
     * @param array  $module The array of current module.
     * @param string $type   The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return bool
     */
    protected function check_module_type($module, $type = 'D4')
    {
    }
    /**
     * Check the current module is an inactive module.
     *
     * @param array  $module The array of current module.
     * @param string $type   The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return array|null
     */
    protected function is_inactive_module($module, $type = 'D4')
    {
    }
    /**
     *  Check the current module is an active module.
     *
     * @param array  $module The array of current module.
     * @param string $type   The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return array|null
     */
    protected function is_active_module($module, $type = 'D4')
    {
    }
    /**
     * Get filtered modules.
     *
     * @param callable $callback The callback function for filter the current module.
     * @param array    $modules  The available modules.
     * @param string   $type     The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return array
     */
    protected function get_filtered_modules($callback, $modules, $type = 'D4')
    {
    }
    /**
     *  Get default active modules.
     *
     * @param string $type The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return array
     */
    protected function get_default_active_modules($type = 'D4')
    {
    }
    /**
     * Load the module class.
     *
     * @param string $path   The module class path.
     * @param string $module The module name.
     *
     * @return void
     */
    protected function require_module_path($path, $module)
    {
    }
    /**
     * Load the module class.
     *
     * @param string      $path            The module class path.
     * @param mixed       $my_modules      The available modules list.
     * @param string      $type            The type of Divi Builder module, default is: D4. Available opinions are: D4, D5.
     *
     * @return void
     */
    protected function load_module_files($path, $my_modules, $type = 'D4')
    {
    }
    /**
     * Load enabled modules for Divi Builder from defined directory.
     *
     * @param string $path The defined directory.
     *
     * @return void
     */
    public function load_divi_builder_4_modules($path)
    {
    }
}
/**
 * Rest_API_Routes
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Rest_API_Routes
{
    /**
     * Load rest route on init time.
     *
     * @return void
     */
    public function register_all()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @param string $slug   The product slug.
     * @param array  $routes The list of routes.
     *
     * @return void
     */
    public function register_routes($slug, $routes)
    {
    }
}
namespace DiviSquad\Manager\Rest_API_Routes;

/**
 * Rest API Routes for Extensions
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Extensions
{
    /**
     * Get active extensions list from database
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_active_extensions()
    {
    }
    /**
     * Get update extensions list from database
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function update_active_extensions($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @param \DiviSquad\Manager\Extensions $extensions The extensions manager object.
     *
     * @return array
     */
    public function get_routes($extensions)
    {
    }
}
/**
 * Rest API Routes for Modules
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Modules
{
    /**
     * The instance of the current class.
     *
     * @var self
     */
    protected static $instance;
    /**
     * The instance of the memory class.
     *
     * @var Memory
     */
    protected static $memory;
    /**
     * Get active modules list from database.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_active_modules()
    {
    }
    /**
     * Get update modules list from database.
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function update_active_modules($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @param \DiviSquad\Manager\Modules $modules The module manager object.
     *
     * @return array
     */
    public function get_routes($modules)
    {
    }
}
/**
 * Rest API Routes for Plugin Review
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Plugin_Review
{
    /**
     * How Long timeout after first banner shown.
     *
     * @var int
     */
    private $another_time_show = 7;
    /**
     * Remind the user for review the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function remind_next_week()
    {
    }
    /**
     * Update the database when the user submits a review for the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function review_done()
    {
    }
    /**
     * Count how many times the user closes the review notice.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function review_notice_close_count()
    {
    }
    /**
     * Count how many times the user asks for support from the review notice.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function ask_support()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
/**
 * Rest API Routes for Plugin Review
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 * @author      WP Squad <wp@thewpsquad.com>
 * @copyright   2023 WP Squad
 * @license     GPL-3.0-only
 */
class Whats_New
{
    /**
     * How Long timeout after first banner shown.
     *
     * @var int
     */
    private $another_time_show = 7;
    /**
     * Remind the user for review the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_readme_file_data()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Modules\BeforeAfterImageSlider;

/**
 * Before After Image Slider Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class BeforeAfterImageSlider extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render image.
     *
     * @param string $image_type The image type.
     *
     * @return null|string
     */
    private function disq_render_image($image_type)
    {
    }
    /**
     * Get image and associated fields.
     *
     * @param string $image_type The current image name.
     *
     * @return array image and associated fields.
     */
    private function disq_get_image_fields($image_type)
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_all_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\Breadcrumbs;

/**
 * Breadcrumbs Module Class.
 *
 * @since           1.4.0
 * @package         squad-modules-for-divi
 */
class Breadcrumbs extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\BusinessHours;

/**
 * Business Hours Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class BusinessHours extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Return an add new item(module) text.
     *
     * @return string
     */
    public function add_new_child_text()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the fields list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles for divider
     */
    private function disq_generate_divider_styles()
    {
    }
    /**
     * Render title
     *
     * @return null|string
     */
    private function disq_render_title_text()
    {
    }
}
namespace DiviSquad\Modules\BusinessHoursChild;

/**
 * Business Hours Day Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class BusinessHoursChild extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs List of attributes.
     * @param string $content Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render day name
     *
     * @return null|string
     */
    private function disq_render_day_time_text()
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles for divider
     */
    private function disq_generate_divider_styles()
    {
    }
}
namespace DiviSquad\Modules\Divider;

/**
 * Divider Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class Divider extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Context data.
     *
     * @return mixed
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Render divider.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     * @param array                                     $attrs      List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_divider($multi_view, $attrs)
    {
    }
    /**
     * Render divider icon which on is active
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function disq_render_divider_icon($multi_view)
    {
    }
    /**
     * Render divider icon.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return null|string
     */
    private function disq_render_divider_font_icon($multi_view)
    {
    }
    /**
     * Render divider image.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return null|string
     */
    private function disq_render_divider_icon_image($multi_view)
    {
    }
    /**
     * Render divider icon text.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return null|string
     */
    private function disq_render_divider_icon_text($multi_view)
    {
    }
    /**
     * Render divider lottie image.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return null|string
     */
    private function disq_render_divider_icon_lottie($multi_view)
    {
    }
}
namespace DiviSquad\Modules\DropCap;

/**
 * The Drop Cap Module Class.
 *
 * @since       1.4.0
 * @package     squad-modules-for-divi
 */
class DropCapText extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the fields list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\DualButton;

/**
 * Dual-Button Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class DualButton extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Context data.
     *
     * @return mixed
     * @since 3.27.1
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render element text with icon
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $element Dynamic element key.
     *
     * @return null|string
     */
    private function render_element_text($attrs, $element)
    {
    }
    /**
     * Render element icon
     *
     * @param string $element Dynamic element key.
     *
     * @return null|string
     */
    private function render_element_font_icon($element)
    {
    }
    /**
     * Render element image
     *
     * @param string $element Dynamic element key.
     *
     * @return null|string
     */
    private function render_element_icon_image($element)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Render separator text with icon
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function render_element_separator($attrs)
    {
    }
}
namespace DiviSquad\Modules\FlipBox;

/**
 * Flip Box Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class FlipBox extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param mixed $args      Arguments.
     *
     * @return mixed
     * @since 3.27.1
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render the icon which on is active
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function disq_render_slide_icons($slide_type, $attrs)
    {
    }
    /**
     * Render all text elements for slide with dynamic and multiview support for Flip Box.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function disq_render_slide_elements($slide_type, $attrs)
    {
    }
    /**
     * Render button text with icon.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_button_text($slide_type, $attrs)
    {
    }
    /**
     * Render button icon.
     *
     * @param string $slide_type The slide type.
     *
     * @return null|string
     */
    private function disq_render_button_font_icon($slide_type)
    {
    }
    /**
     * Render button image.
     *
     * @param string $slide_type The slide type.
     *
     * @return null|string
     */
    private function disq_render_button_icon_image($slide_type)
    {
    }
    /**
     * Renders animation styles for the module output.
     */
    private function disq_generate_animation_styles()
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of attributes.
     */
    private function disq_generate_additional_styles($slide_type, $attrs)
    {
    }
    /**
     * Get all text related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array Text related fields.
     */
    private function disq_get_side_text_fields($side)
    {
    }
    /**
     * Get all icons and image related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array icons and image related fields.
     */
    private function disq_get_side_icon_images_fields($side)
    {
    }
    /**
     * Get all text related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array Text related fields.
     */
    private function disq_get_side_associate_fields($side)
    {
    }
    /**
     * Get all order fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array order fields.
     */
    private function disq_get_side_order_fields($side)
    {
    }
    /**
     * Get all z index fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array z index fields.
     */
    private function disq_get_side_z_index_fields($side)
    {
    }
}
namespace DiviSquad\Modules\FormStylerContactForm7;

/**
 * The Form Styler: Contact Form 7 Module Class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 */
class FormStylerContactForm7 extends \DiviSquad\Base\BuilderModule\Squad_Form_Styler_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array[]
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all from the database.
     *
     * @param string $type The value type.
     *
     * @return array the html output.
     * @since 1.4.7
     */
    public static function get_form_styler_forms_collection($type = 'id')
    {
    }
    /**
     * Collect all contact form from the database.
     *
     * @return array
     */
    public function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
}
namespace DiviSquad\Modules\FormStylerFluentForms;

/**
 * The Form Styler: Fluent Forms Module Class.
 *
 * @since       1.4.7
 * @package     squad-modules-for-divi
 */
class FormStylerFluentForms extends \DiviSquad\Base\BuilderModule\Squad_Form_Styler_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Additional new fields for current form styler.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_form_styler_additional_custom_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array[]
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.4.7
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all from the database.
     *
     * @param string $type The value type.
     *
     * @return array the html output.
     * @since 1.4.7
     */
    public static function get_form_styler_forms_collection($type = 'id')
    {
    }
    /**
     * Collect all contact form from the database.
     *
     * @return array
     */
    public function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Show form in the frontend
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.4.7
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function disq_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
}
namespace DiviSquad\Modules\FormStylerGravityForms;

/**
 * The Form Styler: Gravity Forms Module Class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 */
class FormStylerGravityForms extends \DiviSquad\Base\BuilderModule\Squad_Form_Styler_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Get toggles for the module's settings modal.
     */
    public function get_settings_modal_toggles()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array[]
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all from the database.
     *
     * @param string $type The value type.
     *
     * @return array the html output.
     * @since 1.4.7
     */
    public static function get_form_styler_forms_collection($type = 'id')
    {
    }
    /**
     * Collect all wp form from the database.
     *
     * @return array
     */
    public function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
}
namespace DiviSquad\Modules\FormStylerNinjaForms;

/**
 * The Form Styler: WP Forms Module Class.
 *
 * @since       1.4.7
 * @package     squad-modules-for-divi
 */
class FormStylerNinjaForms extends \DiviSquad\Base\BuilderModule\Squad_Form_Styler_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Additional new fields for current form styler.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_form_styler_additional_custom_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array[]
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.4.7
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all from the database.
     *
     * @param string $type The value type.
     *
     * @return array the html output.
     * @since 1.4.7
     */
    public static function get_form_styler_forms_collection($type = 'id')
    {
    }
    /**
     * Collect all wp form from the database.
     *
     * @return array
     */
    public function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Show form in the frontend
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.4.7
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function disq_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
}
namespace DiviSquad\Modules\FormStylerWPForms;

/**
 * The Form Styler: WP Forms Module Class.
 *
 * @since       1.2.0
 * @package     squad-modules-for-divi
 */
class FormStylerWPForms extends \DiviSquad\Base\BuilderModule\Squad_Form_Styler_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array[]
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all from the database.
     *
     * @param string $type The value type.
     *
     * @return array the html output.
     * @since 1.4.7
     */
    public static function get_form_styler_forms_collection($type = 'id')
    {
    }
    /**
     * Collect all wp form from the database.
     *
     * @return array
     */
    public function disq_form_styler__get_all_forms()
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function disq_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
}
namespace DiviSquad\Modules\GlitchText;

/**
 * Glitch Text Module Class.
 *
 * @since           1.2.2
 * @package         squad-modules-for-divi
 */
class GlitchText extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.2
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function disq_generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\GoogleMap;

/**
 * Google Map Module Class.
 *
 * @since   1.4.7
 * @package squad-modules-for-divi
 */
class GoogleMap extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
namespace DiviSquad\Modules\GradientText;

/**
 * Gradient Text Module Class.
 *
 * @since           1.2.6
 * @package         squad-modules-for-divi
 */
class GradientText extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.6
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function disq_generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\ImageGallery;

/**
 * Image Gallery Module Class.
 *
 * @since           1.2.0
 * @package         squad-modules-for-divi
 */
class ImageGallery extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.8
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Get attachment html data for gallery module
     *
     * @param array $args Gallery Options.
     *
     * @return string|null Attachments data
     */
    public function get_gallery_html($args = array())
    {
    }
    /**
     * Get attachment data for gallery module
     *
     * @param array $args             Gallery Options.
     * @param array $conditional_tags Additional conditionals tags.
     * @param array $current_page     Current page.
     *
     * @return array|WP_Post[] Attachments data
     */
    static function get_gallery($args = array(), $conditional_tags = array(), $current_page = array())
    {
    }
}
namespace DiviSquad\Modules\ImageMask;

/**
 * Image Mask Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules
 */
class ImageMask extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
namespace DiviSquad\Modules\Lottie;

/**
 * Lottie Image Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class Lottie extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render item lottie image
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return null|string
     */
    private function disq_render_lottie($multi_view)
    {
    }
}
namespace DiviSquad\Modules\PostGrid;

/**
 * The Post-Grid Module Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class PostGrid extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Return an added new item(module) text.
     *
     * @return string
     */
    public function add_new_child_text()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_layout_styles($attrs)
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array                                     $attrs      List of unprocessed attributes.
     * @param string                                    $content    Content being processed.
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string the html output for the post-grid.
     * @since 1.0.0
     */
    public static function get_post_list_html($attrs, $content = null, $multi_view = null)
    {
    }
    /**
     * Render the post-elements in the outside wrapper.
     *
     * @param \WP_Post $post    The current post.
     * @param array    $attrs   The parent attributes.
     * @param string   $content The parent content.
     *
     * @return void
     */
    public function wp_hook_disq_current_outside_post_element($post, $attrs, $content)
    {
    }
    /**
     * Render the post-elements in the main wrapper.
     *
     * @param \WP_Post $post    The WP POST object.
     * @param array    $attrs   The parent attributes.
     * @param string   $content The parent content.
     *
     * @return void
     */
    public function wp_hook_disq_current_main_post_element($post, $attrs, $content)
    {
    }
    /**
     * Generate content by props with dyanmic values.
     *
     * @param \WP_Post $post        The WP POST object.
     * @param array    $parent_prop The parent attributes.
     * @param string   $content     The parent content.
     * @param callable $callback    The render callback.
     *
     * @return void
     */
    public function disq_generate_props_content($post, $parent_prop, $content, $callback)
    {
    }
    /**
     * Render element body.
     *
     * @param array          $attrs        List of attributes.
     * @param false|\WP_POST $current_post The current post object.
     *
     * @return null|string
     */
    private function disq_render_post_element_body($attrs, $current_post)
    {
    }
    /**
     * Render post name icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return null|string
     */
    private function disq_render_post_title_font_icon($attrs)
    {
    }
    /**
     * Render icon which on is active.
     *
     * @param array $attrs List of attributes.
     *
     * @return string
     */
    private function disq_render_element_icon($attrs)
    {
    }
    /**
     * Render icon.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_element_font_icon($attrs)
    {
    }
    /**
     * Render image.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_element_icon_image($attrs)
    {
    }
    /**
     * Render image.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_element_icon_text($attrs)
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Props arguments.
     *
     * @return mixed
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
}
namespace DiviSquad\Modules\PostGridChild;

/**
 * Post-Grid Child Module Class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class PostGridChild extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * The list of element types
     *
     * @var array
     */
    protected $element_types;
    /**
     * The list of icon eligible element
     *
     * @var array
     */
    protected $icon_not_eligible_elements;
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the fields list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string|null
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function disq_generate_all_styles($attrs)
    {
    }
    /**
     * Render post name icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function disq_generate_element_title_font_icon_styles($attrs)
    {
    }
    /**
     * Render all styles for icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function disq_generate_all_icon_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\PostReadingTime;

/**
 * Post-Reading Time Module Class.
 *
 * @since           1.2.2
 * @package         squad-modules-for-divi
 */
class PostReadingTime extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.2
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Get the reading time text
     *
     * @param array $attrs List of attributes.
     *
     * @return null|string
     */
    private function disq_reading_time_text($attrs)
    {
    }
    /**
     * Calculate the reading time of a post.
     *
     * Gets the post-content, counts the images, strips shortcodes, and strips tags.
     * Then count the words. Converts images into a word count and outputs the total reading time.
     *
     * @param int   $post  The Post ID.
     * @param array $attrs List of attributes.
     *
     * @return false|float|string The total reading time for the article or string if it's 0.
     */
    public function disq_calculate_reading_time($post, $attrs)
    {
    }
    /**
     * Adds additional reading time for images.
     * Calculate additional reading time added by images in posts based on calculations by Medium. https://blog.medium.com/read-time-and-you-bc2048ab620c
     *
     * @param int   $total_images     number of images in post.
     * @param array $words_per_minute words per minute.
     *
     * @return int Additional time added to the reading time by images.
     * @since 1.1.0
     */
    public function disq_calculate_images($total_images, $words_per_minute)
    {
    }
    /**
     * Render time infix
     *
     * @param string $attribute    The text attribute name.
     * @param string $css_selector The stylesheet selector for the attribute.
     *
     * @return null|string
     */
    private function disq_render_time_optional_text($attribute, $css_selector)
    {
    }
    /**
     * Render time suffix
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function disq_render_time_divider($attrs)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function disq_generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\ScrollingText;

/**
 * Scrolling Text Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class ScrollingText extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.3.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
namespace DiviSquad\Modules\StarRating;

/**
 * Star Rating Module Class.
 *
 * @since           1.4.0
 * @package         squad-modules-for-divi
 */
class StarRating extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Generate html markup for stars.
     *
     * @param array $args List of attributes.
     *
     * @return string
     */
    public static function get_star_rating($args = array())
    {
    }
}
namespace DiviSquad\Modules\TypingText;

/**
 * Typing Text Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class TypingText extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render prefix.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function render_prefix_text($attrs)
    {
    }
    /**
     * Render typed text.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function render_typed_text($attrs)
    {
    }
    /**
     * Render suffix.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return null|string
     */
    private function render_suffix_text($attrs)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\VideoPopup;

/**
 * The Drop Cap Module Class.
 *
 * @since       1.4.1
 * @package     squad-modules-for-divi
 */
class VideoPopup extends \DiviSquad\Base\BuilderModule\Squad_Divi_Builder_Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.1
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.1
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.1
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Generate render trigger.
     *
     * @param string $icon The icon value.
     *
     * @return string
     */
    protected function render_trigger($icon)
    {
    }
}
namespace DiviSquad\Utils;

/**
 * Utils class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Asset
{
    /**
     * Get the version
     *
     * @return string
     * @since 1.0.0
     */
    public static function get_the_version()
    {
    }
    /**
     * Get current mode is production or not
     *
     * @return bool
     * @since 1.0.0
     */
    public static function is_production_mode()
    {
    }
    /**
     * Resolve the resource root path.
     *
     * @return string
     */
    public static function root_path()
    {
    }
    /**
     * Resolve the resource root uri.
     *
     * @return string
     */
    public static function root_path_uri()
    {
    }
    /**
     * Validate the relative path.
     *
     * @param string $relative_path The path string for validation.
     *
     * @return string
     */
    public static function validate_relative_path($relative_path)
    {
    }
    /**
     * Resolve the resource path.
     *
     * @param string $relative_path The current path string.
     *
     * @return string
     */
    public static function resolve_file_path($relative_path)
    {
    }
    /**
     * Resolve the resource uri.
     *
     * @param string $relative_path The current path string.
     *
     * @return string
     */
    public static function resolve_file_uri($relative_path)
    {
    }
    /**
     * Process asset path and version data.
     *
     * @param array $path The asset relative path with options.
     *
     * @return array
     */
    public static function process_asset_path_data($path)
    {
    }
    /**
     * Get the admin asset path.
     *
     * @param string $file         The file name.
     * @param array  $file_options The options for current asset file.
     *
     * @return array
     */
    public static function admin_asset_path($file, $file_options = array())
    {
    }
    /**
     * Get the modules asset path.
     *
     * @param string $file         The file name.
     * @param array  $file_options The options for current asset file.
     *
     * @return array
     */
    public static function module_asset_path($file, $file_options = array())
    {
    }
    /**
     * Get the extensions asset path.
     *
     * @param string $file         The file name.
     * @param array  $file_options The options for current asset file.
     *
     * @return array
     */
    public static function extension_asset_path($file, $file_options = array())
    {
    }
    /**
     * Get the vendors asset path.
     *
     * @param string $file         The file name.
     * @param array  $file_options The options for current asset file.
     *
     * @return array
     */
    public static function vendor_asset_path($file, $file_options = array())
    {
    }
    /**
     * Set the asset path.
     *
     * @param string $file         The file name.
     * @param array  $file_options The options for current asset file.
     *
     * @return array
     */
    public static function asset_path($file, $file_options = array())
    {
    }
    /**
     * Enqueue javascript.
     *
     * @param string $keyword   Name of the javascript. Should be unique.
     * @param array  $path      Relative path of the javascript with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered javascript handles this stylesheet depends on. Default empty array.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     * @since 1.0.0
     */
    public static function asset_enqueue($keyword, $path, array $deps = array(), $no_prefix = false)
    {
    }
    /**
     * Enqueue styles.
     *
     * @param string $keyword   Name of the stylesheet. Should be unique.
     * @param array  $path      Relative path of the stylesheet with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
     * @param string $media     Optional. The media for which this stylesheet has been defined. Default 'all'.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     * @since 1.0.0
     */
    public static function style_enqueue($keyword, $path, $deps = array(), $media = 'all', $no_prefix = false)
    {
    }
    /**
     * Register scripts for frontend and builder.
     *
     * @param string $handle The handle name.
     * @param array  $path   The script path url with options.
     * @param array  $deps   The script dependencies.
     *
     * @return void
     */
    public static function register_script($handle, $path, $deps = array())
    {
    }
    /**
     * Enqueue styles.
     *
     * @param string $keyword Name of the stylesheet. Should be unique.
     * @param array  $path    Relative path of the stylesheet with options for the WordPress root directory.
     * @param array  $deps    Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
     * @param string $media   Optional. The media for which this stylesheet has been defined. Default 'all'.
     *
     * @return void
     * @since 1.0.0
     */
    public static function register_style($keyword, $path, $deps = array(), $media = 'all')
    {
    }
    /**
     * Get available script enqueue footer arguments.
     *
     * @param bool $add_strategy Optional. If provided, may be either 'defer' or 'async'.
     *
     * @return array
     * @since 1.4.8
     */
    public static function footer_arguments($add_strategy = false)
    {
    }
}
/**
 * Divi class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Divi
{
    /**
     * Get unicode icon data
     *
     * @param string $icon_value Icon font value.
     *
     * @return string Icon data
     */
    public static function get_icon_data_to_unicode($icon_value)
    {
    }
    /**
     * Add Icons css into the divi asset list when the Dynamic CSS option is turn on in current installation
     *
     * @param array $global_list The existed global asset list.
     *
     * @return array
     */
    public static function global_assets_list($global_list = array())
    {
    }
    /**
     * Add Font Awesome css into the divi asset list when the Dynamic CSS option is turn on in current installation
     *
     * @param array $global_list The existed global asset list.
     *
     * @return array
     */
    public static function global_fa_assets_list($global_list = array())
    {
    }
    /**
     * Add Font Awesome css support manually when the Dynamic CSS option is turn on in current installation.
     *
     * @param string $icon_data The icon value.
     *
     * @return void
     */
    public static function inject_fa_icons($icon_data)
    {
    }
}
/**
 * Helper class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Helper
{
    /**
     * Fix slash issue for Windows os
     *
     * @param string $path Full path for fixing.
     *
     * @return string
     */
    public static function fix_slash($path)
    {
    }
    /**
     * Implode array like html attributes.
     *
     * @param array $array_data The associate array data.
     *
     * @return string
     */
    public static function implode_assoc_array($array_data)
    {
    }
    /**
     * Simple function to sort an array by a specific key. Maintains index association.
     *
     * <code>
     * print_r(array_sort($people, 'age', SORT_DESC)); // Sort by oldest first
     * print_r(array_sort($people, 'surname', SORT_ASC)); // Sort by surname
     * </code>
     *
     * @param array  $array_data The input array.
     * @param string $on         The column number.
     * @param int    $order      The optional second parameter flags may be used to modify the sorting behavior using these values.
     *
     * @return array
     */
    public static function array_sort($array_data, $on, $order = SORT_ASC)
    {
    }
    /**
     * Get Second by days.
     *
     * @param int $days Days Number.
     *
     * @return int
     */
    public static function get_second($days)
    {
    }
}
/**
 * Module class.
 *
 * @since       1.0.0
 * @package     squad-modules-for-divi
 */
class Module
{
    /**
     * Decode json data from properties in module.
     *
     * @param string $html_content json data raw content from module.
     *
     * @return array
     */
    public static function decode_json_data($html_content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return string
     */
    public static function collect_raw_props($content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return string
     */
    public static function json_format_raw_props($content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return array
     */
    public static function collect_child_json_props($content)
    {
    }
    /**
     * Collect all modules from Divi Builder.
     *
     * @param array $modules_array  All modules array..
     * @param array $allowed_prefix The allowed prefix list.
     *
     * @return array
     */
    public static function get_all_modules($modules_array, $allowed_prefix = array())
    {
    }
    /**
     * Clean order class name from the class list for current module.
     *
     * @param array  $classnames All CSS classes name the module has.
     * @param string $slug       Module slug.
     *
     * @return string[]
     */
    public static function clean_order_class($classnames, $slug)
    {
    }
    /**
     * Get default selectors for main and hover
     *
     * @param string $main_css_element Main css selector of element.
     *
     * @return array[]
     */
    public static function selectors_default($main_css_element)
    {
    }
    /**
     * Get margin and padding selectors for main and hover
     *
     * @param string $main_css_element Main css selector of element.
     *
     * @return array
     */
    public static function selectors_margin_padding($main_css_element)
    {
    }
    /**
     * Get max_width selectors for main and hover
     *
     * @param string $main_css_element Main css selector of element.
     *
     * @return array[]
     */
    public static function selectors_max_width($main_css_element)
    {
    }
    /**
     * Get background selectors for main and hover
     *
     * @param string $main_css_element Main css selector of an element.
     *
     * @return array[]
     */
    public static function selectors_background($main_css_element)
    {
    }
}
namespace DiviSquad\Utils\Polyfills;

/**
 * Array Helper class.
 *
 * @since       1.2.3
 * @package     squad-modules-for-divi
 */
class Arr
{
    /**
     * Polyfill for array_key_first() function added in PHP 7.3.
     *
     * Get the first key of the given array without affecting the internal array pointer.
     *
     * @param array $a An array.
     *
     * @return string|int|null The first key of array if the array is not empty; `null` otherwise.
     */
    public static function key_first(array $a)
    {
    }
    /**
     * Polyfill for `array_key_last()` function added in PHP 7.3.
     *
     * Get the last key of the given array without affecting the internal array pointer.
     *
     * @param array $a An array.
     *
     * @return string|int|null The last key of array if the array is not empty; `null` otherwise.
     */
    public static function key_last(array $a)
    {
    }
    /**
     * Check current array data is a list
     *
     * @param array $a The array data.
     *
     * @return bool
     */
    public static function is_list(array $a)
    {
    }
}
/**
 * String Helper class.
 *
 * @since       1.2.3
 * @package     squad-modules-for-divi
 */
class Str
{
    /**
     * Polyfill for `str_starts_with()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if
     * the haystack begins with a needle.
     *
     * @param String $haystack The string to search in.
     * @param String $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$haystack` starts with `$needle`, otherwise false.
     */
    public static function starts_with($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_ends_with()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if
     * the haystack ends with a needle.
     *
     * @param string $haystack The string to search in.
     * @param string $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$haystack` ends with `$needle`, otherwise false.
     */
    public static function ends_with($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_contains()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if a needle is contained in a haystack.
     *
     * @param string $haystack The string to search in.
     * @param string $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$needle` is in `$haystack`, otherwise false.
     */
    public static function contains($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_word_count()` function.
     *
     * Performs a case-sensitive check indicating if a needle is contained in a haystack.
     *
     * @param string  $string_content The string.
     * @param int     $format         Specify the return value of this function, options are: 0, 1, 2.
     * @param ?string $characters     The substring to search for in the `$haystack`.
     *
     * @return array|int True if `$needle` is in `$haystack`, otherwise false.
     */
    public static function word_count($string_content, $format = 0, $characters = null)
    {
    }
}
namespace DiviSquad\Utils;

/**
 * WP Helper class.
 *
 * @since       1.2.2
 * @package     squad-modules-for-divi
 */
class WP
{
    /**
     * Get the active plugins name and versions.
     *
     * @return array
     */
    public static function get_active_plugins()
    {
    }
    /**
     * Get the active plugins' information.
     *
     * @return array
     */
    public static function get_active_plugins_info()
    {
    }
    /**
     * Sets translated strings for a script.
     *
     * Works only if the script has already been registered.
     *
     * @param string $handle The Script handle the textdomain will be attached to.
     * @param string $domain Optional. Text domain. Default 'default'.
     * @param string $path   Optional. The full file path to the directory containing translation files.
     *
     * @return bool True if the text domain was successfully localized, false otherwise.
     */
    public static function set_script_translations($handle, $domain = 'default', $path = '')
    {
    }
}
// phpcs:ignore WordPress.Files.FileName.InvalidClassFileName, WordPress.Files.FileName.NotHyphenatedLowercase
/**
 * Squad Modules Lite
 *
 * @package     divi-squad
 * @author      WP Squad <wp@thewpsquad.com>
 * @license     GPL-3.0-only
 *
 * @wordpress-plugin
 * Plugin Name:         Squad Modules Lite
 * Plugin URI:          https://squadmodules.com/
 * Description:         The Advanced Divi plugin you install after Divi or Extra Theme!
 * Version:             1.4.11
 * Requires at least:   5.0.0
 * Requires PHP:        5.6.40
 * Author:              WP Squad
 * Author URI:          https://squadmodules.com/
 * License:             GPL-3.0-only
 * License URI:         https://www.gnu.org/licenses/gpl-3.0.en.html
 * Text Domain:         squad-modules-for-divi
 * Domain Path:         /languages
 */
namespace DiviSquad;

/**
 * The instance of Divi Squad Plugin (Free).
 *
 * @return SquadModules
 */
function divi_squad()
{
}