<?php
/**
 * Generated stub declarations for Squad Modules for Divi.
 * @see https://squadmodules.com/
 * @see https://github.com/mralaminahamed/phpstan-squad-modules-lite-stubs
 */

namespace DiviSquad\Admin;

/**
 * Assets class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class Assets
{
    /**
     * Get the lis of admin extra asset allowed page for the plugin.
     *
     * @return array
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function get_plugin_extra_asset_allowed_pages()
    {
    }
    /**
     * Enqueue the plugin's scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function wp_hook_enqueue_plugin_admin_asset($hook_suffix)
    {
    }
    /**
     * Get the lis of admin asset allowed page for the plugin.
     *
     * @return array
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function get_plugin_asset_allowed_pages()
    {
    }
    /**
     * Enqueue extra scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function wp_hook_enqueue_extra_admin_asset($hook_suffix)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function wp_common_localize_script_data($exists_data)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function wp_localize_script_data($exists_data)
    {
    }
}
namespace DiviSquad\Admin\Plugin;

/**
 * Plugin Action Links class
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class ActionLinks
{
}
/**
 * Plugin Admin Footer Text class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class AdminFooterText
{
    /**
     * Filters the "Thank you" text displayed in the admin footer.
     *
     * @param string $footer_text The content that will be printed.
     *
     * @return  string
     * @since 1.3.2
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function add_plugin_footer_text($footer_text)
    {
    }
    /**
     * Filters the version/update text displayed in the admin footer.
     *
     * @param string $content The content that will be printed.
     *
     * @return  string
     * @since 1.4.8
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function add_update_footer_text($content)
    {
    }
}
/**
 * Plugin Row Meta class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class RowMeta
{
}
namespace DiviSquad\Base\DiviBuilder;

/**
 * Builder Utils class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
#[\AllowDynamicProperties]
abstract class Module extends \ET_Builder_Module
{
    /**
     * Utils folder name.
     *
     * @var string
     * @since 1.0.0
     */
    public $folder_name = 'et_pb_divi_squad_modules';
    /**
     * Stylesheet selector for tooltip container.
     *
     * @var string
     * @since 1.0.0
     */
    public $tooltip_css_element = '';
    /**
     * The default options for divider.
     *
     * @var array
     */
    public $squad_divider_defaults = array('divider_style' => 'solid', 'divider_position' => 'bottom', 'divider_weight' => '2px');
    /**
     * The show options for divider.
     *
     * @var array
     */
    public $squad_divider_show_options = array('off' => 'No', 'on' => 'Yes');
    /**
     * The instance of Utils class
     *
     * @var Utils\Base
     */
    public $squad_utils;
    /**
     * Utils credits.
     *
     * @var string[]
     * @since 1.0.0
     */
    protected $module_credits = array('module_uri' => '', 'author' => 'Divi Squad', 'author_uri' => \DiviSquad\Managers\Links::HOME_URL . '?utm_campaign=wporg&utm_source=module_modal&utm_medium=module_author_link');
    /**
     * The icon for module.
     *
     * @var string
     * @since 1.0.0
     */
    protected $icon = '';
    /**
     * The icon path for module.
     *
     * @var string
     * @since 1.0.0
     */
    protected $icon_path = '';
    /**
     * The list of icon eligible element
     *
     * @var array
     */
    protected $icon_not_eligible_elements = array();
}
/**
 * Builder Utils class
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.1.0 mark as deprecated
 */
#[\AllowDynamicProperties]
abstract class DiviSquad_Module extends \DiviSquad\Base\DiviBuilder\Module
{
}
/**
 * Integration API Base Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
abstract class Integration
{
    /**
     * The plugin name.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $name = '';
    /**
     * Absolute path to the plugin's directory.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $plugin_dir = '';
    /**
     * The plugin's directory URL.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $plugin_dir_url = '';
    /**
     * The plugin's version
     *
     * @since 1.0.0
     *
     * @var string The plugin's version
     */
    protected $version = '';
    /**
     * The asset build for the plugin
     *
     * @since 1.0.0
     *
     * @var string The plugin's version
     */
    protected $build_path = 'build/divi-builder-4/';
    /**
     * Constructor.
     *
     * @param string $name           The plugin's WP Plugin name.
     * @param string $plugin_dir     Absolute path to the plugin's directory.
     * @param string $plugin_dir_url The plugin's directory URL.
     */
    public function __construct($name, $plugin_dir, $plugin_dir_url)
    {
    }
    /**
     * Performs initialization tasks.
     *
     * @since 1.0.0
     *
     * @return void
     */
    public abstract function initialize();
    /**
     * Get the plugin version number
     *
     * @since 1.0.0
     *
     * @return string
     */
    public abstract function get_version();
}
namespace DiviSquad\Base\DiviBuilder\Integration;

/**
 * Integration API Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
abstract class ShortcodeAPI extends \DiviSquad\Base\DiviBuilder\Integration
{
    /**
     * Loads custom modules when the builder is ready.
     */
    public abstract function hook_et_builder_ready();
    /**
     * Performs initialization tasks.
     */
    public function initialize()
    {
    }
    /**
     * Enqueues the plugin's scripts and styles for the admin area.
     */
    public function admin_hook_enqueue_scripts()
    {
    }
    /**
     * Enqueues minified (production) or non-minified (hot reloaded) backend styles.
     */
    public function enqueue_backend_styles()
    {
    }
    /**
     * Enqueues the plugin's scripts and styles.
     */
    public function wp_hook_enqueue_scripts()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder;

/**
 * Integration API Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.1.0 mark as deprecated
 */
abstract class IntegrationAPI extends \DiviSquad\Base\DiviBuilder\Integration\ShortcodeAPI
{
}
/**
 * Integration API Base Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.1.0 mark as deprecated
 */
abstract class IntegrationAPIBase extends \DiviSquad\Base\DiviBuilder\Integration
{
}
namespace DiviSquad\Base\DiviBuilder\Utils;

/**
 * Builder Utils Interface
 *
 * @package     DiviSquad
 * @since       1.5.0
 * @deprecated  3.1.0 marked as deprecated
 */
interface UtilsInterface
{
}
namespace DiviSquad\Base\Factories\AdminMenu;

/**
 * Menu Interface.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
interface MenuInterface
{
    /**
     * The permission for menu management.
     *
     * @return string
     */
    public function get_permission();
    /**
     * Slug of the main menu.
     *
     * @return  string
     */
    public function get_main_menu_slug();
    /**
     * Get details about the Main Menu.
     *
     * @return array Details about the Main Menu.
     */
    public function get_main_menu();
    /**
     * Get details about the Sub Menu.
     *
     * @return array Details about the Sub Menu.
     */
    public function get_sub_menus();
    /**
     * Load template file for admin pages.
     *
     * @return void
     */
    public function get_template();
    /**
     * Add the CSS classes for the body tag in the admin.
     *
     * @return string
     */
    public function get_body_classes();
}
/**
 * Abstract class representing the Menu.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
abstract class Menu implements \DiviSquad\Base\Factories\AdminMenu\MenuInterface
{
    /**
     * The permission for menu management.
     *
     * @return string
     */
    public function get_permission()
    {
    }
    /**
     * Slug of the main menu.
     *
     * @return  string
     */
    public function get_main_menu_slug()
    {
    }
    /**
     * Details about the Main Menu.
     *
     * @return  array Details about the Main Menu.
     */
    public function get_main_menu()
    {
    }
    /**
     * Details about the Sub Menu.
     *
     * @return  array Details about the Sub Menu.
     */
    public function get_sub_menus()
    {
    }
    /**
     * Load template file for admin pages.
     *
     * @return  void
     */
    public function get_template()
    {
    }
    /**
     * Add the CSS classes for the body tag in the admin.
     *
     * @return string
     */
    public function get_body_classes()
    {
    }
}
/**
 * Abstract class representing the Menu.
 *
 * @package     DiviSquad
 * @since       2.0.0
 * @deprecated  3.0.0
 */
abstract class MenuCore extends \DiviSquad\Base\Factories\AdminMenu\Menu
{
}
namespace DiviSquad\Integrations;

/**
 * Admin Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class Admin
{
    /**
     * Get the instance of the current class.
     *
     * @return void
     * @deprecated 3.0.0 marked as deprecated.
     */
    public static function load()
    {
    }
    /**
     * Fires when enqueuing scripts for all admin pages.
     *
     * @param \DiviSquad\Admin\Assets $admin_asset The instance of Admin asset class.
     *
     * @return void
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function register_admin_scripts($admin_asset)
    {
    }
    /**
     * Include all actions links for the plugin.
     *
     * @param SquadAdmin\Plugin\ActionLinks $action_links The instance of Plugin action links class.
     *
     * @return void
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function register_plugin_action_links($action_links)
    {
    }
    /**
     * Include all row metas for the plugin.
     *
     * @param SquadAdmin\Plugin\RowMeta $row_meta The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function register_plugin_row_meta($row_meta)
    {
    }
    /**
     * Include admin footer text for the plugin.
     *
     * @param SquadAdmin\Plugin\AdminFooterText $footer_text The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.2.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function register_plugin_footer_text($footer_text)
    {
    }
    /**
     * Include update footer text for the plugin at admin area.
     *
     * @param SquadAdmin\Plugin\AdminFooterText $footer_text The instance of the Plugin row meta.
     *
     * @return void
     * @since 1.4.8
     * @deprecated 3.0.0 marked as deprecated.
     */
    protected static function register_update_footer_text($footer_text)
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Assets Class
 *
 * @package     DiviSquad
 * @since       1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class Assets
{
    /**
     * Enqueue scripts for frontend.
     *
     * @return void
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function enqueue_scripts()
    {
    }
    /**
     * Enqueue scripts for builder.
     *
     * @return void
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function enqueue_scripts_vb()
    {
    }
    /**
     * Load requires asset extra in the visual builder by default.
     *
     * @param string $output Exist output.
     *
     * @return string
     * @deprecated 3.0.0 marked as deprecated.
     */
    public function wp_localize_script_data($output)
    {
    }
}
namespace DiviSquad\Base\Factories;

/**
 * Feature Management class
 *
 * @package DiviSquad
 * @since   2.0.0
 */
abstract class SquadFeatures
{
    /**
     * Get the type of Divi Builder, default is: D4. Available opinions are: D4, D5.
     *
     * @var string
     */
    protected $builder_type = 'D4';
    /**
     * Retrieve the list of registered.
     *
     * @return array[]
     */
    public abstract function get_registered_list();
    /**
     * Retrieve the list of inactive registered.
     *
     * @return array
     */
    public abstract function get_inactive_registries();
    /**
     * Retrieve the list of default active registered.
     *
     * @return array
     */
    public abstract function get_default_registries();
    /**
     * Retrieve the filtered list of registered.
     *
     * @param array         $registered The list of registered.
     * @param callable|null $callback   The callback function to filter the current registriy.
     *
     * @return array
     */
    protected function get_filtered_registries($registered, $callback = null)
    {
    }
    /**
     * Verify third party plugin requirements for current registry.
     *
     * @param array $registry_info  Current registry information.
     * @param array $active_plugins Active plugin lists from current installation.
     *
     * @return bool
     */
    protected function verify_requirements($registry_info, $active_plugins)
    {
    }
    /**
     * Load the module class.
     *
     * @param array  $registered The available modules list.
     * @param array  $defaults   The default activated registries list.
     * @param mixed  $activate   The user-defined activated registries list.
     * @param array  $inactivate The user-defined inactivated registries list.
     * @param string $version    Current version of the plugin.
     *
     * @return array
     */
    protected function get_verified_registries($registered, $defaults, $activate, $inactivate, $version)
    {
    }
}
namespace DiviSquad\Managers\Features;

/**
 * Extension Manager class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Extensions extends \DiviSquad\Base\Factories\SquadFeatures
{
    /**
     * Get available extensions.
     *
     * @return array[]
     */
    public function get_registered_list()
    {
    }
    /**
     * Get default active extensions.
     *
     * @return array
     */
    public function get_default_registries()
    {
    }
    /**
     * Get inactive extensions.
     *
     * @return array
     */
    public function get_inactive_registries()
    {
    }
    /**
     * Load enabled extensions
     *
     * @param string $path The defined directory.
     *
     * @return void
     */
    public function load_extensions($path)
    {
    }
    /**
     * Load enabled extensions
     *
     * @param string $path   The defined directory.
     * @param Memory $memory The instance of Memory class.
     *
     * @return void
     */
    protected function load_extensions_files($path, $memory)
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Extension Manager class
 *
 * @package     DiviSquad
 * @since       1.0.0
 * @deprecated  3.0.0 marked as deprecated.
 */
class Extensions extends \DiviSquad\Managers\Features\Extensions
{
}
namespace DiviSquad\Managers\Features;

/**
 * Module Manager class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Modules extends \DiviSquad\Base\Factories\SquadFeatures
{
    /**
     * Get all modules including extra modules.
     *
     * @return array[]
     */
    public function get_all_modules_with_locked()
    {
    }
    /**
     *  Get available modules.
     *
     * @return array[]
     */
    public function get_registered_list()
    {
    }
    /**
     *  Get inactive modules.
     *
     * @return array
     */
    public function get_inactive_registries()
    {
    }
    /**
     * Get active modules.
     *
     * @return array
     */
    public function get_active_registries()
    {
    }
    /**
     * Get active modules.
     *
     * @return array
     */
    public function get_active_modules()
    {
    }
    /**
     * Get default modules.
     *
     * @param string $module_name The module name.
     *
     * @return bool
     */
    public function is_module_active($module_name)
    {
    }
    /**
     * Check if the module is active by class name.
     *
     * @param string $module_classname The module class name.
     *
     * @return bool
     */
    public function is_module_active_by_classname($module_classname)
    {
    }
    /**
     * Load enabled modules for Divi Builder from defined directory.
     *
     * @param string $path The defined directory.
     *
     * @return void
     */
    public function load_modules($path)
    {
    }
    /**
     * Load the module class.
     *
     * @param string $path   The module class path.
     * @param Memory $memory The instance of Memory class.
     *
     * @return void
     */
    protected function load_module_files($path, $memory)
    {
    }
    /**
     * Filter list of modules with specific keys.
     *
     * @param array $input_array Running module configuration.
     *
     * @return array
     */
    public function custom_array_slice($input_array)
    {
    }
    /**
     *  Get default active modules.
     *
     * @return array
     */
    public function get_default_registries()
    {
    }
    /**
     * Check the current module type.
     *
     * @param array $module The array of current module.
     *
     * @return bool
     */
    protected function verify_module_type($module)
    {
    }
    /**
     * Verify the requirements of the module.
     *
     * @param array  $activated_module       The module.
     * @param string $module_key            The module name key.
     *
     * @return void
     */
    private function load_module_if_exists($activated_module, $module_key)
    {
    }
    /**
     * Load the module class.
     *
     * @param string $module_key    The module specification key.
     * @param array  $module    The module.
     *
     * @return void
     * @since 2.1.2
     */
    protected function require_module_class($module_key = 'name', $module = array())
    {
    }
    /**
     * Load the module class from path.
     *
     * @param string $path   The module class path.
     * @param string $module The module name.
     *
     * @return void
     */
    protected function require_module_path($path, $module)
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Module Manager class
 *
 * @package     DiviSquad
 * @since       1.0.0
 * @deprecated  3.0.0 marked as deprecated.
 */
class Modules extends \DiviSquad\Managers\Features\Modules
{
}
namespace DiviSquad\Modules;

/**
 * Post-Grid Child Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class PostGridChild extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * The list of element types
     *
     * @var array
     */
    protected $element_types = array();
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 3.1.0
     */
    public function get_custom_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Render post name icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function squad_generate_element_title_font_icon_styles($attrs)
    {
    }
    /**
     * Render all styles for icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function squad_generate_all_icon_styles($attrs)
    {
    }
}
namespace DiviSquad\Modules\PostGridChild;

/**
 * Post-Grid Child Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 * @deprecated 3.0.0 marked as deprecated.
 */
class PostGridChild extends \DiviSquad\Modules\PostGridChild
{
}
namespace DiviSquad\Utils\Media;

/**
 * The Filesystem class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Filesystem
{
    /**
     * Get the filesystem.
     *
     * @access protected
     * @return WP_Filesystem_Base
     */
    protected function get_wp_filesystem()
    {
    }
}
namespace DiviSquad\Base;

/**
 * The Base class for Core
 *
 * @package DiviSquad
 * @since   1.0.0
 */
abstract class Core extends \DiviSquad\Utils\Media\Filesystem
{
    /**
     * The plugin admin menu slug.
     *
     * @var string
     */
    protected $admin_menu_slug = '';
    /**
     * The plugin options.
     *
     * @var array
     */
    protected $options = array();
    /**
     * The Plugin name.
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $name;
    /**
     * The Plugin Text Domain.
     *
     * @var string
     */
    protected $textdomain;
    /**
     * The Plugin Version.
     *
     * @since 1.4.5
     *
     * @var string
     */
    protected $version;
    /**
     * The plugin option prefix
     *
     * @since 1.0.0
     *
     * @var string
     */
    protected $opt_prefix;
    /**
     * The Script handle the text domain will be attached to.
     *
     * @var string
     */
    protected $localize_handle;
    /**
     * The full file path to the directory containing translation files.
     *
     * @var string
     */
    protected $localize_path;
    /**
     * List of containers
     *
     * @var array
     */
    protected $container = array();
    /**
     * Initialize the plugin with required components.
     *
     * @param array $options Options.
     *
     * @return void
     */
    protected abstract function init($options = array());
    /**
     * Get the plugin options.
     *
     * @return array
     */
    public abstract function get_options();
    /**
     * Get the plugin version.
     *
     * @return string
     */
    public abstract function get_version();
    /**
     * Get the plugin version (doted).
     *
     * @return string
     */
    public abstract function get_version_dot();
    /**
     * Set the activation hook.
     *
     * @return void
     */
    public abstract function hook_activation();
    /**
     * Load all assets.
     *
     * @since 3.0.0
     *
     * @return void
     */
    protected function load_assets()
    {
    }
    /**
     * Load all extensions.
     *
     * @return void
     */
    protected abstract function load_extensions();
    /**
     * Load all divi modules.
     *
     * @return void
     */
    protected abstract function load_modules_for_builder();
    /**
     * Get the plugin name.
     *
     * @return string
     */
    public function get_name()
    {
    }
    /**
     * Get the plugin text domain.
     *
     * @return string
     */
    public function get_textdomain()
    {
    }
    /**
     * The full file path to the directory containing translation files.
     *
     * @return string
     */
    public function get_localize_path()
    {
    }
    /**
     * Get the plugin admin menu slug.
     *
     * @return string
     */
    public function get_admin_menu_slug()
    {
    }
    /**
     * Get the plugin option prefix.
     *
     * @return string
     */
    public function get_option_prefix()
    {
    }
    /**
     * Load the local text domain.
     *
     * @return void
     */
    public function load_text_domain()
    {
    }
    /**
     * Load css variables in the admin panel.
     *
     * @return void
     */
    public function wp_hook_enqueue_admin_scripts()
    {
    }
    /**
     * The admin interface asset and others.
     *
     * @return void
     */
    protected function load_global_assets()
    {
    }
    /**
     * Set the localize data.
     *
     * @return void
     */
    public function localize_scripts_data()
    {
    }
    /**
     * Load css variables in the frontend.
     *
     * @return void
     */
    public function wp_hook_enqueue_scripts()
    {
    }
    /**
     * Load the localized data in the frontend and admin panel.
     *
     * @return void
     */
    public function wp_hook_enqueue_localize_data()
    {
    }
    /**
     * Localizes a script.
     *
     * Works only if the script has already been registered.
     *
     * @param string $object_name Name for the JavaScript object. Passed directly, so it should be qualified JS variable.
     * @param array  $l10n        The data itself. The data can be either a single or multidimensional array.
     *
     * @return string Localizes a script.
     */
    public function localize_script($object_name, $l10n)
    {
    }
    /**
     * Resolve the plugin data.
     *
     * @param string $plugin_file Absolute path to the main plugin file.
     *
     * @return array
     * @throws \RuntimeException If the plugin file does not exist or the function cannot be included.
     */
    protected function get_plugin_data($plugin_file)
    {
    }
    /**
     * Set the plugin options.
     *
     * @param string $key The key to set.
     *
     * @return bool
     */
    public function __isset($key)
    {
    }
    /**
     * Set the plugin options.
     *
     * @param string $key The key to set.
     *
     * @return mixed
     */
    public function __get($key)
    {
    }
    /**
     * Set the plugin options.
     *
     * @param string $key The key to set.
     * @param mixed  $value The value to set.
     *
     * @return void
     */
    public function __set($key, $value)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Module;

/**
 * Builder Utils Helper Class which help to the all module class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
abstract class FormStyler extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get toggles for the module's settings modal.
     */
    public function get_settings_modal_toggles()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     */
    public function get_fields()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @param array $fields   List of fields.
     * @param array $removals List of removable fields.
     *
     * @return array[]
     */
    public function squad_remove_pre_assigned_fields($fields, $removals)
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected abstract function get_form_selector_default();
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected abstract function get_field_selector_default();
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected abstract function get_submit_button_selector_default();
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected abstract function get_error_message_selector_default();
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected abstract function get_success_message_selector_default();
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function squad_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected abstract function get_form_selector_hover();
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected abstract function get_field_selector_hover();
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected abstract function get_submit_button_selector_hover();
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected abstract function get_error_message_selector_hover();
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected abstract function get_success_message_selector_hover();
    /**
     * Generate styles.
     *
     * @param array $attrs   List of unprocessed attributes.
     * @param array $options Control attributes.
     *
     * @return void
     */
    protected function squad_form_styler_generate_module_styles($attrs, $options)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder;

/**
 * Builder DiviBackend Placeholder class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
abstract class Placeholder
{
    /**
     *  Get The defaults data for module.
     *
     * @return array
     */
    public function get_modules_defaults()
    {
    }
    /**
     * Filters backend data passed to the Visual Builder.
     * This function is used to add static helpers whose content rarely changes.
     * eg: google fonts, module default, and so on.
     *
     * @param array $exists Exists definitions.
     *
     * @return array
     */
    public abstract function static_asset_definitions($exists = array());
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @param string $content content.
     *
     * @return string
     */
    public abstract function asset_definitions($content);
}
namespace DiviSquad\Base\DiviBuilder\Utils;

/**
 * Common trait.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
trait CommonTrait
{
    /**
     * Decode json data from properties in module.
     *
     * @param string $html_content json data raw content from module.
     *
     * @return array
     */
    public static function decode_json_data($html_content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return string
     */
    public static function collect_raw_props($content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return array
     * @throws \RuntimeException When json error found.
     */
    public static function collect_child_json_props($content)
    {
    }
    /**
     * Collect actual props from child module with escaping raw html.
     *
     * @param string $content The raw content form child element.
     *
     * @return string
     */
    public static function json_format_raw_props($content)
    {
    }
    /**
     * Clean order class name from the class list for current module.
     *
     * @param array  $classnames All CSS classes name the module has.
     * @param string $slug       Utils slug.
     *
     * @return string[]
     */
    public static function clean_order_class($classnames, $slug)
    {
    }
    /**
     * Get margin and padding selectors for main and hover
     *
     * @param string $main_css_element Main css selector of element.
     *
     * @return array
     */
    public static function selectors_margin_padding($main_css_element)
    {
    }
    /**
     * Get max_width selectors for main and hover
     *
     * @param string $main_css_element Main css selector of an element.
     *
     * @return array[]
     */
    public static function selectors_max_width($main_css_element)
    {
    }
    /**
     * Get default selectors for main and hover
     *
     * @param string $main_css_element Main css selector of element.
     *
     * @return array[]
     */
    public static function selectors_default($main_css_element)
    {
    }
    /**
     * Get background selectors for main and hover
     *
     * @param string $main_css_element Main css selector of an element.
     *
     * @return array[]
     */
    public static function selectors_background($main_css_element)
    {
    }
    /**
     * Convert field name into css property name.
     *
     * @param string $field Field name.
     *
     * @return string|string[]
     */
    public static function field_to_css_prop($field)
    {
    }
}
/**
 * Fields class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
trait FieldsTrait
{
    /**
     * Get HTML tag elements for text item.
     *
     * @return array<string, string>
     */
    public static function get_html_tag_elements()
    {
    }
    /**
     * Default fields for Heading toggles.
     *
     * @param string   $field_label The heading toggle label name.
     * @param int|bool $priority    The toggle priority, default is 55.
     *
     * @return array
     */
    public static function get_heading_toggles($field_label, $priority = 55)
    {
    }
    /**
     * Get heading elements for toggles.
     *
     * @return string[][]
     */
    public static function get_heading_elements()
    {
    }
    /**
     * Get Block elements for toggles.
     *
     * @return string[][]
     */
    public static function get_block_elements()
    {
    }
    /**
     * Add text clip settings.
     *
     * @param array $options The options for text clip fields.
     *
     * @return array
     */
    public static function get_text_clip_fields($options = array())
    {
    }
    /**
     * Add Z Index fields for element.
     *
     * @param array $options The options for z index fields.
     *
     * @return array
     */
    public static function add_z_index_field($options = array())
    {
    }
    /**
     *  Get general fields.
     *
     * @return array[]
     */
    public static function get_general_fields()
    {
    }
    /**
     *  Add button fields.
     *
     * @param array $options The options for button fields.
     *
     * @return array
     */
    public function get_button_fields($options = array())
    {
    }
    /**
     *  Add button associated fields.
     *
     * @param array $options The options for button fields.
     *
     * @return array
     */
    public function get_button_associated_fields($options = array())
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Fields;

/**
 * Field Compatibility class
 *
 * @package DiviSquad
 * @author  WP Squad <support@squadmodules.com>
 * @since   1.0.0
 */
trait CompatibilityTrait
{
    /**
     * Fix border transition issues.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array
     */
    public static function fix_border_transition(&$fields, $slug, $selector)
    {
    }
    /**
     * Fix font style transition issues.
     *
     * Take all the attributes from divi advanced 'fonts' field and set the transition with given selector.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array $fields
     */
    public static function fix_fonts_transition(&$fields, $slug, $selector)
    {
    }
    /**
     * Fix box-shadow transition issues.
     *
     * @param array  $fields   The defined fields list.
     * @param string $slug     The slug of the current module.
     * @param string $selector The css selector.
     *
     * @return array
     */
    public static function fix_box_shadow_transition(&$fields, $slug, $selector)
    {
    }
}
/**
 * Field Definition class.
 *
 * @package DiviSquad
 * @author  WP Squad <support@squadmodules.com>
 * @since   1.0.0
 */
trait DefinitionTrait
{
    /**
     * Simplifies the creation of filter configurations.
     *
     * @param string $label         The label for the filter.
     * @param string $tab_slug      The tab slug under which the filter is grouped.
     * @param string $toggle_slug   The toggle slug for the specific setting group.
     * @param array  $css_selectors The CSS selectors for targeting the element.
     * @param array  $depends_on    Dependencies that determine when the filter is active.
     * @param array  $show_if_not   Conditions under which the filter should not be shown.
     *
     * @return array The filter configuration array.
     */
    public static function add_filters_field($label, $tab_slug, $toggle_slug, $css_selectors, $depends_on = array(), $show_if_not = array())
    {
    }
    /**
     * Adds border properties to the module's configuration.
     *
     * @param string $label          The label for the border settings.
     * @param string $tab_slug       The tab slug under which the border settings will appear.
     * @param string $toggle_slug    The toggle slug under which the border settings will appear.
     * @param array  $css_properties Array containing CSS properties for borders.
     * @param array  $depends_on     Dependencies that determine when the filter is active.
     * @param array  $show_if_not    Conditions under which the filter should not be shown.
     *
     * @return array The border configuration array.
     */
    public static function add_border_field($label, $tab_slug, $toggle_slug, $css_properties, $depends_on = array(), $show_if_not = array())
    {
    }
    /**
     * Helper function to create box shadow settings field.
     *
     * @param string $label            The label for the box shadow field.
     * @param string $category         The category of the option.
     * @param string $tab_slug         The tab slug under which the field will appear.
     * @param string $toggle_slug      The toggle slug under which the field will appear.
     * @param array  $css_selectors    The CSS selector for the element.
     * @param array  $default_settings Default settings for the box shadow.
     *
     * @return array The box shadow field array.
     */
    public static function add_box_shadow_field($label, $category, $tab_slug, $toggle_slug, $css_selectors, $default_settings)
    {
    }
    /**
     * Add yes no fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_yes_no_field($label, $properties = array())
    {
    }
    /**
     * Add color fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_color_field($label, $properties = array())
    {
    }
    /**
     * Add select box fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_select_box_field($label, $properties = array())
    {
    }
    /**
     * Add alignment fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_placement_field($label, $properties = array())
    {
    }
    /**
     * Add alignment fields for module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_alignment_field($label, $properties = array())
    {
    }
    /**
     * Add additional transition fields. e.x hover transition fields.
     *
     * @param array $options The additional options for the current field.
     *
     * @return array
     */
    public static function add_transition_fields($options = array())
    {
    }
    /**
     * Add range fields for the module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     * @param array  $conditions The additional conditions for the current field.
     *
     * @return array[]
     */
    public static function add_range_field($label, $properties = array(), $conditions = array())
    {
    }
    /**
     * Default fields for Heading toggles.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function add_font_field($label, $properties = array())
    {
    }
    /**
     * Add margin and padding fields for the module.
     *
     * @param string $label      The field label.
     * @param array  $properties The additional properties for the current field.
     *
     * @return array[]
     */
    public static function add_margin_padding_field($label, $properties = array())
    {
    }
    /**
     * Add background fields for module.
     *
     * @param array $properties The additional properties for the current field.
     *
     * @return array
     */
    public function add_background_field($properties = array())
    {
    }
    /**
     * Add background field options for module.
     *
     * @param array $properties The additional properties for the current field.
     *
     * @return array
     */
    public static function get_background_field_options($properties = array())
    {
    }
    /**
     * Add all background fields for module.
     *
     * @param array $properties        The additional properties for the current field.
     * @param array $background_fields The additional background fields for the current field.
     *
     * @return array
     */
    protected function add_background_fields($properties = array(), $background_fields = array())
    {
    }
    /**
     * Add background: gradient field for module.
     *
     * @param array $properties The additional properties for the current field.
     *
     * @return array
     */
    public function add_background_gradient_field($properties = array())
    {
    }
}
/**
 * Field Processor class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
trait ProcessorTrait
{
    /**
     * Process styles for width fields in the module.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    public function generate_additional_styles($options = array())
    {
    }
    /**
     * Collect any props value from mapping values.
     *
     * @param array  $options           The option array data.
     * @param string $qualified_name    The current field name.
     * @param string $last_modified_key The last modified key.
     *
     * @return array
     */
    public function collect_prop_value_responsive($options, $qualified_name, $last_modified_key)
    {
    }
    /**
     * Process styles for responsive in the module.
     *
     * @param array $options The options property for processing styles.
     *
     * @return void
     */
    public function process_responsive_styles($options)
    {
    }
    /**
     * Set actual position for icon or image in show on hover effect for the current element with default, responsive and hover.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    public function generate_show_icon_on_hover_styles($options = array())
    {
    }
    /**
     * Collect icon prop width event if responsive mode.
     *
     * @param array $props   List of attributes.
     * @param array $options Options of current width.
     *
     * @return array
     * @since 1.0.0
     */
    private static function get_icon_hover_effect_prop_width($props, $options = array())
    {
    }
    /**
     * Collect the value of any props for Icon on hover effect.
     *
     * @param array $props   List of attributes.
     * @param array $options Options of current width.
     *
     * @return string
     * @since 1.0.0
     */
    private static function hover_effect_generate_css($props, $options = array())
    {
    }
    /**
     * Collect any props value from mapping values.
     *
     * @param array  $options       The option array data.
     * @param string $current_value The current field value.
     *
     * @return mixed
     */
    public static function collect_prop_mapping_value($options, $current_value)
    {
    }
    /**
     * Process styles for margin and padding fields in the module.
     *
     * @param array $options Options of current width.
     *
     * @return void
     * @since 1.0.0
     */
    public function generate_margin_padding_styles($options = array())
    {
    }
    /**
     * Process Text Clip styles.
     *
     * @param array $options The additional options for processing text clip features.
     *
     * @return void
     */
    public function generate_text_clip_styles($options = array())
    {
    }
    /**
     * Process divider styles.
     *
     * @param array $options The additional options for processing divider features.
     *
     * @return void
     */
    public function generate_divider_styles($options = array())
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils;

/**
 * Deprecated Methods And Properties Trait
 *
 * @package DiviSquad
 * @since   3.1.0
 */
trait DeprecationsTrait
{
    /**
     * The default deprecated version.
     *
     * @var string
     */
    private $deprecated_version = '3.1.0';
    /**
     * Array of deprecated properties.
     *
     * @var array
     */
    private $deprecated_properties = array('squad_divider_defaults' => array('version' => '3.1.0', 'message' => 'Use the property $divider_defaults instead of.', 'value' => array('divider_style' => 'solid', 'divider_position' => 'bottom', 'divider_weight' => '2px')), 'squad_divider_show_options' => array('version' => '3.1.0', 'message' => 'Use the property $divider_show_options instead of.', 'value' => array('off' => 'No', 'on' => 'Yes')));
    /**
     * Array of deprecated methods.
     *
     * @var array
     */
    private $deprecated_methods = array('get_hansel_and_gretel' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->breadcrumbs->get_hansel_and_gretel() instead of $this->squad_utils->get_hansel_and_gretel()'), 'get_divider_defaults' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_defaults() instead of $this->squad_utils->get_divider_defaults()'), 'get_divider_default' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_default() instead of $this->squad_utils->get_divider_default()'), 'get_divider_show_options' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_show_options() instead of $this->squad_utils->get_divider_show_options()'), 'initiate_the_divider_element' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->initiate_element() instead of $this->squad_utils->initiate_the_divider_element()'), 'get_divider_element_fields' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_fields() instead of $this->squad_utils->get_divider_element_fields()'), 'get_divider_field_options' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_field_options() instead of $this->squad_utils->get_divider_field_options()'), 'get_mask_shape' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->mask_shape->get_shape() instead of $this->squad_utils->get_mask_shape()'));
    /**
     * Magic method to handle deprecated property access.
     *
     * @param string $name The property name.
     * @return mixed The value of the deprecated property.
     * @throws InvalidArgumentException If the property does not exist.
     */
    public function __get($name)
    {
    }
    /**
     * Magic method to handle deprecated method calls.
     *
     * @param string $name The method name.
     * @param array  $arguments The method arguments.
     * @return mixed The result of the method call.
     * @throws InvalidArgumentException If the method does not exist.
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Trigger a deprecated warning.
     *
     * @param string $name The name of the deprecated element.
     * @param string $version The version since deprecation.
     * @param string $message The deprecation message.
     * @param string $type The type of the deprecated element ('property' or 'method').
     */
    private function trigger_deprecated_warning($name, $version, $message, $type)
    {
    }
    /**
     * Handle calls to deprecated utility methods.
     *
     * @param string $name The name of the deprecated method.
     * @param array  $arguments The arguments passed to the method.
     * @return mixed The result of the method call.
     * @throws BadMethodCallException If the deprecated method is not implemented.
     */
    private function handle_deprecated_utility_method($name, $arguments)
    {
    }
    /**
     * Set the default deprecated version.
     *
     * @param string $version The new deprecated version.
     */
    public function set_deprecated_version($version)
    {
    }
    /**
     * Add a new deprecated property.
     *
     * @param string $name The property name.
     * @param string $version The version since deprecation.
     * @param string $message The deprecation message.
     * @param mixed  $value The default value of the deprecated property.
     */
    public function add_deprecated_property($name, $version, $message, $value)
    {
    }
    /**
     * Add a new deprecated method.
     *
     * @param string $name The method name.
     * @param string $version The version since deprecation.
     * @param string $message The deprecation message.
     */
    public function add_deprecated_method($name, $version, $message)
    {
    }
}
/**
 * Utils Base class
 *
 * @package DiviSquad
 * @author  WP Squad <support@squadmodules.com>
 * @since   2.0.0
 *
 * @property-read Utils\Elements\Divider     $divider     Divider Element utility.
 * @property-read Utils\Elements\Breadcrumbs $breadcrumbs Breadcrumbs Element utility.
 * @property-read Utils\Elements\MaskShape   $mask_shape  Mask Shape Element utility.
 */
abstract class Base
{
    use \DiviSquad\Base\DiviBuilder\Utils\CommonTrait;
    use \DiviSquad\Base\DiviBuilder\Utils\FieldsTrait;
    use \DiviSquad\Base\DiviBuilder\Utils\Fields\CompatibilityTrait;
    use \DiviSquad\Base\DiviBuilder\Utils\Fields\DefinitionTrait;
    use \DiviSquad\Base\DiviBuilder\Utils\Fields\ProcessorTrait;
    use \DiviSquad\Base\DiviBuilder\Utils\DeprecationsTrait;
    /**
     * The instance of Squad Module.
     *
     * @var Module
     */
    protected $element;
    /**
     * Container for dynamic properties.
     *
     * @var array
     */
    protected $container = array();
    /**
     * Utility class mapping.
     *
     * @var array
     */
    protected $utility_class_map = array('divider' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Divider::class, 'breadcrumbs' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Breadcrumbs::class, 'mask_shape' => \DiviSquad\Base\DiviBuilder\Utils\Elements\MaskShape::class);
    /**
     * Initialize the Utils class.
     *
     * @param Module $element The module instance.
     */
    public function __construct($element = null)
    {
    }
    /**
     * Lazy load a utility.
     *
     * @param string $name The utility name.
     * @return mixed The utility instance.
     */
    protected function lazy_load_utility($name)
    {
    }
    /**
     * Get the dynamic property value.
     *
     * @param string $name The property name.
     * @return mixed
     */
    public function __get($name)
    {
    }
    /**
     * Set the dynamic property value.
     *
     * @param string $name The property name.
     * @param mixed  $value The property value.
     */
    public function __set($name, $value)
    {
    }
    /**
     * Check if a dynamic property exists.
     *
     * @param string $name The property name.
     * @return bool
     */
    public function __isset($name)
    {
    }
    /**
     * Unset a dynamic property.
     *
     * @param string $name The property name.
     */
    public function __unset($name)
    {
    }
    /**
     * Get the module instance.
     *
     * @return Module
     */
    public function get_element()
    {
    }
    /**
     * Add a new utility to the class map.
     *
     * @param string $name The name of the utility.
     * @param string $utility_class The full class name of the utility.
     */
    protected function add_utility_to_class_map($name, $utility_class)
    {
    }
    /**
     * Remove a utility from the class map and container.
     *
     * @param string $name The name of the utility.
     */
    protected function remove_utility($name)
    {
    }
    /**
     * Check if a utility exists in the class map.
     *
     * @param string $name The name of the utility.
     * @return bool
     */
    public function has_utility($name)
    {
    }
    /**
     * Get all utility names.
     *
     * @return array
     */
    public function get_all_utility_names()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder;

/**
 * Builder Utils Class
 *
 * @package DiviSquad
 * @since   1.5.0
 */
final class Utils extends \DiviSquad\Base\DiviBuilder\Utils\Base
{
    /**
     * Connect with non-static public functions.
     *
     * @param Module $element The instance of ET Builder Element (Squad Module).
     *
     * @return Utils
     */
    public static function connect($element)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements;

/**
 * Breadcrumbs Utils Helper Class
 *
 * @package DiviSquad
 * @since   1.5.0
 */
class Breadcrumbs
{
    /**
     * Function that generates the HTML from breadcrumbs.
     *
     * @param string $_home_text   The home text.
     * @param string $_before_text The before text for the titles.
     * @param string $_delimiter   The separator.
     *
     * @return string
     */
    public function get_hansel_and_gretel($_home_text = 'Home', $_before_text = '', $_delimiter = '&#x39;')
    {
    }
}
/**
 * Custom Fields Utils Helper Class
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class CustomFields
{
    /**
     * Supported post types.
     *
     * @var array Supported post types.
     */
    protected static $post_types = array('post');
    /**
     * Supported field types with their corresponding processor classes.
     *
     * @var array<string, array<string, class-string>>
     */
    protected static $processors = array('collections' => array('custom_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors\WordPress::class, 'acf_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors\Advanced::class), 'definitions' => array('custom_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions\WordPress::class, 'acf_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions\Advanced::class));
    /**
     * Runtime data storage.
     *
     * @var array<string, array>
     */
    protected static $storage = array('instances' => array(), 'options' => array(), 'definitions' => array());
    /**
     * Field Manager Instance
     *
     * @var CustomFields\Managers\Fields
     */
    private static $fields_manager;
    /**
     * Initialize the CustomFields class.
     *
     * @return void
     * @throws \Exception If the manager class does not exist or is not instantiable.
     */
    public static function init()
    {
    }
    /**
     * Get all fields of a specific type.
     *
     * @param string $field_type The field type (acf, WordPress, etc.).
     * @param int    $post_id    The current post id.
     *
     * @return array<string, string>
     * @throws InvalidArgumentException If the field type is not supported.
     */
    public static function get_fields($field_type, $post_id)
    {
    }
    /**
     * Get module definitions for module usages
     *
     * @param string $field_type The field type (acf, WordPress, etc.).
     *
     * @return array<string, mixed>
     * @throws InvalidArgumentException If the field type is not supported.
     */
    public static function get_definitions($field_type)
    {
    }
    /**
     * Get the CustomFieldsManager instance.
     *
     * @return CustomFields\Managers\Fields
     * @throws InvalidArgumentException If the manager is not supported.
     * @throws \Exception If the manager class does not exist or is not instantiable.
     */
    public static function get_fields_manager()
    {
    }
    /**
     * Get supported post types.
     *
     * @return array|string[]
     */
    public static function get_supported_post_types()
    {
    }
    /**
     * Fetch fields of a specific type.
     *
     * @param string $field_type The field type (acf, WordPress, etc.).
     * @param string $storage    The storage type (collections, definitions.).
     *
     * @return CustomFields\Definition|CustomFields\Processor
     * @throws InvalidArgumentException If the field type is not supported.
     */
    public static function get($field_type, $storage = 'collections')
    {
    }
    /**
     * Get current field processor class name
     *
     * @param string $field_type The field type (acf_fields, custom_fields, etc.).
     * @param string $storage    The storage type (collections, definitions.).
     *
     * @return class-string
     */
    protected static function get_class($field_type, $storage = 'collections')
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields;

/**
 * Interface for defining custom field operations.
 *
 * This interface provides methods for retrieving various types of custom fields
 * and their associated properties.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
interface DefinitionInterface
{
    /**
     * Get common fields that are applicable across different post types.
     *
     * This method should return an array of custom fields that are commonly used
     * and applicable to multiple or all post types.
     *
     * @return array An array of common custom field definitions.
     */
    public function get_common_fields();
    /**
     * Get an array of empty fields.
     *
     * This method should return an array of custom fields that are considered "empty"
     * or have no default value.
     *
     * @return array An array of empty custom field definitions.
     */
    public function get_empty_fields();
    /**
     * Get default fields for a specific post type.
     *
     * This method should return an array of default custom fields for the given post type,
     * taking into account any provided options.
     *
     * @param string $post_type The post type for which to retrieve default fields.
     * @param array  $options   Additional options to customize the returned fields.
     *
     * @return array An array of default custom field definitions for the specified post type.
     */
    public function get_default_fields($post_type, $options);
    /**
     * Get associated fields.
     *
     * This method should return an array of custom fields that are associated
     * with the current context or implementation.
     *
     * @param array $fields_types Collect custom fields types.
     *
     * @return array An array of associated custom field definitions.
     */
    public function get_associated_fields($fields_types = array());
    /**
     * Get fields that are not eligible.
     *
     * This method should return an array of custom fields that are considered
     * not eligible for use in the current context or implementation.
     *
     * @return array An array of custom field definitions that are not eligible.
     */
    public function get_not_eligible_fields();
}
/**
 * Class Definition
 *
 * Provides a base implementation for definition classes in the DiviSquad plugin.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
abstract class Definition implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\DefinitionInterface
{
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions;

/**
 * Advanced Custom Field Definitions Class
 *
 * Implements advanced custom field definitions with support for complex field types
 * and sophisticated filtering options.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class Advanced extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definition
{
    /**
     * Get common fields that are applicable across different post types.
     *
     * This method returns an array of advanced custom fields that are commonly used
     * and applicable to multiple or all post types, including more complex field types.
     *
     * @return array An array of common custom field definitions.
     */
    public function get_common_fields()
    {
    }
    /**
     * Get an array of empty fields.
     *
     * This method returns an array of custom fields that are considered "empty"
     * or have no default value, potentially including complex field types.
     *
     * @return array An array of empty custom field definitions.
     */
    public function get_empty_fields()
    {
    }
    /**
     * Get default fields for a specific post type.
     *
     * This method returns an array of default custom fields for the given post type,
     * taking into account any provided options and potentially including advanced field types.
     *
     * @param string $post_type The post type for which to retrieve default fields.
     * @param array  $options   Additional options to customize the returned fields.
     *
     * @return array An array of default custom field definitions for the specified post type.
     */
    public function get_default_fields($post_type, $options)
    {
    }
    /**
     * Get associated fields.
     *
     * This method returns an array of custom fields that are associated
     * with the current context or implementation, potentially including
     * fields with advanced functionality or relationships.
     *
     * @param array $fields_types Collect custom fields types.
     *
     * @return array An array of associated custom field definitions.
     */
    public function get_associated_fields($fields_types = array())
    {
    }
    /**
     * Get fields that are not eligible.
     *
     * This method returns an array of custom fields that are considered
     * not eligible for use in the current context or implementation,
     * potentially based on advanced criteria or user roles.
     *
     * @return array An array of custom field definitions that are not eligible.
     */
    public function get_not_eligible_fields()
    {
    }
}
/**
 * WordPress Custom Field Definitions Class
 *
 * Implements WordPress-specific custom field definitions for use with Divi Builder.
 *
 * @package DiviSquad
 * @since 3.1.0
 */
class WordPress extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definition
{
    /**
     * Get common fields that are applicable across different post types.
     *
     * This method returns an array of custom fields that are commonly used
     * and applicable to multiple or all post types in WordPress.
     *
     * @return array An array of common custom field definitions.
     */
    public function get_common_fields()
    {
    }
    /**
     * Get an array of empty fields.
     *
     * This method returns an array of custom fields that are considered "empty"
     * or have no default value, specifically for WordPress integration.
     *
     * @return array An array of empty custom field definitions.
     */
    public function get_empty_fields()
    {
    }
    /**
     * Get default fields for a specific post type.
     *
     * This method returns an array of default custom fields for the given post type,
     * taking into account any provided options.
     *
     * @param string $post_type The post type for which to retrieve default fields.
     * @param array  $options   Additional options to customize the returned fields.
     *
     * @return array An array of default custom field definitions for the specified post type.
     */
    public function get_default_fields($post_type, $options)
    {
    }
    /**
     * Get associated fields.
     *
     * This method returns an array of custom fields that are associated
     * with the current context or implementation in WordPress.
     *
     * @param array $fields_types Collect custom fields types.
     *
     * @return array An array of associated custom field definitions.
     */
    public function get_associated_fields($fields_types = array())
    {
    }
    /**
     * Get fields when custom fields are not eligible.
     *
     * This method returns an array of custom fields that are considered
     * not eligible for use in the current WordPress context or implementation.
     *
     * @return array An array of custom field definitions when custom fields are not eligible.
     */
    public function get_not_eligible_fields()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields;

/**
 * Interface ManagerInterface
 *
 * Defines the contract for manager classes in the DiviSquad plugin.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
interface ManagerInterface
{
    /**
     * Initialize the manager.
     *
     * This method should set up any necessary hooks or initial configurations.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function init();
    /**
     * Get data from the manager.
     *
     * This method should retrieve the main data that the manager is responsible for.
     *
     * @since 3.1.1
     *
     * @param array $args Optional. Arguments to modify the query.
     * @return array The retrieved data.
     */
    public function get_data($args = array());
    /**
     * Clear the cache for this manager.
     *
     * This method should clear any cached data that the manager maintains.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function clear_cache();
}
/**
 * Class Manager
 *
 * Provides a base implementation for manager classes in the DiviSquad plugin.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
abstract class Manager implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\ManagerInterface
{
    /**
     * Cache group for this manager.
     *
     * @var string
     */
    protected $cache_group;
    /**
     * Cache key prefix for this manager.
     *
     * @var string
     */
    protected $cache_key_prefix;
    /**
     * Constructor.
     *
     * @since 3.1.1
     *
     * @param string $cache_group The cache group for this manager.
     * @param string $cache_key_prefix The cache key prefix for this manager.
     */
    public function __construct($cache_group, $cache_key_prefix)
    {
    }
    /**
     * Get data from the cache or generate it if not cached.
     *
     * @since 3.1.1
     *
     * @param string   $key        The cache key.
     * @param callable $callback   The function to generate the data if not cached.
     * @param int      $expiration Optional. The expiration time of the cached data in seconds. Default 3600.
     * @return mixed The cached or generated data.
     */
    protected function get_cached_data($key, $callback, $args = array(), $expiration = 3600)
    {
    }
    /**
     * Clear the cache for this manager.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function clear_cache()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Managers;

/**
 * Fields Class
 *
 * Manages custom fields across different post types in WordPress.
 * This class handles the creation and maintenance of a summary table
 * for custom fields, provides methods for updating and retrieving
 * custom field information, and integrates with a separate upgrader
 * for database structure management.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
class Fields extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Manager
{
    /**
     * The name of the summary table in the database.
     *
     * @var string
     */
    private $table_name;
    /**
     * Array of post types to track custom fields for.
     *
     * @var array
     */
    private $tracked_post_types;
    /**
     * Instance of the CustomFieldsUpgrader class.
     *
     * @var Upgraders
     */
    private $upgrader;
    /**
     * Version of the current table structure.
     *
     * @var string
     */
    private $table_version = '1.0';
    /**
     * Constructor.
     *
     * Initializes the Fields class with specified post types to track.
     *
     * @since 3.1.1
     *
     * @param array $post_types Array of post types to track custom fields for.
     */
    public function __construct($post_types = array('post'))
    {
    }
    /**
     * Initialize the manager
     *
     * Sets up action hooks for various WordPress events related to custom fields.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function init()
    {
    }
    /**
     * Get data from the manager.
     *
     * @since 3.1.1
     *
     * @param array $args Optional. Arguments to modify the query.
     * @return array The retrieved data.
     */
    public function get_data($args = array())
    {
    }
    /**
     * Clear the custom fields cache.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function clear_cache()
    {
    }
    /**
     * Run database upgrades using the Upgrader.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function run_upgrades()
    {
    }
    /**
     * Check if the table needs to be created or updated.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function check_table_version()
    {
    }
    /**
     * Create the summary table in the database.
     *
     * This method creates the custom fields summary table if it doesn't exist.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function create_summary_table()
    {
    }
    /**
     * Populate the summary table with initial data.
     *
     * This method populates the summary table with existing custom field data.
     * It uses caching to prevent unnecessary database queries on each page load.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function populate_summary_table()
    {
    }
    /**
     * Update the summary table when postmeta is added or updated.
     *
     * This method checks for the existence of an underscore version of the meta key
     * and updates the summary table accordingly. It uses caching to reduce database queries.
     *
     * @since 3.1.1
     *
     * @param int    $meta_id    ID of the metadata field.
     * @param int    $object_id  ID of the object metadata is for.
     * @param string $meta_key   Metadata key.
     * @return void
     */
    public function update_summary($meta_id, $object_id, $meta_key)
    {
    }
    /**
     * Update the summary table when postmeta is deleted.
     *
     * This method removes the corresponding entry from the summary table
     * when a post meta is deleted.
     *
     * @since 3.1.1
     *
     * @param string[] $meta_ids  An array of metadata entry IDs to delete.
     * @param int      $object_id ID of the object metadata is for.
     * @param string   $meta_key  Metadata key.
     * @return void
     */
    public function delete_from_summary($meta_ids, $object_id, $meta_key)
    {
    }
    /**
     * Get custom field keys, optionally filtered by post type.
     *
     * This method retrieves custom field keys from the database, filtered by post type
     * and limited to a specified number of results. It uses caching to improve performance.
     *
     * @since 3.1.1
     *
     * @param string $post_type Optional. Post type to filter by. Default 'post'.
     * @param int    $limit     Optional. Number of results to return. Default 30.
     * @return array            Array of custom field keys.
     */
    public function get_custom_field_keys($post_type = 'post', $limit = 30)
    {
    }
}
/**
 * Upgrader Class
 *
 * Manages database upgrades for the custom fields summary table.
 * This class handles version tracking and applies necessary database
 * structure changes when upgrading from older versions.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
class Upgraders
{
    /**
     * The name of the summary table in the database.
     *
     * @since 3.1.1
     * @var string
     */
    private $summary_table_name;
    /**
     * The option name used to store the current version in the database.
     *
     * @since 3.1.1
     * @var string
     */
    private $version_option_name = 'custom_fields_summary_version';
    /**
     * The current version of the database structure.
     *
     * @since 3.1.1
     * @var string
     */
    private $current_version = '1.0';
    /**
     * Constructor.
     *
     * @since 3.1.1
     *
     * @param string $summary_table_name The name of the summary table in the database.
     */
    public function __construct($summary_table_name)
    {
    }
    /**
     * Run necessary database upgrades.
     *
     * Checks the installed version against the current version and
     * performs any necessary upgrade procedures.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function run_upgrades()
    {
    }
    /**
     * Perform specific upgrade procedures.
     *
     * This method contains the logic for upgrading the database
     * structure from one version to another.
     *
     * @since 3.1.1
     *
     * @param string $from_version The version to upgrade from.
     * @return void
     */
    private function perform_upgrades($from_version)
    {
    }
    /**
     * @return string
     */
    public function get_summary_table_name()
    {
    }
    /**
     * Get the current version of the database structure.
     *
     * @since 3.1.1
     *
     * @return string The current version.
     */
    public function get_current_version()
    {
    }
    /**
     * Set the current version of the database structure.
     *
     * This method is primarily used for testing purposes or manual version management.
     *
     * @since 3.1.1
     *
     * @param string $version The version to set.
     * @return void
     */
    public function set_current_version($version)
    {
    }
    /**
     * Check if an upgrade is needed.
     *
     * Compares the installed version with the current version to determine
     * if an upgrade is necessary.
     *
     * @since 3.1.1
     *
     * @return bool True if an upgrade is needed, false otherwise.
     */
    public function is_upgrade_needed()
    {
    }
    /**
     * Get the installed version of the database structure.
     *
     * @since 3.1.1
     *
     * @return string The installed version.
     */
    public function get_installed_version()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields;

/**
 * Custom Field interface
 *
 * @package DiviSquad
 * @since   3.1.0
 */
interface ProcessorInterface
{
    /**
     * Inform that the processor is eligible or not.
     *
     * @return bool
     */
    public function is_eligible();
    /**
     * Collect custom fields and generate a formatted array.
     *
     * @return array An array where keys are original field names and values are formatted field names.
     */
    public function get_formatted_fields();
    /**
     * Get all custom fields for a specific post.
     *
     * @param int $post_id The ID of the post.
     * @return array An array of custom fields, where keys are field names and values are field values.
     */
    public function get_fields($post_id);
    /**
     * Check if a post has a specific custom field.
     *
     * @param int    $post_id The ID of the post to check.
     * @param string $field_key The key of the custom field to check for.
     * @return bool True if the custom field exists, false otherwise.
     */
    public function has_field($post_id, $field_key);
    /**
     * Get a specific custom field by post ID and field key.
     *
     * @param int    $post_id The ID of the post to retrieve the custom field for.
     * @param string $field_key The key of the custom field to retrieve.
     * @param mixed  $default_value The default value to return if the field is not found.
     * @return mixed The value of the custom field, or the default value if not found.
     */
    public function get_field_value($post_id, $field_key, $default_value = null);
    /**
     * Get the value of a selected post meta key for a specific post, with additional options.
     *
     * @param int    $post_id The ID of the post.
     * @param string $meta_key The meta key to retrieve.
     * @param array  $options Additional options for retrieving the meta value.
     * @return mixed The meta value if successful, default value if not found.
     */
    public function get_field_value_advanced($post_id, $meta_key, array $options = array());
}
/**
 * Custom Fields Base Class
 *
 * @package DiviSquad
 * @since   3.1.0
 */
abstract class Processor implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\ProcessorInterface
{
    /**
     * Supported post types.
     *
     * @var array
     */
    protected $post_types = array();
    /**
     * Blacklisted keys
     *
     * @var array Blacklisted keys that should be excluded from custom fields.
     */
    protected $blacklisted_keys = array();
    /**
     * Custom fields suffixes
     *
     * @var array Suffixes that should be excluded from custom fields.
     */
    protected $excluded_suffixes = array();
    /**
     * Custom fields prefixes
     *
     * @var array Prefixes that should be excluded from custom fields.
     */
    protected $excluded_prefixes = array();
    /**
     * Available custom fields.
     *
     * @var array List of available custom fields.
     */
    protected $fields = array();
    /**
     * Available custom fields with its value.
     *
     * @var array List of available custom fields.
     */
    protected $custom_fields = array();
    /**
     * Check if a field should be included based on various criteria.
     *
     * @param string $field_key The field key to check.
     * @return bool Whether the field should be included.
     */
    protected abstract function should_include_field($field_key);
    /**
     * Get the supported post types for the processor.
     *
     * @return array|string[]
     */
    protected abstract function get_supported_post_types();
    /**
     * Format a field name by replacing underscores and hyphens with spaces.
     *
     * @param string $field_key The field key to format.
     * @return string The formatted field name.
     */
    protected function format_field_name($field_key)
    {
    }
    /**
     * Get the value of a selected post meta key for a specific post, with additional options.
     *
     * @param int    $post_id The ID of the post.
     * @param string $meta_key The meta key to retrieve.
     * @param array  $options Additional options for retrieving the meta value.
     * @return mixed The meta value if successful, default value if not found.
     */
    public function get_field_value_advanced($post_id, $meta_key, array $options = array())
    {
    }
    /**
     * Collect custom fields types and generate a formatted array.
     *
     * @return array
     */
    public function get_formatted_fields_types()
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors;

/**
 * Custom Fields (Advanced Custom Field) element Class
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class Advanced extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processor
{
    /**
     * Supported post types.
     *
     * @var array<string>
     */
    protected $post_types = array('post');
    /**
     * Blacklisted keys that should be excluded from custom fields.
     *
     * @var array<string>
     */
    protected $blacklisted_keys = array();
    /**
     * Suffixes that should be excluded from custom fields.
     *
     * @var array<string>
     */
    protected $excluded_suffixes = array();
    /**
     * Prefixes that should be excluded from custom fields.
     *
     * @var array<string>
     */
    protected $excluded_prefixes = array();
    /**
     * Supported fields types from advanced custom fields.
     *
     * @var array<string>
     */
    protected $supported_field_types = array('text', 'number', 'textarea', 'range', 'email', 'url', 'image', 'select', 'date_picker', 'wysiwyg');
    /**
     * Available custom fields group
     *
     * @var array
     */
    protected $field_groups = array();
    /**
     * Available custom fields
     *
     * @var array
     */
    protected $fields_data = array();
    /**
     * Available custom field values
     *
     * @var array
     */
    protected $field_values = array();
    /**
     * Inform that the processor is eligible or not.
     *
     * @return bool
     */
    public function is_eligible()
    {
    }
    /**
     * Collect available custom field values from the postmeta table for specific post.
     *
     * @param int $post_id The ID of the post.
     *
     * @return array An array of unique custom field values.
     */
    public function get_available_field_values($post_id)
    {
    }
    /**
     * Get post meta values for given keys.
     *
     * @param int   $post_id        The ID of the post.
     * @param array $acf_field_keys Array of ACF field keys to retrieve.
     * @param int   $limit          Maximum number of results to return.
     *
     * @return array An array of post meta values.
     */
    private function get_post_meta_values($post_id, $acf_field_keys, $limit)
    {
    }
    /**
     * Collect custom fields and generate a formatted array.
     *
     * @return array
     */
    public function get_formatted_fields()
    {
    }
    /**
     * Collect custom fields types and generate a formatted array.
     *
     * @return array
     */
    public function get_formatted_fields_types()
    {
    }
    /**
     * Get all custom fields for a specific post.
     *
     * @param int $post_id The ID of the post.
     * @return array An array of custom fields, where keys are field names and values are field values.
     */
    public function get_fields($post_id)
    {
    }
    /**
     * Check if a post has a specific custom field.
     *
     * @param int    $post_id The ID of the post to check.
     * @param string $field_key The key of the custom field to check for.
     * @return bool True if the custom field exists, false otherwise.
     */
    public function has_field($post_id, $field_key)
    {
    }
    /**
     * Get a specific custom field by post ID and field key.
     *
     * @param int    $post_id The ID of the post to retrieve the custom field for.
     * @param string $field_key The key of the custom field to retrieve.
     * @param mixed  $default_value The default value to return if the field is not found.
     * @return mixed The value of the custom field, or the default value if not found.
     */
    public function get_field_value($post_id, $field_key, $default_value = null)
    {
    }
    /**
     * Get the supported post types for the processor.
     *
     * @return array|string[]
     */
    protected function get_supported_post_types()
    {
    }
    /**
     * Get supported field types.
     *
     * @return array|string[]
     */
    protected function get_supported_field_types()
    {
    }
    /**
     * Check if a field should be included based on various criteria.
     *
     * @param string $field_key The field key to check.
     * @return bool Whether the field should be included.
     */
    protected function should_include_field($field_key)
    {
    }
}
/**
 * Custom Fields (WordPress) element Class
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class WordPress extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processor
{
    /**
     * Blacklisted keys
     *
     * @var array Blacklisted keys that should be excluded from custom fields.
     */
    protected $blacklisted_keys = array('_edit_lock', '_edit_last', '_thumbnail_id', '_wp_page_template', '_wp_old_slug', '_wp_trash_meta_time', '_wp_trash_meta_status');
    /**
     * Suffixes
     *
     * @var array Suffixes that should be excluded from custom fields.
     */
    protected $excluded_suffixes = array('active', 'enabled', 'disabled', 'hidden', 'flag');
    /**
     * Prefixes
     *
     * @var array Prefixes that should be excluded from custom fields.
     */
    protected $excluded_prefixes = array('wp' => array('_wp_', 'wp_', '_oembed_'), 'divi' => array('et_'), 'yoast' => array('_yoast_', 'yoast_', '_wpseo_'), 'others' => array('_aioseop_', '_elementor_', 'rank_math_', '_acf_', '_wc_', '_transient_', '_site_transient_', '_menu_item_'));
    /**
     * Available custom formated fields
     *
     * @var array
     */
    protected $formatted_fields = array();
    /**
     * Available custom field values
     *
     * @var array
     */
    protected $field_values = array();
    /**
     * Inform that the processor is eligible or not.
     *
     * @return bool
     */
    public function is_eligible()
    {
    }
    /**
     * Collect custom fields and generate a formatted array.
     *
     * @return array An array where keys are original field names and values are formatted field names.
     * @throws \Exception If the post type is not supported.
     */
    public function get_formatted_fields()
    {
    }
    /**
     * Get all custom fields for a specific post.
     *
     * @param int $post_id The ID of the post.
     * @return array An array of custom fields, where keys are field names and values are field values.
     * @throws \Exception If the post type is not supported.
     */
    public function get_fields($post_id)
    {
    }
    /**
     * Check if a post has a specific custom field.
     *
     * @param int    $post_id The ID of the post to check.
     * @param string $field_key The key of the custom field to check for.
     * @return bool True if the custom field exists, false otherwise.
     */
    public function has_field($post_id, $field_key)
    {
    }
    /**
     * Get a specific custom field by post ID and field key.
     *
     * @param int    $post_id The ID of the post to retrieve the custom field for.
     * @param string $field_key The key of the custom field to retrieve.
     * @param mixed  $default_value The default value to return if the field is not found.
     * @return mixed The value of the custom field, or the default value if not found.
     */
    public function get_field_value($post_id, $field_key, $default_value = null)
    {
    }
    /**
     * Get the supported post types for the processor.
     *
     * @return array|string[]
     */
    protected function get_supported_post_types()
    {
    }
    /**
     * Check if a field should be included based on various criteria.
     *
     * @param string $field_key The field key to check.
     * @return bool Whether the field should be included.
     */
    protected function should_include_field($field_key)
    {
    }
    /**
     * Collect available custom fields from the postmeta table.
     *
     * @return array An array of unique custom field keys.
     * @throws \Exception If the post type is not supported.
     */
    protected function get_available_fields()
    {
    }
    /**
     * Collect available custom field values from the postmeta table for specific post.
     *
     * @param int $post_id The ID of the post.
     *
     * @return array An array of unique custom field values.
     * @throws \Exception If the post type is not supported.
     */
    protected function get_available_field_values($post_id)
    {
    }
    /**
     * Get post meta values for given keys.
     *
     * @param int   $post_id   The ID of the post.
     * @param array $meta_keys Array of meta keys to retrieve.
     * @param int   $limit     Maximum number of results to return.
     *
     * @return array An array of post meta values.
     */
    private function get_post_meta_values($post_id, $meta_keys, $limit)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements;

/**
 * Divider Utils Helper Class
 *
 * @package DiviSquad
 * @since   1.5.0
 */
class Divider
{
    /**
     * The instance of ET Builder Element.
     *
     * @var object
     */
    public $module;
    /**
     * Constructor.
     *
     * @param object $module The instance of ET Builder Element.
     */
    public function __construct($module)
    {
    }
    /**
     * Get show options for divider.
     *
     * @return array
     */
    public function get_show_options()
    {
    }
    /**
     * Get the default data.
     *
     * @param string $field The instance of ET Builder Element.
     *
     * @return string
     */
    public function get_default($field)
    {
    }
    /**
     * Get the default data.
     *
     * @return array
     */
    public function get_defaults()
    {
    }
    /**
     * Get the default data for initiate.
     *
     * @return void The shape
     */
    public function initiate_element()
    {
    }
    /**
     * Get the field for divider module
     *
     * @param array $options The options for divider module fields.
     *
     * @return array the field
     */
    public function get_fields($options = array())
    {
    }
}
/**
 * Main class for handling various form types.
 *
 * @package DiviSquad
 * @since 1.5.0
 */
class Forms
{
    const DEFAULT_FORM_ID = 'cfcd208495d565ef66e7dff9f98764da';
    /**
     * Supported form types with their corresponding processor classes.
     *
     * @var array<string, string>
     */
    private static $supported_form_types = array('cf7' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\ContactForm7::class, 'wpforms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\WPForms::class, 'fluent_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\FluentForms::class, 'ninja_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\NinjaForms::class, 'gravity_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\GravityForms::class, 'forminator' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\Forminator::class, 'formidable' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\Formidable::class);
    /**
     * Form collections.
     *
     * @var array<string, array<string, string>>
     */
    private static $form_collections = array();
    /**
     * Form processors.
     *
     * @var array<string, Forms\FormInterface>
     */
    private static $form_processors = array();
    /**
     * Get allowed fields for the module.
     *
     * @return array List of allowed field types
     */
    public static function get_allowed_fields()
    {
    }
    /**
     * Get custom spacing prefixes for the module.
     *
     * @return array Custom spacing prefixes
     */
    public static function get_custom_spacing_prefixes()
    {
    }
    /**
     * Get all forms of a specific type.
     *
     * @param string $form_type The form type (cf7, fluent_forms, etc.).
     * @param string $collection The collection type (title or id).
     *
     * @return array<string, string>
     * @throws \InvalidArgumentException If the form type is not supported.
     */
    public static function get_all_forms($form_type, $collection = 'title')
    {
    }
    /**
     * Fetch forms of a specific type.
     *
     * @param string $form_type The form type (cf7, fluent_forms, etc.).
     * @param string $collection The collection type (title or id).
     *
     * @return array<string, string>
     */
    private static function fetch_forms($form_type, $collection)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\Forms;

/**
 * Form Interface
 *
 * Interface for form processors.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
interface FormInterface
{
    /**
     * Get forms of a specific type.
     *
     * @param string $collection Either 'id' or 'title'.
     * @return array Associative array of form IDs or titles
     */
    public function get_forms($collection);
}
/**
 * Abstract class for form processing.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
abstract class Form implements \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\FormInterface
{
    /**
     * Get the ID of a form.
     *
     * @param mixed $form Form object.
     * @return mixed Form ID
     */
    protected abstract function get_form_id($form);
    /**
     * Get the title of a form.
     *
     * @param mixed $form Form object.
     * @return string Form title
     */
    protected abstract function get_form_title($form);
    /**
     * Process form data into a consistent format.
     *
     * @param array  $forms Array of form objects.
     * @param string $collection Either 'id' or 'title'.
     * @return array Processed form data
     */
    protected function process_form_data($forms, $collection)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors;

/**
 * Class for handling Contact Form 7 forms.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class ContactForm7 extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Contact Form 7 forms.
     *
     * @param string $collection Either 'id' or 'title'.
     * @return array Associative array of CF7 form IDs or titles
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a CF7 form.
     *
     * @param \WP_Post $form CF7 form object.
     * @return int Form ID
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a CF7 form.
     *
     * @param \WP_Post $form CF7 form object.
     * @return string Form title
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * Fluent Forms Processor
 *
 * Handles the retrieval and processing of Fluent Forms.
 *
 * @package DiviSquad\Base\DiviBuilder\Utils\Elements
 * @since   3.1.0
 */
class FluentForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Fluent Forms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of Fluent Forms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a Fluent Form.
     *
     * @param object $form The form object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a Fluent Form.
     *
     * @param object $form The form object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * Formidable Forms Processor
 *
 * Handles the retrieval and processing of Formidable Forms.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class Formidable extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Formidable Forms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of Formidable Forms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a Formidable Form.
     *
     * @param object $form The form object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a Formidable Form.
     *
     * @param object $form The form object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * Forminator Forms Processor
 *
 * Handles the retrieval and processing of Forminator Forms.
 *
 * @package DiviSquad
 * @since 3.1.0
 */
class Forminator extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Forminator Forms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of Forminator Forms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a Forminator Form.
     *
     * @param object $form The form object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a Forminator Form.
     *
     * @param object $form The form object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * Gravity Forms Processor
 *
 * Handles the retrieval and processing of Gravity Forms.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class GravityForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Gravity Forms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of Gravity Forms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a Gravity Form.
     *
     * @param object $form The form object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a Gravity Form.
     *
     * @param object $form The form object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * Ninja Forms Processor
 *
 * Handles the retrieval and processing of Ninja Forms.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class NinjaForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get Ninja Forms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of Ninja Forms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a Ninja Form.
     *
     * @param object $form The form object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a Ninja Form.
     *
     * @param object $form The form object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
/**
 * WPForms Processor
 *
 * Handles the retrieval and processing of WPForms.
 *
 * @package DiviSquad
 * @since   3.1.0
 */
class WPForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
{
    /**
     * Get WPForms.
     *
     * @param string $collection The type of data to collect ('id' or 'title').
     * @return array An array of WPForms data.
     */
    public function get_forms($collection)
    {
    }
    /**
     * Get the ID of a WPForm.
     *
     * @param \WP_Post $form The form post object.
     * @return int The form ID.
     */
    protected function get_form_id($form)
    {
    }
    /**
     * Get the title of a WPForm.
     *
     * @param \WP_Post $form The form post object.
     * @return string The form title.
     */
    protected function get_form_title($form)
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements;

/**
 * Mask Shape Element class
 *
 * @package DiviSquad
 * @since   1.5.0
 */
class MaskShape
{
    /**
     * Get the Mask Shape according the shape type and its secondary_shape type
     *
     * @param string $type              The shape type.
     * @param string $secondary_shape   The shape secondary_shape type.
     *
     * @return string The shape
     */
    public function get_shape($type = 'shape-01', $secondary_shape = 'off')
    {
    }
}
namespace DiviSquad\Base;

/**
 * Extension class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
abstract class Extension
{
    /** The instance of memory.
     *
     * @var Memory
     */
    protected $memory;
    /**
     * The list of inactive extensions.
     *
     * @var array
     */
    protected $inactivates;
    /**
     * The name list of extensions.
     *
     * @var array
     */
    protected $name_lists;
    /**
     * The constructor class.
     */
    public function __construct()
    {
    }
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected abstract function get_name();
    /**
     * Load the extension.
     *
     * @return void
     */
    protected abstract function load();
}
namespace DiviSquad\Base\Factories\FactoryBase;

/**
 * Factory Interface
 *
 * @package DiviSquad
 * @since   3.0.0
 */
interface FactoryInterface
{
    /**
     * Add a new item to the list of items.
     *
     * @param string $class_name The class name of the item to add.
     *
     * @return void
     */
    public function add($class_name);
}
/**
 * Interface FactoryInterface
 *
 * @package DiviSquad
 * @since   3.0.0
 */
abstract class Factory implements \DiviSquad\Base\Factories\FactoryBase\FactoryInterface
{
    /**
     * Constructor.
     */
    protected function __construct()
    {
    }
    /**
     * Init hooks for the factory.
     *
     * @return void
     */
    protected abstract function init_hooks();
    /**
     * Add a new item to the list of items.
     *
     * @param string $class_name The class name of the item to add to the list.
     *
     * @return void
     */
    public abstract function add($class_name);
}
namespace DiviSquad\Utils;

/**
 * Singleton trait.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
trait Singleton
{
    /**
     * The instance of the current class.
     *
     * @var self|null
     */
    private static $instance = null;
    /**
     * Get the instance of the current class.
     *
     * @return self
     */
    public static function get_instance()
    {
    }
    /**
     * Create an instance of the current class.
     *
     * @return self
     */
    private static function create_instance()
    {
    }
    /**
     * Initialize the instance.
     */
    protected function initialize()
    {
    }
    /**
     * Serializing instances of this class is forbidden.
     *
     * @access public
     * @since  1.0.0
     */
    public function __wakeup()
    {
    }
    /**
     * Cloning is forbidden.
     *
     * @access private
     * @since  1.0.0
     */
    private function __clone()
    {
    }
}
namespace DiviSquad\Base\Factories;

/**
 * Class AdminMenu
 *
 * @package DiviSquad
 * @since   2.0.0
 */
final class AdminMenu extends \DiviSquad\Base\Factories\FactoryBase\Factory
{
    use \DiviSquad\Utils\Singleton;
    /**
     * Store all registry
     *
     * @var AdminMenu\MenuInterface[]
     */
    private static $registries = array();
    /**
     * Initialize hooks.
     *
     * @return void
     */
    protected function init_hooks()
    {
    }
    /**
     * Add a new menu to the list of menus.
     *
     * @param string $class_name The class name of the menu to add to the list. The class must implement the MenuInterface.
     *
     * @see AdminMenu\MenuInterface interface.
     * @return void
     */
    public function add($class_name)
    {
    }
    /**
     * Enqueue scripts and styles files in the WordPress admin area.
     *
     * @return void
     */
    public function create_admin_menus()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @param string $classes Space-separated list of CSS classes.
     *
     * @return string
     * @since 1.0.4
     */
    public function add_body_classes($classes)
    {
    }
    /**
     * Registered all menus.
     *
     * @return array
     */
    public function get_registered_submenus()
    {
    }
}
/**
 * Class AdminNotice
 *
 * @package DiviSquad
 * @since   2.0.0
 */
final class AdminNotice extends \DiviSquad\Base\Factories\FactoryBase\Factory
{
    use \DiviSquad\Utils\Singleton;
    /**
     * Store all registry
     *
     * @var AdminNotice\NoticeInterface[]
     */
    private static $registries = array();
    /**
     * Initialize hooks.
     *
     * @return void
     */
    protected function init_hooks()
    {
    }
    /**
     * Add a new notice to the list of notices.
     *
     * @param string $class_name The class name of the notice to add to the list. The class must implement the NoticeInterface.
     *
     * @see AdminNotice\NoticeInterface interface.
     * @return void
     */
    public function add($class_name)
    {
    }
    /**
     * Prints admin screen notices in the WordPress admin area.
     *
     * @return void
     */
    public function add_admin_notices()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @since 1.0.4
     *
     * @param string $classes Space-separated list of CSS classes.
     *
     * @return string
     */
    public function add_body_classes($classes)
    {
    }
    /**
     * Registered all notices.
     *
     * @return array
     */
    public function get_notices()
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_localize_script_data($exists_data)
    {
    }
}
namespace DiviSquad\Base\Factories\AdminNotice;

/**
 * Notice Interface.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
interface NoticeInterface
{
    /**
     * Say that current notice can view or not.
     *
     * @return bool
     */
    public function can_render_it();
    /**
     * Add the CSS classes for the body tag in the admin.
     *
     * @return string
     */
    public function get_body_classes();
    /**
     * Get the template arguments
     *
     * @return array
     */
    public function get_template_args();
    /**
     * Get the template path.
     *
     * @return string
     */
    public function get_template();
}
/**
 * Abstract class representing the Notice.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
abstract class Notice implements \DiviSquad\Base\Factories\AdminNotice\NoticeInterface
{
    /**
     * The template arguments
     *
     * @var array
     */
    protected $template_args = array();
    /**
     * Get the notice id.
     *
     * @var string
     */
    protected $notice_id = '';
    /**
     * Get the template arguments
     *
     * @return array
     */
    public abstract function get_template_args();
    /**
     * Get the template path.
     *
     * @return string
     */
    public function get_template()
    {
    }
    /**
     * Get the template root.
     *
     * @return string
     */
    public function get_template_root()
    {
    }
    /**
     * Get the notice id.
     *
     * @return string
     */
    public function get_notice_id()
    {
    }
}
namespace DiviSquad\Base\Factories;

/**
 * Class Plugin Branding
 *
 * @package DiviSquad
 * @since   3.0.0
 */
final class BrandAsset extends \DiviSquad\Base\Factories\FactoryBase\Factory
{
    use \DiviSquad\Utils\Singleton;
    /**
     * Store all branding assets.
     *
     * @var array<string, BrandAsset\BrandAssetInterface[]>
     */
    private static $registries = array('plugin_action_links' => array(), 'plugin_row_actions' => array(), 'admin_footer_text' => array());
    /**
     * Initialize the hooks.
     *
     * @return void
     */
    protected function init_hooks()
    {
    }
    /**
     * Add a new item to the list of items.
     *
     * @param string $class_name The class name of the banding asset. Must implement the BrandingAssetInterface.
     *
     * @see BrandAsset\AssetInterface interface.
     * @return void
     */
    public function add($class_name)
    {
    }
    /**
     * Add some link to plugin action links.
     *
     * @param string[] $actions An array of plugin action links. By default, this can include 'activate', 'deactivate', and 'delete'.
     * @param string   $plugin_file Path to the plugin file relative to the plugins' directory.
     *
     * @return array All action links for plugin.
     */
    public function add_plugin_actions($actions, $plugin_file)
    {
    }
    /**
     * Add some link to plugin row actions.
     *
     * @param string[] $actions An array of plugin row actions. By default, this can include 'activate', 'deactivate', and 'delete'.
     * @param string   $plugin_file Path to the plugin file relative to the plugins' directory.
     *
     * @return array All row actions for plugin.
     */
    public function add_plugin_row_actions($actions, $plugin_file)
    {
    }
    /**
     * Add some text to plugin footer text.
     *
     * @param string $text The text to be displayed in the footer.
     *
     * @return string The text to be displayed in the footer.
     */
    public function add_plugin_footer_text($text)
    {
    }
    /**
     * Add some text to plugin update footer text.
     *
     * @param string $content The content that will be printed.
     *
     * @return string The content that will be printed.
     */
    public function update_plugin_footer_text($content)
    {
    }
}
namespace DiviSquad\Base\Factories\BrandAsset;

/**
 * Branding Asset Interface.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
interface BrandAssetInterface
{
    /**
     * The branding asset type.
     *
     * @return string
     */
    public function get_type();
    /**
     * The branding asset position.
     *
     * @return string
     */
    public function get_position();
}
/**
 * Abstract class representing the Branding.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
abstract class BrandAsset implements \DiviSquad\Base\Factories\BrandAsset\BrandAssetInterface
{
    /**
     * The plugin base.
     *
     * @return string
     */
    public function get_plugin_base()
    {
    }
    /**
     * The branding asset is allowed in network.
     *
     * @return bool
     */
    public function is_allow_network()
    {
    }
    /**
     * The plugin action links.
     *
     * @return array
     */
    public function get_action_links()
    {
    }
    /**
     * The plugin row actions.
     *
     * @return array
     */
    public function get_row_actions()
    {
    }
    /**
     * The plugin footer text.
     *
     * @return string
     */
    public function get_plugin_footer_text()
    {
    }
    /**
     * The plugin update footer text.
     *
     * @return string
     */
    public function get_update_footer_text()
    {
    }
}
namespace DiviSquad\Base\Factories;

/**
 * Factory for creating migration instances.
 *
 * @package DiviSquad\Settings
 * @since   3.1.2
 */
class Migration
{
    /**
     * Creates a migration instance based on the migration name.
     *
     * @param string $class_name The name of the migration class to instantiate.
     * @return AbstractMigration The migration instance.
     * @throws InvalidArgumentException If the class does not exist or is not an instance of AbstractMigration.
     */
    public function create($class_name)
    {
    }
}
namespace DiviSquad\Base\Factories\ModuleMigration;

/**
 * Migration Interface
 *
 * @package DiviSquad\Base\Factories\ModuleMigration
 * @since   3.0.0
 */
interface MigrationInterface
{
    /**
     * Initialize migration.
     */
    public static function init();
    /**
     * Get all fields to need to be migrated.
     *
     * Contains an array with:
     * - key as new field
     * - value consists affected fields as old field and module location
     *
     * @return array New and old fields need to be migrated.
     * @since 3.0.0
     */
    public function get_fields();
    /**
     * Get all modules affected.
     *
     * @return array
     * @since 3.0.0
     */
    public function get_modules();
    /**
     * Migrate from old value into new value.
     *
     * @param string $field_name        The field name.
     * @param mixed  $current_value     The current value.
     * @param string $module_slug       The module slug.
     * @param mixed  $saved_value       The saved value.
     * @param string $saved_field_name  The saved field name.
     * @param array  $attrs             The attributes.
     * @param mixed  $content           The content.
     * @param string $module_address    The module address.
     *
     * @return mixed
     * @since 3.0.0
     */
    public function migrate($field_name, $current_value, $module_slug, $saved_value, $saved_field_name, $attrs, $content, $module_address);
    /**
     * Get all modules to need to be migrated.
     *
     * @return array
     */
    public function get_content_migration_modules();
    /**
     * This could have been written as abstract, but it's not as common to be expected to be implemented by every migration
     *
     * @param string $module_slug Internal system name for the module type.
     * @param array  $attrs       Shortcode attributes.
     * @param mixed  $content     Text/HTML content within the current module.
     *
     * @return mixed
     */
    public function migrate_content($module_slug, $attrs, $content);
}
namespace DiviSquad\Base\Factories;

/**
 * Abstract class representing the Plugin Asset.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
final class PluginAsset extends \DiviSquad\Base\Factories\FactoryBase\Factory
{
    use \DiviSquad\Utils\Singleton;
    /**
     * The list of registries.
     *
     * @var PluginAsset\PluginAssetInterface[]
     */
    private static $registries = array();
    /**
     * Init hooks for the factory.
     *
     * @return void
     */
    protected function init_hooks()
    {
    }
    /**
     * Add a new item to the list of items.
     *
     * @param string $class_name The class name of the item to add to the list.
     *
     * @return void
     */
    public function add($class_name)
    {
    }
    /**
     * Enqueue scripts.
     *
     * @return void
     */
    public function add_enqueue_scripts()
    {
    }
    /**
     * Enqueue admin scripts.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     */
    public function add_admin_enqueue_scripts($hook_suffix)
    {
    }
    /**
     * Add localize script data.
     *
     * @param array $data The data to localize.
     *
     * @return array
     */
    public function add_localize_backend_extra_data($data)
    {
    }
    /**
     * Add localize script data.
     *
     * @param array $data The data to localize.
     *
     * @return array
     */
    public function add_localize_backend_extra($data)
    {
    }
}
namespace DiviSquad\Base\Factories\PluginAsset;

/**
 * The Asset Interface.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
interface PluginAssetInterface
{
    /**
     * Enqueue scripts, styles, and other assets in the WordPress frontend and admin area.
     *
     * @param string $type The type of the script. Default is 'frontend'.
     * @param string $hook_suffix The hook suffix for the current admin page.
     *
     * @return void
     */
    public function enqueue_scripts($type = 'frontend', $hook_suffix = '');
    /**
     * Localize script data.
     *
     * @param string       $type The type of the localize data. Default is 'raw'. Accepts 'raw' or 'output'.
     * @param string|array $data The data to localize.
     *
     * @return string|array
     */
    public function get_localize_data($type = 'raw', $data = array());
}
/**
 * The Plugin Asset class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
abstract class PluginAsset implements \DiviSquad\Base\Factories\PluginAsset\PluginAssetInterface
{
}
namespace DiviSquad\Base\Factories;

/**
 * Class RestRoute
 *
 * @package DiviSquad
 * @since   2.0.0
 */
final class RestRoute extends \DiviSquad\Base\Factories\FactoryBase\Factory
{
    use \DiviSquad\Utils\Singleton;
    /**
     * Store all registry
     *
     * @var RestRoute\RouteInterface[]
     */
    private static $registries = array();
    /**
     * Initialize hooks.
     *
     * @return void
     */
    protected function init_hooks()
    {
    }
    /**
     * Add a new route to the list of routes.
     *
     * @param string $route_class The class name of the route to add to the list. The class must implement the RouteInterface.
     *
     * @return bool
     */
    public function add($route_class)
    {
    }
    /**
     * Registered all namespace.
     *
     * @param string $name Current product name.
     *
     * @return string
     */
    public function get_namespace($name)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return void
     */
    public function register_routes()
    {
    }
    /**
     * Registered all routes.
     *
     * @param string $name Current product name.
     *
     * @return array
     */
    public function get_registered_routes($name)
    {
    }
}
namespace DiviSquad\Base\Factories\RestRoute;

/**
 * Interface for the Route class.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
interface RouteInterface
{
    /**
     * The route name
     *
     * @return string
     */
    public function get_name();
    /**
     * The route namespace
     *
     * @return string
     */
    public function get_namespace();
    /**
     * Available routes for current Rest Route
     *
     * @return array
     */
    public function get_routes();
}
/**
 * Abstract class representing the Route.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
abstract class Route implements \DiviSquad\Base\Factories\RestRoute\RouteInterface
{
    const VERSION = 'v1';
    /**
     * The route namespace
     *
     * @return string
     */
    public function get_namespace()
    {
    }
    /**
     * The route name
     *
     * @return string
     */
    public function get_name()
    {
    }
    /**
     * Available routes for current Rest Route
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Base\Factories;

/**
 * Factory for creating migration instances.
 *
 * @package DiviSquad\Settings
 * @since   3.0.0
 */
class SettingsMigration
{
    /**
     * Creates a migration instance based on the migration name.
     *
     * @param string $class_name The name of the migration class to instantiate. The class must exist and be an instance of AbstractMigration.
     * @return AbstractMigration The migration instance.
     * @throws InvalidArgumentException If the class does not exist or is not an instance of AbstractMigration.
     */
    public function create($class_name)
    {
    }
}
namespace DiviSquad\Base;

/**
 * Memory class for managing Divi Squad plugin settings.
 *
 * This class provides a caching layer for WordPress options,
 * improving performance by reducing database queries and adding
 * advanced features for option management.
 *
 * @package DiviSquad\Base
 * @since 2.0.0
 */
class Memory
{
    /**
     * The store of data (Option data).
     *
     * @var array
     */
    private $data = array();
    /**
     * The database option name.
     *
     * @var string
     */
    private $option_name;
    /**
     * The cache option group.
     *
     * @var string
     */
    private $option_group;
    /**
     * Flag to track if data has been modified.
     *
     * @var bool
     */
    private $is_modified = false;
    /**
     * Batch operation queue.
     *
     * @var array
     */
    private $batch_queue = array();
    /**
     * Memory constructor.
     *
     * @param string $prefix The prefix name for the plugin settings option.
     */
    public function __construct($prefix = 'divi-squad')
    {
    }
    /**
     * Load data from cache or database.
     *
     * @return void
     */
    private function load_data()
    {
    }
    /**
     * Get all stored options.
     *
     * @return array All stored options.
     */
    public function get_all()
    {
    }
    /**
     * Get the number of stored fields.
     *
     * @return int The number of stored fields.
     */
    public function count()
    {
    }
    /**
     * Check if a field exists.
     *
     * @param string $field The field key to check.
     * @return bool True if the field exists, false otherwise.
     */
    public function has($field)
    {
    }
    /**
     * Get the value of a field.
     *
     * @param string $field The field key.
     * @param mixed  $default_value The default value if the field doesn't exist.
     * @return mixed The field value or default if not found.
     */
    public function get($field, $default_value = null)
    {
    }
    /**
     * Set the value of a field.
     *
     * @param string $field The field key.
     * @param mixed  $value The value to set.
     * @return void
     */
    public function set($field, $value)
    {
    }
    /**
     * Update an existing field's value.
     *
     * @param string $field The field key.
     * @param mixed  $value The new value.
     * @return bool True if the field was updated, false if it doesn't exist.
     */
    public function update($field, $value)
    {
    }
    /**
     * Delete a field.
     *
     * @param string $field The field key to delete.
     * @return bool True if the field was deleted, false if it doesn't exist.
     */
    public function delete($field)
    {
    }
    /**
     * Add a value to an array field.
     *
     * @param string $field The field key.
     * @param mixed  $value The value to add.
     * @throws \Exception If the field is not an array.
     * @return void
     */
    public function add_to_array($field, $value)
    {
    }
    /**
     * Remove a value from an array field.
     *
     * @param string $field The field key.
     * @param mixed  $value The value to remove.
     * @throws \Exception If the field is not an array.
     * @return bool True if the value was removed, false otherwise.
     */
    public function remove_from_array($field, $value)
    {
    }
    /**
     * Queue a batch operation.
     *
     * @param string $operation The operation type ('set', 'update', 'delete').
     * @param string $field     The field key.
     * @param mixed  $value     The value (for 'set' and 'update' operations).
     * @return void
     */
    public function queue_batch_operation($operation, $field, $value = null)
    {
    }
    /**
     * Execute all queued batch operations.
     *
     * @return void
     */
    public function execute_batch()
    {
    }
    /**
     * Sync modified data to the database and update cache.
     *
     * This method is hooked to the 'shutdown' action.
     *
     * @return void
     */
    public function sync_data()
    {
    }
    /**
     * Clear all stored data.
     *
     * @return void
     */
    public function clear_all()
    {
    }
}
namespace DiviSquad\Base\Traits;

/**
 * Deprecated Classes Trait
 *
 * @package DiviSquad
 * @since   3.1.1
 */
trait DeprecatedClassLoader
{
    /**
     * Load deprecated classes after Divi Squad has initialized.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function load_deprecated_class_compatibility()
    {
    }
    /**
     * Load deprecated classes after Divi Squad has initialized.
     *
     * @since 3.1.1
     *
     * @return void
     */
    public function load_deprecated_classes()
    {
    }
    /**
     * Load a deprecated class file.
     *
     * @param string $class_name The full class name.
     * @param array  $config     The configuration array.
     * @return void
     */
    private function load_deprecated_class($class_name, $config = array())
    {
    }
    /**
     * Get the list of deprecated classes and their configurations.
     *
     * @return array
     */
    private function get_deprecated_classes_list()
    {
    }
    /**
     * Get the file path for a deprecated class.
     *
     * @param string $class_name The full class name.
     * @return string
     */
    private function get_deprecated_class_path($class_name)
    {
    }
    /**
     * Log an error when a deprecated class file is not found.
     *
     * @param string $valid_path The expected file path.
     * @return void
     */
    private function log_deprecated_class_error($valid_path)
    {
    }
    /**
     * Execute the before load callback if it exists in the configuration.
     *
     * @param array  $config     The configuration array.
     * @param string $class_name The full class name.
     * @return void
     */
    private function execute_before_load_callback($config, $class_name)
    {
    }
    /**
     * Add an action to load the deprecated class.
     *
     * @param array  $config     The configuration array.
     * @param string $class_name The full class name.
     * @param string $valid_path The file path of the deprecated class.
     * @return void
     */
    private function add_deprecated_class_action($config, $class_name, $valid_path)
    {
    }
    /**
     * Execute the after load callback if it exists in the configuration.
     *
     * @param array  $config     The configuration array.
     * @param string $class_name The full class name.
     * @return void
     */
    private function execute_after_load_callback($config, $class_name)
    {
    }
}
namespace DiviSquad\Extensions;

/**
 * The Post Duplicator class.
 *
 * @package DiviSquad
 * @since   1.4.8
 */
class Copy extends \DiviSquad\Base\Extension
{
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected function get_name()
    {
    }
    /**
     * Load the extension.
     *
     * @return void
     */
    protected function load()
    {
    }
    /**
     * Add CSS body class name for the available post or page.
     *
     * @param string $classes An array of body class names.
     *
     * @return string
     */
    public function admin_body_class($classes)
    {
    }
    /**
     * Enqueuing scripts for all admin pages.
     *
     * @return void
     */
    public function admin_enqueue_scripts()
    {
    }
    /**
     * Enqueuing scripts for all admin pages.
     *
     * @return void
     */
    public function admin_footer_template()
    {
    }
    /**
     * Verify allowed screen.
     *
     * @return bool
     */
    public function is_allowed_admin_screen()
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_localize_script_data($exists_data)
    {
    }
    /**
     * Add the duplicate link to post, page, and custom actions
     *
     * @param string[] $actions An array of row action links. Defaults are 'Edit', 'Quick Edit', 'Restore', 'Trash', 'Delete Permanently', 'Preview', and 'View'.
     * @param WP_Post  $post    The post-object.
     *
     * @return string[] An array of row action links.
     */
    public function row_actions($actions, $post)
    {
    }
    /**
     * Add duplicate action in the bulk actions menu of the list table.
     *
     * @param array $actions An array of the available bulk actions.
     *
     * @return string[] An array of bulk actions.
     */
    public function bulk_actions($actions)
    {
    }
    /**
     * Get the allowed list table for row actions.
     *
     * @return string[]
     */
    public function get_allowed_list_table_for_row_actions()
    {
    }
    /**
     * Get the allowed post types.
     *
     * @return string[]
     */
    public function get_allowed_post_types_for_bulk_actions()
    {
    }
    /**
     * Duplicate the post.
     *
     * @param array $options The post duplication options.
     *
     * @return void
     * @throws \RuntimeException When the post duplication failed.
     */
    public static function duplicate_the_post($options)
    {
    }
}
/**
 * The Divi Library Shortcode class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class Divi_Layout_Shortcode extends \DiviSquad\Base\Extension
{
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected function get_name()
    {
    }
    /**
     * Load the extension.
     *
     * @return void
     */
    protected function load()
    {
    }
    /**
     * Create New Admin Column
     *
     * @param array $columns Exists columns array data.
     *
     * @return array
     */
    public function create_shortcode_column($columns)
    {
    }
    /**
     * Get the column slug.
     *
     * @return string
     */
    protected function get_column_slug()
    {
    }
    /**
     * Get the column name.
     *
     * @return string
     */
    protected function get_column_name()
    {
    }
    /**
     * Display Shortcode
     *
     * @param string $column The current column name.
     * @param int    $id     The current post id.
     *
     * @return void
     */
    public function shortcode_column_content($column, $id)
    {
    }
    /**
     * Get the column content.
     *
     * @param int $id The current post id.
     *
     * @return string
     */
    protected function get_column_content($id)
    {
    }
    /**
     * Create New Shortcode
     *
     * @param array|string|mixed $atts The attributes of the current shortcode.
     *
     * @return string
     */
    public function shortcode_callback($atts)
    {
    }
    /**
     * Set a random high-module index when rendering in the visual builder to avoid conflicts with other modules on the same page
     *
     * @param mixed $value The content of current shortcode.
     *
     * @return mixed
     */
    public function shortcode_set_ajax_module_index($value)
    {
    }
}
/**
 * The Font Upload class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class Font_Upload extends \DiviSquad\Base\Extension
{
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected function get_name()
    {
    }
    /**
     * Load the extension.
     *
     * @return void
     */
    protected function load()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    protected function get_available_mime_types()
    {
    }
}
/**
 * The JSON class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class JSON extends \DiviSquad\Base\Extension
{
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected function get_name()
    {
    }
    /**
     * Load the extension.
     *
     * @return void
     */
    protected function load()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     * @since 1.0.0
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    public function get_available_mime_types()
    {
    }
    /**
     * Filters the "real" file type of the given file.
     *
     * @param array  $wp_checked Values for the extension, mime type, and corrected filename.
     * @param string $file       Full path to the file.
     * @param string $filename   The name of the file.
     */
    public function hook_wp_check_filetype_and_ext($wp_checked, $file, $filename)
    {
    }
}
/**
 * The SVG class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class SVG extends \DiviSquad\Base\Extension
{
    /**
     * Get the extension name.
     *
     * @return string
     */
    protected function get_name()
    {
    }
    /**
     * Load the extension.
     *
     * @return void
     */
    protected function load()
    {
    }
    /**
     * Allow extra mime type file upload in the current installation.
     *
     * @param array $existing_mimes The existing mime lists.
     *
     * @return array All mime lists with newly appended mimes.
     * @since 1.0.0
     */
    public function hook_add_extra_mime_types($existing_mimes)
    {
    }
    /**
     * All mime lists with newly appended mimes.
     *
     * @return array
     */
    public function get_available_mime_types()
    {
    }
    /**
     * Filters the "real" file type of the given file.
     *
     * @param array    $wp_check Values for the extension, mime type, and corrected filename.
     * @param string   $file     Full path to the file.
     * @param string   $filename The name of the file.
     * @param string[] $mimes    Array of mime types keyed by their file extension regex.
     */
    public function enable__upload($wp_check, $file, $filename, $mimes)
    {
    }
}
namespace DiviSquad\Integrations;

/**
 * Divi Squad Core Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 *
 * @property-read \DiviSquad\Base\Memory                  $memory     Squad memory.
 * @property-read \DiviSquad\Managers\Features\Modules    $modules    Squad module manager.
 * @property-read \DiviSquad\Managers\Features\Extensions $extensions Squad extension manger.
 */
abstract class Core extends \DiviSquad\Base\Core
{
    /**
     * Initialize the plugin with required components.
     *
     * @param array $options Options data.
     *
     * @return void
     */
    protected function init($options = array())
    {
    }
    /**
     * Load all assets.
     *
     * @return void
     */
    protected function load_assets()
    {
    }
    /**
     * Load all extensions.
     *
     * @return void
     */
    protected function load_extensions()
    {
    }
    /**
     * Load the divi custom modules for the divi builder.
     *
     * @return void
     */
    protected function load_modules_for_builder()
    {
    }
    /**
     * The admin interface asset and others.
     *
     * @return void
     */
    protected function load_admin()
    {
    }
    /**
     * Set the activation hook.
     *
     * @return void
     */
    public function hook_activation()
    {
    }
    /**
     * Set the deactivation hook.
     *
     * @return void
     */
    public function hook_deactivation()
    {
    }
    /**
     *  Load the settings migration.
     *
     * @return void
     */
    public function hook_migrate_builder_settings()
    {
    }
    /**
     *  Load the extensions.
     *
     * @return void
     */
    public function hook_initialize_builder_extension()
    {
    }
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @return void
     */
    public function hook_initialize_builder_asset_definitions()
    {
    }
}
/**
 * Divi Squad Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class DiviBuilder extends \DiviSquad\Base\DiviBuilder\Integration\ShortcodeAPI
{
    /**
     * Get the plugin version number
     *
     * @return string
     */
    public function get_version()
    {
    }
    /**
     * Loads custom modules when the builder is ready.
     *
     * @since 1.0.0
     */
    public function hook_et_builder_ready()
    {
    }
}
/**
 * Define integration helper functionalities for this plugin.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class DiviBuilderBackend extends \DiviSquad\Base\DiviBuilder\Placeholder
{
    /**
     * Used to update the content of the cached definitions js file.
     *
     * @param string $content content.
     *
     * @return string
     */
    public function asset_definitions($content)
    {
    }
    /**
     * Filters backend data passed to the Visual Builder.
     * This function is used to add static helpers whose content rarely changes.
     * eg: google fonts, module defaults, and so on.
     *
     * @param array $exists The existed definitions.
     *
     * @return array
     */
    public function static_asset_definitions($exists = array())
    {
    }
}
/**
 * Freemius SDK integration class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
final class Publisher
{
    /**
     * Store and retrieve the instance of Freemius SDK
     *
     * @var \Freemius The instance of Freemius SDK.
     */
    private $fs;
    /**
     * Integration Constructor
     *
     * @throws \Freemius_Exception Thrown when an API call returns an exception.
     */
    public function __construct()
    {
    }
    /**
     * Retrieve the instance of Freemius SDK
     *
     * @return \Freemius The instance of Freemius SDK.
     */
    public function get_fs()
    {
    }
    /**
     * Get the status of Freemius sdk is installed or not.
     *
     * @return bool
     */
    public static function is_installed()
    {
    }
    /**
     * Get the Freemius start file path.
     *
     * @return string|bool
     */
    private static function get_sdk_start_file_path()
    {
    }
    /**
     * Show the contact submenu item only when the user has a valid non-expired license.
     *
     * @param bool   $is_visible The filtered value. Whether the submenu item should be visible or not.
     * @param string $menu_id    The ID of the submenu item.
     *
     * @return bool If true, the menu item should be visible.
     */
    public function fs_hook_is_submenu_visible($is_visible, $menu_id)
    {
    }
    /**
     * Update plugin icon url for opt-in screen,.
     *
     * @return string The src url of plugin icon.
     */
    public function fs_hook_plugin_icon()
    {
    }
    /**
     * Get the account template path.
     *
     * @param array|string $content The template content.
     *
     * @return string
     */
    public function fs_hook_get_overrides_account_template($content)
    {
    }
    /**
     * Get the account template path.
     *
     * @param array|string $content The template content.
     *
     * @return string
     */
    public function fs_hook_get_overrides_template($content)
    {
    }
    /**
     * Control the visibility of admin notices.
     *
     * @param string $module_unique_affix Module's unique affix.
     * @param mixed  $value               The value on which the filters hooked to `$tag` are applied on.
     *
     * @return bool The filtered value after all hooked functions are applied to it.
     * @since  2.0.0
     */
    public function fs_hook_show_admin_notice($module_unique_affix, $value)
    {
    }
    /**
     * Modify the plugin title based on free and pro plugin
     *
     * @param string $title The plugin title.
     *
     * @return string The activated plugin title between free and pro
     * @since  2.0.0
     */
    public function fs_hook_plugin_title($title)
    {
    }
    /**
     * Modify the plugin version based on free and pro plugin
     *
     * @param string $version The plugin version.
     *
     * @return string The activated plugin title between free and pro
     * @since  2.0.0
     */
    public function fs_hook_plugin_version($version)
    {
    }
    /**
     * Remove all notices from the squad template pages.
     *
     * @return void
     */
    public function wp_hook_clean_admin_content_section()
    {
    }
    /**
     * Enqueue the plugin's scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix The current admin page.
     *
     * @return void
     */
    public function wp_hook_enqueue_scripts($hook_suffix)
    {
    }
    /**
     * Remove all third party dependencies from the squad template pages.
     *
     * @return void
     */
    public function wp_hook_clean_third_party_deps()
    {
    }
    /**
     * Remove unnecessary styles from the current page.
     *
     * @param \WP_Scripts|\WP_Styles $root The Core class of dependencies.
     *
     * @return void
     */
    public function remove_unnecessary_dependencies($root)
    {
    }
    /**
     * Get the dependencies of the squad scripts.
     *
     * @param \_WP_Dependency[] $registered The registered scripts.
     *
     * @return array
     */
    public function get_squad_dependencies($registered)
    {
    }
}
/**
 * Define integration helper functionalities for this plugin.
 *
 * @package DiviSquad\Integrations
 * @since   1.0.0
 */
class WP
{
    use \DiviSquad\Utils\Singleton;
    /**
     * The plugin options.
     *
     * @var array
     */
    protected $options;
    /**
     * Checks compatibility with the current version.
     *
     * @param string $required       Minimum required version.
     * @param string $target_version The current version.
     *
     * @return bool True if a required version is compatible or empty, false if not.
     * @since 1.2.0
     * @deprecated 1.2.3
     */
    public static function is_version_compatible($required, $target_version)
    {
    }
    /**
     * Checks compatibility with the current version.
     *
     * @param string $required       Minimum required version.
     * @param string $target_version The current version.
     *
     * @return bool True if a required version is compatible or empty, false if not.
     * @since 1.2.3
     */
    public static function version_compare($required, $target_version)
    {
    }
    /**
     * Set the plugin options.
     *
     * @param array $options The plugin options.
     */
    public function set_options($options)
    {
    }
    /**
     * The journey of a thousand miles starts here.
     *
     * @return bool Some voids are not really void, you have to explore to figure out why not!
     */
    public function let_the_journey_start()
    {
    }
    /**
     * Admin notice for the required php version.
     *
     * @return void
     */
    public function required_php_version_missing_notice()
    {
    }
    /**
     * Admin notice for the required WordPress version.
     *
     * @return void
     */
    public function required_wordpress_version_missing_notice()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * The Ajax actions handler class.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
class Ajax
{
    /**
     * Load all ajax action.
     *
     * @return void
     */
    public static function load()
    {
    }
}
namespace DiviSquad\Managers\Assets;

/**
 * Admin class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Admin extends \DiviSquad\Base\Factories\PluginAsset\PluginAsset
{
    /**
     * Enqueue scripts, styles, and other assets in the WordPress frontend and admin area.
     *
     * @param string $type The type of the script. Default is 'frontend'.
     * @param string $hook_suffix The hook suffix for the current admin page.
     *
     * @return void
     */
    public function enqueue_scripts($type = 'frontend', $hook_suffix = '')
    {
    }
    /**
     * Localize script data.
     *
     * @param string       $type The type of the localize data. Default is 'raw'. Accepts 'raw' or 'output'.
     * @param string|array $data The data to localize.
     *
     * @return string|array
     */
    public function get_localize_data($type = 'raw', $data = array())
    {
    }
    /**
     * Enqueue the plugin's scripts and styles files in the WordPress admin area.
     *
     * @param string $hook_suffix Hook suffix for the current admin page.
     *
     * @return void
     */
    public function enqueue_admin_scripts($hook_suffix)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_common_localize_script_data($exists_data)
    {
    }
    /**
     * Set localize data for admin area.
     *
     * @param array $exists_data Exists extra data.
     *
     * @return array
     */
    public function wp_localize_script_data($exists_data)
    {
    }
}
/**
 * Modules class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Modules extends \DiviSquad\Base\Factories\PluginAsset\PluginAsset
{
    /**
     * Enqueue scripts, styles, and other assets in the WordPress frontend and admin area.
     *
     * @param string $type The type of the script. Default is 'frontend'.
     * @param string $hook_suffix The hook suffix for the current admin page.
     *
     * @return void
     */
    public function enqueue_scripts($type = 'frontend', $hook_suffix = '')
    {
    }
    /**
     * Localize script data.
     *
     * @param string       $type The type of the localize data. Default is 'raw'. Accepts 'raw' or 'output'.
     * @param string|array $data The data to localize.
     *
     * @return string|array
     */
    public function get_localize_data($type = 'raw', $data = array())
    {
    }
    /**
     * Enqueue scripts for frontend.
     *
     * @return void
     */
    public function enqueue_frontend_scripts()
    {
    }
    /**
     * Enqueue scripts for builder.
     *
     * @return void
     */
    public function enqueue_builder_scripts()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * The plugin branding management class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Branding
{
    /**
     * Load all the branding.
     *
     * @return void
     */
    public static function load()
    {
    }
}
namespace DiviSquad\Managers\Branding;

/**
 * Plugin Admin Footer Text class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class AdminFooterText extends \DiviSquad\Base\Factories\BrandAsset\BrandAsset
{
    /**
     * The branding type.
     *
     * @return string
     */
    public function get_type()
    {
    }
    /**
     * The branding position.
     *
     * @return string
     */
    public function get_position()
    {
    }
    /**
     * Filters the "Thank you" text displayed in the admin footer.
     *
     * @return  string
     * @since 1.3.2
     */
    public function get_plugin_footer_text()
    {
    }
    /**
     * Filters the version/update text displayed in the admin footer.
     *
     * @return  string
     * @since 1.4.8
     */
    public function get_update_footer_text()
    {
    }
}
/**
 * Plugin Action Links class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class PluginActionLinks extends \DiviSquad\Base\Factories\BrandAsset\BrandAsset
{
    /**
     * The branding type.
     *
     * @return string
     */
    public function get_type()
    {
    }
    /**
     * The branding position.
     *
     * @return string
     */
    public function get_position()
    {
    }
    /**
     * The branding asset is allowed in network.
     *
     * @return bool
     */
    public function is_allow_network()
    {
    }
    /**
     * The plugin action links.
     *
     * @return array
     */
    public function get_action_links()
    {
    }
}
/**
 * Plugin Row Meta class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class PluginRowActions extends \DiviSquad\Base\Factories\BrandAsset\BrandAsset
{
    /**
     * The branding type.
     *
     * @return string
     */
    public function get_type()
    {
    }
    /**
     * The branding position.
     *
     * @return string
     */
    public function get_position()
    {
    }
    /**
     * The plugin row meta actions.
     *
     * @return  array
     */
    public function get_row_actions()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Link Class
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Links
{
    /**
     * The plugin home URL.
     *
     * @var string
     * @since 3.0.0
     */
    const HOME_URL = 'https://squadmodules.com/';
    /**
     * The plugin support URL.
     *
     * @var string
     * @since 3.0.0
     */
    const PRICING_URL = 'https://squadmodules.com/pricing/';
    /**
     * The plugin issues URL.
     *
     * @var string
     * @since 3.0.0
     */
    const ISSUES_URL = 'https://github.com/thewpsquad/squad-modules/issues';
    /**
     * The plugin URL from WP.org.
     *
     * @var string
     * @since 3.0.0
     */
    const WP_ORG_URL = 'http://wordpress.org/plugins/squad-modules-for-divi/';
    /**
     * The plugin support URL.
     *
     * @var string
     * @since 3.0.0
     */
    const SUPPORT_URL = 'https://wordpress.org/support/plugin/squad-modules-for-divi/#postform';
    /**
     * The plugin ratting URL.
     *
     * @var string
     * @since 3.0.0
     */
    const RATTING_URL = 'https://wordpress.org/support/plugin/squad-modules-for-divi/reviews/?rate=5#new-post';
    /**
     * The plugin translate URL.
     *
     * @var string
     * @since 3.0.0
     */
    const TRANSLATE_URL = 'https://translate.wordpress.org/projects/wp-plugins/squad-modules-for-divi';
}
/**
 * The Menu management class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Menus
{
    /**
     * Load all menus.
     *
     * @return void
     */
    public static function load()
    {
    }
}
namespace DiviSquad\Managers\Menus;

/**
 * Menu class
 *
 * @package DiviSquad
 * @since   2.0.0
 */
class AdminMenu extends \DiviSquad\Base\Factories\AdminMenu\Menu
{
    /**
     * Details about the Main Menu.
     *
     * @return  array Details about the Main Menu.
     */
    public function get_main_menu()
    {
    }
    /**
     * Details about the Sub Menu.
     *
     * @return  array Details about the Sub Menu.
     */
    public function get_sub_menus()
    {
    }
    /**
     * Load template file for admin pages.
     *
     * @return  void
     */
    public function get_template()
    {
    }
    /**
     * Add the CSS classes for the body tag in the admin.
     *
     * @return string
     */
    public function get_body_classes()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Migrations class for Divi Squad.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Migrations
{
    /**
     * Initialize the migrations.
     *
     * @return void
     * @since  3.0.0
     */
    public static function init()
    {
    }
}
/**
 * Notices
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Notices
{
    /**
     * Load all notices.
     *
     * @return void
     */
    public static function load()
    {
    }
}
namespace DiviSquad\Managers\Notices;

/**
 * Welcome (60%) Campaign Class
 *
 * @package DiviSquad
 * @since   2.0.0
 */
class Discount extends \DiviSquad\Base\Factories\AdminNotice\Notice
{
    /**
     * The notice id for the notice.
     *
     * @var string
     */
    protected $notice_id = 'welcome-60%-discount';
    /**
     * Check if we can render notice.
     */
    public function can_render_it()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @return string
     * @since 1.2.5
     */
    public function get_body_classes()
    {
    }
    /**
     * Get the template args.
     *
     * @return array
     */
    public function get_template_args()
    {
    }
}
/**
 * Pro Plugin Class
 *
 * @package DiviSquad
 * @since   2.0.0
 */
class ProActivation extends \DiviSquad\Base\Factories\AdminNotice\Notice
{
    /**
     * The notice id for the notice.
     *
     * @var string
     */
    protected $notice_id = 'pro-activation';
    /**
     * Check if we can render notice.
     * @throws \Exception If the notice can't be rendered.
     */
    public function can_render_it()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @return string
     * @since 1.2.5
     */
    public function get_body_classes()
    {
    }
    /**
     * Get the template arguments
     *
     * @return array
     * @since 3.0.0
     */
    public function get_template_args()
    {
    }
}
/**
 * Plugin Review Class
 *
 * @package DiviSquad
 * @since   1.2.3
 *
 * @ref essential-addons-for-elementor-lite/includes/Traits/Helper.php:551.
 */
class Review extends \DiviSquad\Base\Factories\AdminNotice\Notice
{
    /**
     * The notice id for the notice.
     *
     * @var string
     */
    protected $notice_id = 'review';
    /**
     * How Long timeout until first banner shown.
     *
     * @var int
     */
    private $first_time_show = 7;
    /**
     * Init constructor.
     */
    public function __construct()
    {
    }
    /**
     * Check if we can render notice.
     */
    public function can_render_it()
    {
    }
    /**
     * Filters the CSS classes for the body tag in the admin.
     *
     * @return string
     * @since 1.2.5
     */
    public function get_body_classes()
    {
    }
    /**
     * Get the template arguments
     *
     * @return array
     * @since 3.0.0
     */
    public function get_template_args()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Assets Class
 *
 * @package DiviSquad
 * @since   1.0.0
 * @since   3.0.0 Updated class name.
 */
class PluginAssets
{
    /**
     * Load all the branding.
     *
     * @return void
     */
    public static function load()
    {
    }
}
/**
 * Rest API Routes
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class RestRoutes
{
    /**
     * Load rest route on init time.
     *
     * @return void
     */
    public static function load()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1;

/**
 * Rest API Routes for Extension
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Extensions extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Get registered extensions list.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_available_extensions()
    {
    }
    /**
     * Get active extensions list from database
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_active_extensions()
    {
    }
    /**
     * Get inactive extensions list from database.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_inactive_extensions()
    {
    }
    /**
     * Get update extensions list from database
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function update_active_extensions($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1\Extensions;

/**
 * Extension (Copy) Rest API class
 *
 * @package DiviSquad
 * @since   SQUAD_MODULES_VERSION
 */
class Copy extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Get available posts
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_available_posts($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1;

/**
 * Rest API Routes for Modules
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Modules extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Get registered modules list.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_available_modules()
    {
    }
    /**
     * Get active modules list from database.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_active_modules()
    {
    }
    /**
     * Get inactive modules list from database.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_inactive_modules()
    {
    }
    /**
     * Get update active modules list from database.
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function update_active_modules($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1\Modules;

/**
 * Post Grid Load More Rest API class
 *
 * @package DiviSquad
 * @since   SQUAD_MODULES_VERSION
 */
class PostGrid extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Get available posts
     *
     * @param WP_REST_Request $request The wp rest api request.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_available_posts($request)
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1\Notices;

/**
 * Welcome 60% Discount Notice class
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Discount extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Update the database when the user submits a review for the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function make_it_done()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
/**
 * Plugin Activation Notice class.
 *
 * @package DiviSquad
 * @since   2.0.0
 */
class ProActivation extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Count how many times the user closes the review notice.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function activation_notice_close()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
/**
 * Plugin Review Notice class
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Review extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * How Long timeout after first banner shown.
     *
     * @var int
     */
    private $another_time_show = 7;
    /**
     * Update the database when the user submits a review for the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function make_it_done()
    {
    }
    /**
     * Remind the user for review the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function remind_me_at_next_week()
    {
    }
    /**
     * Count how many times the user closes the review notice.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function count_review_closing()
    {
    }
    /**
     * Count how many times the user asks for support from the review notice.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function ask_for_support()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers\RestRoutes\V1\WhatsNew;

/**
 * Rest API Routes for What's New
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Changelog extends \DiviSquad\Base\Factories\RestRoute\Route
{
    /**
     * Remind the user for review the plugin.
     *
     * @return WP_Error|WP_HTTP_Response|WP_REST_Response
     */
    public function get_readme_file_data()
    {
    }
    /**
     * We register our routes for our endpoints.
     *
     * @return array
     */
    public function get_routes()
    {
    }
}
namespace DiviSquad\Managers;

/**
 * Site Health Info Manager.
 *
 * @package DiviSquad
 * @author  WP Squad <support@squadmodules.com>
 * @since   3.1.0
 */
class SiteHealth
{
    use \DiviSquad\Utils\Singleton;
    /**
     * Init Site Health.
     *
     * @since 3.1.0
     */
    public function load()
    {
    }
    /**
     * Check if the current WordPress version is compatible.
     *
     * @return bool
     */
    private function is_compatible()
    {
    }
    /**
     * Integration hooks.
     *
     * @since 3.1.0
     */
    protected function hooks()
    {
    }
    /**
     * Add section to Info tab.
     *
     * @param array $debug_info Array of all information.
     *
     * @return array Array with added info section.
     * @since 3.1.0
     */
    public function add_info_section(array $debug_info)
    {
    }
    /**
     * Get info fields for the Site Health section.
     *
     * @return array
     */
    private function get_info_fields()
    {
    }
    /**
     * Get the plugin version.
     *
     * @return string
     */
    private function get_plugin_version()
    {
    }
    /**
     * Get the plugin install date.
     *
     * @return string|null
     */
    private function get_install_date()
    {
    }
    /**
     * Add additional fields to the info section.
     *
     * @param array $fields Existing fields.
     *
     * @return array
     */
    private function add_additional_fields(array $fields)
    {
    }
}
namespace DiviSquad\Modules;

/**
 * Before After Image Slider Module Class.
 *
 * @package DiviSquad\Modules\BeforeAfterImageSlider
 * @since   1.0.0
 */
class BeforeAfterImageSlider extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get image and associated fields.
     *
     * @param string $image_type The current image name.
     *
     * @return array image and associated fields.
     */
    private function squad_get_image_fields($image_type)
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render image.
     *
     * @param string $image_type The image type.
     *
     * @return string
     */
    private function squad_render_image($image_type)
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function squad_generate_all_styles($attrs)
    {
    }
}
/**
 * Breadcrumbs Module Class.
 *
 * @package DiviSquad\Modules\Breadcrumbs
 * @since   1.4.0
 */
class Breadcrumbs extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
/**
 * Business Hours Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class BusinessHours extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Return an added new item(module) text.
     *
     * @return string
     */
    public function add_new_child_text()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render title
     *
     * @return string
     */
    private function squad_render_title_text()
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles for divider
     */
    private function squad_generate_divider_styles()
    {
    }
}
/**
 * Business Hours Day Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class BusinessHoursChild extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Process styles for module output.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    private function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles for divider
     *
     * @return void
     */
    private function squad_generate_divider_styles()
    {
    }
    /**
     * Render day name
     *
     * @return string
     */
    private function squad_render_day_time_text()
    {
    }
}
/**
 * Divider Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class Divider extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Context data.
     *
     * @return mixed
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function squad_generate_additional_styles($attrs)
    {
    }
    /**
     * Render divider.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     * @param array                                     $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_divider($multi_view, $attrs)
    {
    }
    /**
     * Render divider icon which on is active
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_divider_icon($multi_view)
    {
    }
    /**
     * Render divider icon.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_divider_font_icon($multi_view)
    {
    }
    /**
     * Render divider image.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_divider_icon_image($multi_view)
    {
    }
    /**
     * Render divider icon text.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_divider_icon_text($multi_view)
    {
    }
    /**
     * Render divider lottie image.
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_divider_icon_lottie($multi_view)
    {
    }
}
/**
 * The Drop Cap Module Class.
 *
 * @since       1.4.0
 * @package     squad-modules-for-divi
 */
class DropCapText extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function squad_generate_additional_styles($attrs)
    {
    }
}
/**
 * Dual-Button Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class DualButton extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Context data.
     *
     * @return mixed
     * @since 3.27.1
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render element text with icon
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $element Dynamic element key.
     *
     * @return string
     */
    private function squad_render_element_text($attrs, $element)
    {
    }
    /**
     * Render element icon
     *
     * @param string $element Dynamic element key.
     *
     * @return string
     */
    private function squad_render_element_font_icon($element)
    {
    }
    /**
     * Render element image
     *
     * @param string $element Dynamic element key.
     *
     * @return string
     */
    private function squad_render_element_icon_image($element)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Render separator text with icon
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_element_separator($attrs)
    {
    }
}
/**
 * Flip Box Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class FlipBox extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get all text related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array Text related fields.
     */
    private function squad_get_side_text_fields($side)
    {
    }
    /**
     * Get all icons and image related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array icons and image related fields.
     */
    private function squad_get_side_icon_images_fields($side)
    {
    }
    /**
     * Get all text related fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array Text related fields.
     */
    private function squad_get_side_associate_fields($side)
    {
    }
    /**
     * Get all order fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array order fields.
     */
    private function squad_get_side_order_fields($side)
    {
    }
    /**
     * Get all z index fields for both sides.
     *
     * @param string $side The current slide name.
     *
     * @return array z index fields.
     */
    private function squad_get_side_z_index_fields($side)
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param mixed $args      Arguments.
     *
     * @return mixed
     * @since 3.27.1
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders animation styles for the module output.
     */
    private function squad_generate_animation_styles()
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of attributes.
     */
    private function squad_generate_additional_styles($slide_type, $attrs)
    {
    }
    /**
     * Render the icon which on is active
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_slide_icons($slide_type, $attrs)
    {
    }
    /**
     * Render all text elements for slide with dynamic and multiview support for Flip Box.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_slide_elements($slide_type, $attrs)
    {
    }
    /**
     * Render button text with icon.
     *
     * @param string $slide_type The slide type.
     * @param array  $attrs      List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_button_text($slide_type, $attrs)
    {
    }
    /**
     * Render button icon.
     *
     * @param string $slide_type The slide type.
     *
     * @return string
     */
    private function squad_render_button_font_icon($slide_type)
    {
    }
    /**
     * Render button image.
     *
     * @param string $slide_type The slide type.
     *
     * @return string
     */
    private function squad_render_button_icon_image($slide_type)
    {
    }
}
namespace DiviSquad\Modules\FormStylers;

/**
 * The Form Styler: Contact Form 7 Module Class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class ContactForm7 extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
}
/**
 * The Form Styler: Fluent Forms Module Class.
 *
 * @package DiviSquad
 * @since   1.4.7
 */
class FluentForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Additional new fields for current form styler.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_form_styler_additional_custom_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.4.7
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Show form in the frontend
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.4.7
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function squad_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
}
/**
 * The Form Styler: Gravity Forms Module Class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class GravityForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Get toggles for the module's settings modal.
     */
    public function get_settings_modal_toggles()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
}
/**
 * The Form Styler: WP Forms Module Class.
 *
 * @package DiviSquad
 * @since   1.4.7
 */
class NinjaForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Additional new fields for current form styler.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_form_styler_additional_custom_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Declare custom css fields for the module
     *
     * @return array[]
     */
    public function get_custom_css_fields_config()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.7
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.4.7
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Show form in the frontend
     *
     * @param array             $attrs   List of unprocessed attributes.
     * @param string|array|null $content Content being processed.
     *
     * @return string the html output.
     * @since 1.4.7
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function squad_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
}
/**
 * The Form Styler: WP Forms Module Class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class WPForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
{
    /**
     * The css selector for the form container.
     *
     * @var string
     */
    private $form_container = '';
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 2.1.1
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Additional new fields for current form styler.
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_form_styler_additional_custom_fields()
    {
    }
    /**
     * Declare advanced fields for the module
     *
     * @return array
     */
    public function get_advanced_fields_config()
    {
    }
    /**
     * Render module output.
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     * @since 1.0.0
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @param array  $attrs   List of unprocessed attributes.
     * @param string $content Content being processed.
     *
     * @return string the html output.
     * @since 1.0.0
     */
    public static function squad_form_styler__get_form_html($attrs, $content = null)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Get the stylesheet configuration for generating styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return array
     */
    protected function squad_get_module_stylesheet_selectors($attrs)
    {
    }
    /**
     * Get the stylesheet selector for form tag.
     *
     * @return string
     */
    protected function get_form_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields.
     *
     * @return string
     */
    protected function get_field_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form fields to use in hover.
     *
     * @return string
     */
    protected function get_field_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form submit button.
     *
     * @return string
     */
    protected function get_submit_button_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for form submit button to use in hover.
     *
     * @return string
     */
    protected function get_submit_button_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the error message.
     *
     * @return string
     */
    protected function get_error_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the error message to use in hover.
     *
     * @return string
     */
    protected function get_error_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for the success message.
     *
     * @return string
     */
    protected function get_success_message_selector_default()
    {
    }
    /**
     * Get the stylesheet selector for the success message to use in hover.
     *
     * @return string
     */
    protected function get_success_message_selector_hover()
    {
    }
    /**
     * Get the stylesheet selector for form tag to use in hover.
     *
     * @return string
     */
    protected function get_form_selector_hover()
    {
    }
}
namespace DiviSquad\Modules;

/**
 * Glitch Text Module Class.
 *
 * @package DiviSquad
 * @since   1.2.2
 */
class GlitchText extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.2
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function squad_generate_additional_styles($attrs)
    {
    }
}
/**
 * Google Map Module Class.
 *
 * @package DiviSquad
 * @since   1.4.7
 */
class GoogleMap extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.7
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.7
     */
    public function get_fields()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
/**
 * Gradient Text Module Class.
 *
 * @package DiviSquad
 * @since   1.2.6
 */
class GradientText extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.6
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function squad_generate_additional_styles($attrs)
    {
    }
}
/**
 * Image Gallery Module Class.
 *
 * @package DiviSquad
 * @since   1.2.0
 */
class ImageGallery extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.8
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Get attachment html data for gallery module
     *
     * @param array $args Gallery Options.
     *
     * @return string|null Attachments data
     */
    public function get_gallery_html($args = array())
    {
    }
    /**
     * Get attachment data for gallery module
     *
     * @param array $args             Gallery Options.
     * @param array $conditional_tags Additional conditionals tags.
     * @param array $current_page     Current page.
     *
     * @return array|WP_Post[] Attachments data
     */
    public static function get_gallery($args = array(), $conditional_tags = array(), $current_page = array())
    {
    }
    /**
     * Renders gallery items.
     *
     * @param array|WP_Post $attachments     Array of attachment objects.
     * @param string        $images_quantity Quantity of images to display.
     * @param int           $image_count     Count of images per page.
     */
    public function render_gallery_items($attachments, $images_quantity, $image_count)
    {
    }
}
/**
 * Image Mask Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class ImageMask extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
/**
 * Lottie Image Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Lottie extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render item lottie image
     *
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string
     */
    private function squad_render_lottie($multi_view)
    {
    }
}
/**
 * The Post-Grid Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class PostGrid extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @since 1.0.0
     *
     * @return void
     */
    public function init()
    {
    }
    /**
     * Add custom hooks
     *
     * @return void
     */
    public function squad_init_custom_hooks()
    {
    }
    /**
     * Return an added new item(module) text.
     *
     * @return string
     */
    public function add_new_child_text()
    {
    }
    /**
     * Declare general fields for the module.
     *
     * @since 1.0.0
     *
     * @return array[]
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     *
     * @return array
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Render module output.
     *
     * @since 1.0.0
     *
     * @param array  $attrs       List of unprocessed attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string module's rendered output.
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Filter multi view value.
     *
     * @param mixed $raw_value Props raw value.
     * @param array $args      Props arguments.
     *
     * @return mixed
     *
     * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
     */
    public function multi_view_filter_value($raw_value, $args)
    {
    }
    /**
     * Render the post-elements in the outside wrapper.
     *
     * @param WP_Post      $post    The current post.
     * @param string|array $content The parent content.
     *
     * @return string
     */
    public function wp_hook_squad_current_outside_post_element($post, $content)
    {
    }
    /**
     * Render the post-elements in the main wrapper.
     *
     * @param WP_Post      $post    The WP POST object.
     * @param string|array $content The parent content.
     *
     * @return string
     */
    public function wp_hook_squad_current_main_post_element($post, $content)
    {
    }
    /**
     * Render a post element based on its properties.
     *
     * @param WP_Post $post           The current post.
     * @param array   $child_prop     The child properties.
     * @param string  $expected_state The expected state ('on' for outside, 'off' for main).
     *
     * @return string
     */
    private function squad_render_post_element($post, $child_prop, $expected_state)
    {
    }
    /**
     * Generate content by props with dynamic values.
     *
     * @param WP_Post      $post        The WP POST object.
     * @param string|array $content     The parent content.
     * @param callable     $callback    The render callback.
     *
     * @return string
     */
    public function squad_generate_props_content($post, $content, $callback)
    {
    }
    /**
     * Collect all posts from the database.
     *
     * @since 1.0.0
     *
     * @param array                                     $attrs      List of unprocessed attributes.
     * @param string|array|null                         $content    Content being processed.
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
     *
     * @return string the html output for the post-grid.
     */
    public static function squad_get_posts_html($attrs, $content = null, $multi_view = null)
    {
    }
    /**
     * Build the post query arguments.
     *
     * @since 3.1.0
     *
     * @param array $attrs   List of unprocessed attributes.
     * @param mixed $content Content being processed.
     *
     * @return array
     */
    protected static function squad_build_post_query_args($attrs, $content = null)
    {
    }
    /**
     * Add query arguments for the current loop.
     *
     * @param array $query_args Existing query arguments.
     * @return array Updated query arguments.
     */
    protected static function squad_add_current_loop_args($query_args)
    {
    }
    /**
     * Add query arguments for related posts.
     *
     * @param array   $query_args Existing query arguments.
     * @param WP_Post $post       Current post object.
     * @return array Updated query arguments.
     */
    protected static function squad_add_related_post_args($query_args, $post)
    {
    }
    /**
     * Add query arguments for custom display options.
     *
     * @param array $query_args Existing query arguments.
     * @param array $attrs      Module attributes.
     * @return array Updated query arguments.
     */
    protected static function squad_add_custom_display_args($query_args, $attrs)
    {
    }
    /**
     * Add query arguments for post offset.
     *
     * @param array $query_args Existing query arguments.
     * @param array $attrs      Module attributes.
     * @param int   $paged      Current page number.
     * @return array Updated query arguments.
     */
    protected static function squad_add_offset_args($query_args, $attrs, $paged)
    {
    }
    /**
     * Add query arguments for pagination.
     *
     * @param array $query_args Existing query arguments.
     * @param array $attrs      Module attributes.
     * @param int   $paged      Current page number.
     * @return array Updated query arguments.
     */
    protected static function squad_add_pagination_args($query_args, $attrs, $paged)
    {
    }
    /**
     * Add query arguments for date archives.
     *
     * @param array $query_args Existing query arguments.
     * @return array Updated query arguments.
     */
    protected static function squad_add_date_args($query_args)
    {
    }
    /**
     * Get queried arguments for client side rendering.
     *
     * @param array $attrs List of module attributes.
     * @return array Filtered query arguments.
     */
    protected static function squad_get_client_query_args($attrs)
    {
    }
    /**
     * Render the current post.
     *
     * @since 1.0.0
     *
     * @param WP_Post $post    The WP POST object.
     * @param array   $attrs   The module attributes.
     * @param mixed   $content The content being processed.
     *
     * @return void
     */
    protected static function squad_render_current_post($post, $attrs, $content = null)
    {
    }
    /**
     * Prepare post data for frontend rendering.
     *
     * @param WP_Post $post              The WP POST object.
     * @param WP_User $author            The post author object.
     * @param string  $date_replacement  The date format string.
     *
     * @return array
     */
    protected static function squad_prepare_post_data($post, $author, $date_replacement)
    {
    }
    /**
     * Render the pagination or load more button.
     *
     * @param WP_Query                                  $post_query The WP_Query object.
     * @param array                                     $attrs The module attributes.
     * @param string|array|null                         $content The content being processed.
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view The multiview object instance.
     *
     * @return void
     */
    protected static function squad_maybe_render_pagination($post_query, $attrs, $content = null, $multi_view = null)
    {
    }
    /**
     * Render the pagination or load more button.
     *
     * @param WP_Query                                  $post_query The WP_Query object.
     * @param array                                     $attrs The module attributes.
     * @param string|array|null                         $content The content being processed.
     * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view The multiview object instance.
     *
     * @return void
     */
    protected static function squad_maybe_render_load_more_button($post_query, $attrs, $content = null, $multi_view = null)
    {
    }
    /**
     * Render icon which on is active.
     *
     * @param array $attrs List of attributes.
     *
     * @return string
     */
    protected function squad_render_element_icon($attrs)
    {
    }
    /**
     * Render icon.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    protected function squad_render_element_font_icon($attrs)
    {
    }
    /**
     * Render image.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    protected function squad_render_element_icon_image($attrs)
    {
    }
    /**
     * Render image.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    protected function squad_render_element_icon_text($attrs)
    {
    }
    /**
     * Render element body.
     *
     * @param array         $attrs List of attributes.
     * @param false|WP_POST $post  The current post-object.
     *
     * @return string
     */
    protected function squad_render_post_element_body($attrs, $post)
    {
    }
    /**
     * Render post name icon.
     *
     * @param array $attrs List of attributes.
     *
     * @return string
     */
    protected function squad_render_post_title_font_icon($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_all_styles($attrs)
    {
    }
    /**
     * Generate styles.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return void
     */
    protected function squad_generate_layout_styles($attrs)
    {
    }
}
/**
 * Post-Reading Time Module Class.
 *
 * @package DiviSquad
 * @since   1.2.2
 */
class PostReadingTime extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.2.2
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Get the reading time text
     *
     * @param array $attrs List of attributes.
     *
     * @return string
     */
    private function squad_reading_time_text($attrs)
    {
    }
    /**
     * Calculate the reading time of a post.
     *
     * Gets the post-content, counts the images, strips shortcodes, and strips tags.
     * Then count the words. Converts images into a word count and outputs the total reading time.
     *
     * @param int   $post  The Post ID.
     * @param array $attrs List of attributes.
     *
     * @return false|float|string The total reading time for the article or string if it's 0.
     */
    public function disq_calculate_reading_time($post, $attrs)
    {
    }
    /**
     * Adds additional reading time for images.
     *
     * @param int   $total_images     number of images in post.
     * @param array $words_per_minute words per minute.
     *
     * @return int Additional time added to the reading time by images.
     * @since 1.1.0
     */
    public function disq_calculate_images($total_images, $words_per_minute)
    {
    }
    /**
     * Render time infix
     *
     * @param string $attribute    The text attribute name.
     * @param string $css_selector The stylesheet selector for the attribute.
     *
     * @return string
     */
    private function squad_render_time_optional_text($attribute, $css_selector)
    {
    }
    /**
     * Render time suffix
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    private function squad_render_time_divider($attrs)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     */
    private function squad_generate_additional_styles($attrs)
    {
    }
}
/**
 * Scrolling Text Module Class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class ScrollingText extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.3.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
}
/**
 * Star Rating Module Class.
 *
 * @package DiviSquad
 * @since   1.4.0
 */
class StarRating extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Generate html markup for stars.
     *
     * @param array $args List of attributes.
     *
     * @return string
     */
    public static function get_star_rating($args = array())
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
/**
 * Typing Text Module Class.
 *
 * @since           1.0.0
 * @package         squad-modules-for-divi
 */
class TypingText extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.0.0
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.0.0
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Render prefix.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    private function render_prefix_text($attrs)
    {
    }
    /**
     * Render typed text.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    private function render_typed_text($attrs)
    {
    }
    /**
     * Render suffix.
     *
     * @param array $attrs List of unprocessed attributes.
     *
     * @return string
     */
    private function render_suffix_text($attrs)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
}
/**
 * The Drop Cap Module Class.
 *
 * @package DiviSquad
 * @since   1.4.1
 */
class VideoPopup extends \DiviSquad\Base\DiviBuilder\Module
{
    /**
     * Initiate Module.
     * Set the module name on init.
     *
     * @return void
     * @since 1.4.1
     */
    public function init()
    {
    }
    /**
     * Declare general fields for the module
     *
     * @return array[]
     * @since 1.4.1
     */
    public function get_fields()
    {
    }
    /**
     * Get CSS fields transition.
     *
     * Add form field options group and background image on the field list.
     *
     * @since 1.4.1
     */
    public function get_transition_fields_css_props()
    {
    }
    /**
     * Renders the module output.
     *
     * @param array  $attrs       List of attributes.
     * @param string $content     Content being processed.
     * @param string $render_slug Slug of module that is used for rendering output.
     *
     * @return string
     */
    public function render($attrs, $content, $render_slug)
    {
    }
    /**
     * Renders additional styles for the module output.
     *
     * @param array $attrs List of attributes.
     *
     * @return void
     */
    private function generate_additional_styles($attrs)
    {
    }
    /**
     * Generate render trigger.
     *
     * @return string
     */
    protected function render_trigger()
    {
    }
}
namespace DiviSquad\Settings;

/**
 * Class Migration
 *
 * @package DiviSquad
 * @since   2.0.0
 * @since   3.0.0 move to Base\Factories\ModuleMigration
 */
abstract class Migration implements \DiviSquad\Base\Factories\ModuleMigration\MigrationInterface
{
    /**
     * Used to migrate field names.
     *
     * @var array
     */
    public static $field_name_migrations = array();
    /**
     * Array of hooks.
     *
     * @var array
     */
    public static $hooks = array('the_content', 'admin_enqueue_scripts', 'et_pb_get_backbone_templates', 'wp_ajax_et_pb_execute_content_shortcodes', 'wp_ajax_et_fb_get_saved_layouts', 'wp_ajax_et_fb_retrieve_builder_data');
    /**
     * The last checked hook.
     *
     * @var string
     */
    public static $last_hook_checked;
    /**
     * Last hook check decision.
     *
     * @var bool
     */
    public static $last_hook_check_decision;
    /**
     * The largest version of the migrations defined in the migration array.
     *
     * @var string
     */
    public static $max_version = '4.24.1';
    /**
     * Array of already migrated data.
     *
     * @var array
     */
    public static $migrated = array();
    /**
     * Array of migrations in format( [ 'version' => 'name of migration script' ] ).
     *
     * @var string[]
     */
    public static $migrations = array('4.24' => 'PostElement');
    /**
     * Migrations by version.
     *
     * @var array
     */
    public static $migrations_by_version = array();
    /**
     * Used to exclude names in case of BB.
     *
     * @var array
     */
    protected static $bb_excluded_name_changes = array();
    /**
     * Used for migrations where we want to separate the logic for
     * migrating post-attributes and global migrating preset attributes.
     *
     * @var bool
     */
    protected static $maybe_global_presets_migration = false;
    /**
     * Version.
     *
     * @var string
     */
    public $version;
    /**
     * Add or not missing fields.
     *
     * @var bool
     */
    public $add_missing_fields = false;
    /**
     * Get all modules to need to be migrated.
     *
     * @return array
     */
    public abstract function get_modules();
    /**
     * Get all fields to need to be migrated.
     *
     * Contains an array with:
     * - key as new field
     * - value consists affected fields as old field and module location
     *
     * @return array New and old fields need to be migrated.
     */
    public abstract function get_fields();
    /**
     * Initialize migration.
     */
    public static function init()
    {
    }
    /**
     * Remove added filters.
     *
     * Used by WPUnit tests.
     *
     * @since 4.16.0
     * @link  https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/#shared-setup-between-related-tests
     */
    public static function tear_down()
    {
    }
    /**
     * Maybe override processed fields.
     *
     * @param array  $fields      Shortcode fields.
     * @param string $module_slug Internal system name for the module type.
     *
     * @return array
     */
    public static function maybe_override_processed_fields($fields, $module_slug)
    {
    }
    /**
     * Get migrations.
     *
     * @param string $module_version Module version.
     *
     * @return array|mixed
     */
    public static function get_migrations($module_version)
    {
    }
    /**
     * Handle field name migrations.
     *
     * @param array  $fields       Shortcode fields.
     * @param string $module_slug  Internal system name for the module type.
     *
     * @return mixed
     */
    public function handle_field_name_migrations($fields, $module_slug)
    {
    }
    /**
     * Migrate field names.
     *
     * @param array  $fields     Shortcode fields.
     * @param string $slug       Internal system name for the module type.
     * @param string $version    Version of the migration.
     *
     * @return mixed
     */
    protected static function migrate_field_names($fields, $slug, $version)
    {
    }
    /**
     * Maybe override shortcode attributes.
     *
     * @param array  $attrs                          Shortcode attributes.
     * @param array  $unprocessed_attrs              Attributes that have not yet been processed.
     * @param string $module_slug                    Internal system name for the module type.
     * @param string $module_address                 Location of the current module on the page.
     * @param mixed  $content                        Text/HTML content within the current module.
     * @param bool   $maybe_global_presets_migration Whether to include global presets.
     *
     * @return array
     */
    public static function maybe_override_shortcode_attributes($attrs, $unprocessed_attrs, $module_slug, $module_address, $content = '', $maybe_global_presets_migration = false)
    {
    }
    /**
     * Check if the current hook should be handled.
     *
     * @param string $slug Internal system name for the module type.
     *
     * @return bool
     */
    public static function should_handle_render($slug)
    {
    }
    /**
     * Migrate from old value into new value.
     *
     * @param string $field_name       Current field name within the current module.
     * @param mixed  $current_value    Current field value within the current module.
     * @param string $module_slug      Internal system name for the module type.
     * @param mixed  $saved_value      Saved field value within the current module.
     * @param string $saved_field_name Saved field name within the current module.
     * @param array  $attrs            Shortcode attributes.
     * @param mixed  $content          Text/HTML content within the current module.
     * @param string $module_address   Location of the current module on the page.
     *
     * @return mixed
     */
    public abstract function migrate($field_name, $current_value, $module_slug, $saved_value, $saved_field_name, $attrs, $content, $module_address);
    /**
     * Maybe override content.
     *
     * @param mixed  $content           Text/HTML content within the current module.
     * @param array  $attrs             Shortcode attributes.
     * @param array  $unprocessed_attrs Attributes that have not yet been processed.
     * @param string $module_slug       Internal system name for the module type.
     *
     * @return mixed
     */
    public static function maybe_override_content($content, $attrs, $unprocessed_attrs, $module_slug)
    {
    }
    /**
     * Get all modules to need to be migrated.
     *
     * @return array
     */
    public function get_content_migration_modules()
    {
    }
    /**
     * This could have been written as abstract, but it's not as common to be expected to be implemented by every migration
     *
     * @param string $module_slug Internal system name for the module type.
     * @param array  $attrs       Shortcode attributes.
     * @param mixed  $content     Text/HTML content within the current module.
     *
     * @return mixed
     */
    public function migrate_content($module_slug, $attrs, $content)
    {
    }
}
namespace DiviSquad\Settings\Migration;

/**
 * Migration process to migrate image into Featured Image of Post Element modules.
 *
 * @since 2.0.0
 */
class PostElement extends \DiviSquad\Settings\Migration
{
    /**
     * Migration Version
     *
     * @since 2.0.0
     *
     * @var string
     */
    public $version = '4.24';
    /**
     * Get all modules affected.
     *
     * @return array
     * @since 2.0.0
     */
    public function get_modules()
    {
    }
    /**
     * Get all fields to need to be migrated.
     *
     * Contains an array with:
     * - key as new field
     * - value consists affected fields as old field and module location
     *
     * @return array New and old fields need to be migrated.
     * @since 2.0.0
     */
    public function get_fields()
    {
    }
    /**
     * Migrate from old value into new value.
     *
     * @param string $field_name        The field name.
     * @param mixed  $current_value     The current value.
     * @param string $module_slug       The module slug.
     * @param mixed  $saved_value       The saved value.
     * @param string $saved_field_name  The saved field name.
     * @param array  $attrs             The attributes.
     * @param mixed  $content           The content.
     * @param string $module_address    The module address.
     *
     * @return mixed
     */
    public function migrate($field_name, $current_value, $module_slug, $saved_value, $saved_field_name, $attrs, $content, $module_address)
    {
    }
}
namespace DiviSquad;

/**
 * Squad Modules class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
final class SquadModules extends \DiviSquad\Integrations\Core
{
    use \DiviSquad\Base\Traits\DeprecatedClassLoader;
    use \DiviSquad\Utils\Singleton;
    /**
     * Admin menu slug.
     *
     * @var string
     */
    protected $admin_menu_slug = 'divi_squad_dashboard';
    /**
     * Plugin Constructor.
     *
     * @since 1.0.0
     * @since 3.0.0 Added the plugin initialization on `plugin_loaded` hook.
     * @since 3.0.0 Added the plugin publisher initialization on `plugin_loaded` hook.
     */
    private function __construct()
    {
    }
    /**
     * Register all necessary hooks.
     *
     * @return void
     */
    private function register_hooks()
    {
    }
    /**
     * Get the plugin options.
     *
     * @return array
     */
    public function get_options()
    {
    }
    /**
     * Get a specific option value.
     *
     * @param  string $key           The option key.
     * @param  mixed  $default_value The default value if the option doesn't exist.
     * @return mixed
     */
    public function get_option($key, $default_value = null)
    {
    }
    /**
     * Set a specific option value.
     *
     * @param  string $key   The option key.
     * @param  mixed  $value The option value.
     * @return void
     */
    public function set_option($key, $value)
    {
    }
    /**
     * Get the plugin version number.
     *
     * @return string
     */
    public function get_version()
    {
    }
    /**
     * Get the plugin version number (dotted).
     *
     * @return string
     */
    public function get_version_dot()
    {
    }
    /**
     * Get the plugin directory path.
     *
     * @param  string $path The path to append.
     * @return string
     */
    public function get_path($path = '')
    {
    }
    /**
     * Get the plugin base name.
     *
     * @return string
     */
    public function get_basename()
    {
    }
    /**
     * Get the plugin template path.
     *
     * @return string
     */
    public function get_template_path()
    {
    }
    /**
     * Get the plugin asset URL.
     *
     * @return string
     */
    public function get_asset_url()
    {
    }
    /**
     * Get the plugin directory URL.
     *
     * @return string
     */
    public function get_url()
    {
    }
    /**
     * Get the plugin icon path.
     *
     * @return string
     */
    public function get_icon_path()
    {
    }
    /**
     * Retrieve the WordPress root path.
     *
     * @return string
     */
    public function get_wp_path()
    {
    }
    /**
     * Retrieve the plugin basename of the premium version.
     *
     * @return string
     */
    public function get_pro_basename()
    {
    }
    /**
     * Check if the pro version is activated.
     *
     * @return bool
     */
    public function is_pro_activated()
    {
    }
    /**
     * Initialize the memory.
     *
     * @return void
     */
    public function init_memory()
    {
    }
    /**
     * Initialize the plugin.
     *
     * @return void
     */
    public function init_plugin()
    {
    }
    /**
     * Load the plugin.
     *
     * @return void
     */
    public function run()
    {
    }
    /**
     * Load all plugin components.
     *
     * @return void
     */
    private function load_components()
    {
    }
    /**
     * Load additional components after the plugin has been initialized.
     *
     * @return void
     * @throws \Exception If the class file is not found.
     */
    public function load_additional_components()
    {
    }
    /**
     * Check if debug mode is enabled.
     *
     * @return bool
     */
    public function is_debug_mode()
    {
    }
}
namespace DiviSquad\Utils;

/**
 * Utils class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Asset
{
    /**
     * Get the version
     *
     * @since 1.0.0
     *
     * @return string
     */
    public static function get_the_version()
    {
    }
    /**
     * Resolve the resource root path.
     *
     * @return string
     * @phpstan-return string|null
     */
    public static function root_path()
    {
    }
    /**
     * Resolve the resource root uri.
     *
     * @return string
     */
    public static function root_path_uri()
    {
    }
    /**
     * Get current mode is production or not
     *
     * @since 1.0.0
     *
     * @return bool
     */
    public static function is_production_mode()
    {
    }
    /**
     * Validate the relative path.
     *
     * @param string $relative_path The path string for validation.
     *
     * @return string
     */
    public static function validate_relative_path($relative_path)
    {
    }
    /**
     * Resolve the resource path.
     *
     * @param string $relative_path The current path string.
     *
     * @return string
     */
    public static function resolve_file_path($relative_path)
    {
    }
    /**
     * Resolve the resource uri.
     *
     * @param string $relative_path The current path string.
     *
     * @return string
     */
    public static function resolve_file_uri($relative_path)
    {
    }
    /**
     * Process asset path and version data.
     *
     * @param array $path The asset relative path with options.
     * @param array $dependencies The asset dependencies.
     *
     * @return array
     */
    public static function process_asset_path_data($path, $dependencies)
    {
    }
    /**
     * Set the asset path.
     *
     * @param string $file    The file name.
     * @param array  $options The options for current asset file.
     *
     * @return array
     */
    public static function asset_path($file, $options = array())
    {
    }
    /**
     * Get the admin asset path.
     *
     * @param string $file    The file name.
     * @param array  $options The options for current asset file.
     *
     * @return array
     */
    public static function admin_asset_path($file, $options = array())
    {
    }
    /**
     * Get the module asset path.
     *
     * @param string $file    The file name.
     * @param array  $options The options for current asset file.
     *
     * @return array
     */
    public static function module_asset_path($file, $options = array())
    {
    }
    /**
     * Get the extensions asset path.
     *
     * @param string $file    The file name.
     * @param array  $options The options for current asset file.
     *
     * @return array
     */
    public static function extension_asset_path($file, $options = array())
    {
    }
    /**
     * Get the vendor asset path.
     *
     * @param string $file    The file name.
     * @param array  $options The options for current asset file.
     *
     * @return array
     */
    public static function vendor_asset_path($file, $options = array())
    {
    }
    /**
     * Enqueue styles.
     *
     * @since 1.0.0
     *
     * @param string $keyword   Name of the stylesheet. Should be unique.
     * @param array  $path      Relative path of the stylesheet with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
     * @param string $media     Optional. The media for which this stylesheet has been defined. Default 'all'.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     * @deprecated 3.1.0
     */
    public static function style_enqueue($keyword, $path, $deps = array(), $media = 'all', $no_prefix = false)
    {
    }
    /**
     * Enqueue javascript.
     *
     * @since 1.0.0
     *
     * @param string $keyword   Name of the javascript. Should be unique.
     * @param array  $path      Relative path of the javascript with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered javascript handles this stylesheet depends on. Default empty array.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     * @deprecated 3.1.0
     */
    public static function asset_enqueue($keyword, $path, array $deps = array(), $no_prefix = false)
    {
    }
    /**
     * Enqueue javascript.
     *
     * @since 1.0.0
     *
     * @param string $keyword   Name of the javascript. Should be unique.
     * @param array  $path      Relative path of the javascript with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered javascript handles this stylesheet depends on. Default empty array.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     */
    public static function enqueue_script($keyword, $path, array $deps = array(), $no_prefix = false)
    {
    }
    /**
     * Enqueue styles.
     *
     * @since 1.0.0
     *
     * @param string $keyword   Name of the stylesheet. Should be unique.
     * @param array  $path      Relative path of the stylesheet with options for the WordPress root directory.
     * @param array  $deps      Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
     * @param string $media     Optional. The media for which this stylesheet has been defined. Default 'all'.
     * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
     *
     * @return void
     */
    public static function enqueue_style($keyword, $path, $deps = array(), $media = 'all', $no_prefix = false)
    {
    }
    /**
     * Register scripts for frontend and builder.
     *
     * @param string $handle The handle name.
     * @param array  $path   The script path url with options.
     * @param array  $deps   The script dependencies.
     *
     * @return void
     */
    public static function register_script($handle, $path, $deps = array())
    {
    }
    /**
     * Enqueue styles.
     *
     * @since 1.0.0
     *
     * @param string $keyword Name of the stylesheet. Should be unique.
     * @param array  $path    Relative path of the stylesheet with options for the WordPress root directory.
     * @param array  $deps    Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
     * @param string $media   Optional. The media for which this stylesheet has been defined. Default 'all'.
     *
     * @return void
     */
    public static function register_style($keyword, $path, $deps = array(), $media = 'all')
    {
    }
    /**
     * Get available script enqueue footer arguments.
     *
     * @since 1.0.0
     *
     * @param bool $strategy Optional. If provided, may be either 'defer' or 'async'. Default false.
     * @param bool $priority Optional. If provided, may be either 'high' or 'low'. Default 'low'.
     *
     * @return array
     */
    public static function footer_arguments($strategy = false, $priority = false)
    {
    }
}
/**
 * Helper functions to work with dates, time and timezones.
 *
 * @package DiviSquad
 * @since 3.1.0
 */
class DateTime
{
    /**
     * Return date and time formatted as expected.
     *
     * @since 1.6.3
     *
     * @param string|int $date       Date to format.
     * @param string     $format     Optional. Format for the date and time.
     * @param bool       $gmt_offset Optional. GTM offset.
     *
     * @return string
     */
    public static function datetime_format($date, $format = '', $gmt_offset = false)
    {
    }
}
/**
 * Divi class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Divi
{
    /**
     * Check if Divi theme builder is enabled.
     *
     * @return boolean
     */
    public static function is_bfb_enabled()
    {
    }
    /**
     * Check if Theme Builder is Used on the page.
     *
     * @return boolean
     */
    public static function is_theme_builder_used()
    {
    }
    /**
     * Check if the current screen is the Theme Builder administration screen.
     *
     * @return boolean
     */
    public static function is_tb_admin_screen()
    {
    }
    /**
     * Check if Divi visual builder is enabled.
     *
     * @return boolean
     */
    public static function is_fb_enabled()
    {
    }
    /**
     * Add Icons css into the divi asset list when the Dynamic CSS option is turn on in current installation
     *
     * @param array $global_list The existed global asset list.
     *
     * @return array
     */
    public static function global_assets_list($global_list = array())
    {
    }
    /**
     * Add Font Awesome css into the divi asset list when the Dynamic CSS option is turn on in current installation
     *
     * @param array $global_list The existed global asset list.
     *
     * @return array
     */
    public static function global_fa_assets_list($global_list = array())
    {
    }
    /**
     * Add Font Awesome css support manually when the Dynamic CSS option is turn on in current installation.
     *
     * @param string $icon_data The icon value.
     *
     * @return void
     */
    public static function inject_fa_icons($icon_data)
    {
    }
}
/**
 * Helper class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Helper
{
    /**
     * Fix slash issue for Windows os
     *
     * @param string $path Full path for fixing.
     *
     * @return string
     */
    public static function fix_slash($path)
    {
    }
    /**
     * Implode array like html attributes.
     *
     * @param array $array_data The associate array data.
     *
     * @return string
     */
    public static function implode_assoc_array($array_data)
    {
    }
    /**
     * Verify the current screen is a squad page or not.
     *
     * @param string $page_id The page id.
     *
     * @return bool
     */
    public static function is_squad_page($page_id = '')
    {
    }
}
/**
 * Logger class for DiviSquad plugin.
 *
 * Provides comprehensive logging capabilities with different log levels,
 * file and database logging options, and log rotation.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
class Logger extends \DiviSquad\Utils\Media\Filesystem
{
    /**
     * Log levels.
     *
     * @var array
     */
    private $log_levels = array('DEBUG' => 100, 'INFO' => 200, 'NOTICE' => 250, 'WARNING' => 300, 'ERROR' => 400, 'CRITICAL' => 500, 'ALERT' => 550, 'EMERGENCY' => 600);
    /**
     * Minimum log level to record.
     *
     * @var int
     */
    private $min_log_level;
    /**
     * Log file path.
     *
     * @var string
     */
    private $log_file_path;
    /**
     * Maximum log file size in bytes before rotation.
     *
     * @var int
     */
    private $max_file_size;
    /**
     * Number of log files to keep during rotation.
     *
     * @var int
     */
    private $max_files;
    /**
     * Whether to log to database.
     *
     * @var bool
     */
    private $log_to_database;
    /**
     * Database table name for logs.
     *
     * @var string
     */
    private $db_table;
    /**
     * The WP_Filesystem_Base instance.
     *
     * @var WP_Filesystem_Base
     */
    private $wp_filesystem;
    /**
     * Logger constructor.
     *
     * @param array $config Configuration options.
     * @throws \Exception If configuration is invalid.
     */
    public function __construct($config = array())
    {
    }
    /**
     * Validate logger configuration.
     *
     * @throws \Exception If configuration is invalid.
     */
    private function validate_config()
    {
    }
    /**
     * Ensure log directory exists and is writable.
     *
     * @throws \Exception If unable to create or write to log directory.
     */
    private function ensure_log_directory_exists()
    {
    }
    /**
     * Log a message.
     *
     * @param string $level   Log level.
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function log($level, $message, $context = array())
    {
    }
    /**
     * Format a log entry.
     *
     * @param string $level   Log level.
     * @param string $message Log message.
     * @param array  $context Additional context data.
     * @return string Formatted log entry.
     */
    private function format_log_entry($level, $message, $context)
    {
    }
    /**
     * Write log entry to file.
     *
     * @param string $log_entry Formatted log entry.
     */
    private function write_to_file($log_entry)
    {
    }
    /**
     * Rotate log files.
     */
    private function rotate_log_files()
    {
    }
    /**
     * Check if database table is ready for logging.
     *
     * @return bool
     */
    private function is_database_table_ready()
    {
    }
    /**
     * Write log entry to database.
     *
     * @param string $level   Log level.
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    private function write_to_database($level, $message, $context)
    {
    }
    /**
     * Get all logs from the database.
     *
     * @param int $limit  Number of logs to retrieve.
     * @param int $offset Offset for pagination.
     * @return array
     */
    public function get_logs_from_database($limit = 100, $offset = 0)
    {
    }
    /**
     * Clear all logs from the database.
     *
     * @return int Number of rows affected.
     */
    public function clear_database_logs()
    {
    }
    /**
     * Log a debug message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function debug($message, $context = array())
    {
    }
    /**
     * Log an info message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function info($message, $context = array())
    {
    }
    /**
     * Log a notice message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function notice($message, $context = array())
    {
    }
    /**
     * Log a warning message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function warning($message, $context = array())
    {
    }
    /**
     * Log an error message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function error($message, $context = array())
    {
    }
    /**
     * Log a critical message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function critical($message, $context = array())
    {
    }
    /**
     * Log an alert message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function alert($message, $context = array())
    {
    }
    /**
     * Log an emergency message.
     *
     * @param string $message Log message.
     * @param array  $context Additional context data.
     */
    public function emergency($message, $context = array())
    {
    }
    /**
     * Get current log file content.
     *
     * @return string
     */
    public function get_log_file_content()
    {
    }
    /**
     * Clear the current log file.
     *
     * @return bool True if the file was successfully cleared, false otherwise.
     */
    public function clear_log_file()
    {
    }
}
namespace DiviSquad\Utils\Media;

/**
 * The Image class.
 *
 * @package DiviSquad
 * @since   3.0.0
 */
class Image extends \DiviSquad\Utils\Media\Filesystem
{
    /**
     * The images array.
     *
     * @var array
     */
    private static $images = array();
    /**
     * The kses defaults array.
     *
     * @var array
     */
    private static $kses_defaults = array();
    /**
     * The WP_Filesystem_Base instance.
     *
     * @var WP_Filesystem_Base
     */
    private $wp_fs;
    /**
     * The image path.
     *
     * @var string
     */
    private $path;
    /**
     * The valid types array.
     *
     * @var array
     */
    private $valid_types = array('png', 'jpg', 'jpeg', 'gif', 'svg');
    /**
     * The validated flag.
     *
     * @var bool|\WP_Error
     */
    private $path_validated;
    /**
     * The constructor class.
     *
     * @param string $path The image path.
     *
     * @throws RuntimeException If image path is not a directory or not readable.
     */
    public function __construct($path)
    {
    }
    /**
     * Validate path.
     *
     * @return bool|\WP_Error
     * @throws RuntimeException If image path is not a directory or not readable.
     */
    private function validate_path()
    {
    }
    /**
     * Check if the image is validated.
     *
     * @return bool|\WP_Error
     */
    public function is_path_validated()
    {
    }
    /**
     * Load image.
     *
     * @param string $image The image path.
     * @param string $type  The image type.
     *
     * @return string|\WP_Error
     * @throws RuntimeException If image file does not exist.
     */
    public function get_image($image, $type)
    {
    }
    /**
     * Load image.
     *
     * @param string $image The image path.
     *
     * @return string|\WP_Error
     * @throws RuntimeException If image file does not exist.
     */
    public function get_image_raw($image)
    {
    }
    /**
     * Set allowed html for image.
     *
     * @param array $allowed_html The allowed html.
     *
     * @return void
     */
    public function set_image_allowed_html($allowed_html)
    {
    }
    /**
     * Get allowed html for image.
     *
     * @link https://developer.wordpress.org/reference/functions/wp_kses_allowed_html/
     * @link https://wordpress.stackexchange.com/a/316943
     *
     * @return array
     */
    public function get_image_allowed_html()
    {
    }
}
namespace DiviSquad\Utils\Polyfills;

/**
 * Array Helper class.
 *
 * @package DiviSquad
 * @since   1.2.3
 */
class Arr
{
    /**
     * Simple function to sort an array by a specific key. Maintains index association.
     *
     * <code>
     * print_r(array_sort($people, 'age', SORT_DESC)); // Sort by oldest first
     * print_r(array_sort($people, 'surname', SORT_ASC)); // Sort by surname
     * </code>
     *
     * @param array  $array_data The input array.
     * @param string $on         The column number.
     * @param int    $order      The optional parameter flags may be used to modify the sorting behavior using these values.
     *
     * @return array
     */
    public static function sort($array_data, $on, $order = SORT_ASC)
    {
    }
}
/**
 * Constant class.
 *
 * @package DiviSquad
 * @since   3.1.1
 */
class Constant
{
    /**
     * PHP_INT_MAX constants.
     *
     * @var integer
     */
    const PHP_INT_MAX = 9223372036854775807;
    /**
     * PHP_INT_MIN constants.
     *
     * @var integer
     */
    const PHP_INT_MIN = -9.223372036854776E+18;
    // @phpstan-ignore-line
}
/**
 * String Helper class.
 *
 * @package DiviSquad
 * @since   1.2.3
 */
class Str
{
    /**
     * Polyfill for `str_starts_with()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if
     * the haystack begins with a needle.
     *
     * @param String $haystack The string to search in.
     * @param String $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$haystack` starts with `$needle`, otherwise false.
     */
    public static function starts_with($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_ends_with()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if
     * the haystack ends with a needle.
     *
     * @param string $haystack The string to search in.
     * @param string $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$haystack` ends with `$needle`, otherwise false.
     */
    public static function ends_with($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_contains()` function added in PHP 8.0.
     *
     * Performs a case-sensitive check indicating if a needle is contained in a haystack.
     *
     * @param string $haystack The string to search in.
     * @param string $needle   The substring to search for in the `$haystack`.
     *
     * @return bool True if `$needle` is in `$haystack`, otherwise false.
     */
    public static function contains($haystack, $needle)
    {
    }
    /**
     * Polyfill for `str_word_count()` function.
     *
     * Performs a case-sensitive check indicating if a needle is contained in a haystack.
     *
     * @param string  $string_content The string.
     * @param int     $format         Specify the return value of this function, options are: 0, 1, 2.
     * @param ?string $characters     The substring to search for in the `$haystack`.
     *
     * @return array|int True if `$needle` is in `$haystack`, otherwise false.
     */
    public static function word_count($string_content, $format = 0, $characters = null)
    {
    }
    /**
     * Remove all `\t` and `\n` from the string content.
     *
     * @since SQUAD_MODULES_SINCE
     *
     * @param string $string_content The string content to remove new lines and tabs.
     *
     * @return array|string|string[]
     */
    public static function remove_new_lines_and_tabs($string_content)
    {
    }
}
namespace DiviSquad\Utils;

/**
 * Sanitization class.
 *
 * @package DiviSquad
 * @since   1.0.0
 */
class Sanitization
{
    /**
     * Sanitize array value
     *
     * @param mixed $value Value.
     *
     * @link https://github.com/WordPress/WordPress-Coding-Standards/wiki/Sanitizing-array-input-data
     *
     * @return array|string
     */
    public static function sanitize_array($value)
    {
    }
}
/**
 * WP Helper class.
 *
 * @package DiviSquad
 * @since   1.2.2
 */
class WP
{
    /**
     * Detect if the current site is running in a WordPress Playground environment.
     *
     * @return bool True if the site is running in a WordPress Playground, false otherwise.
     */
    public static function is_playground()
    {
    }
    /**
     * Determines whether a plugin is active.
     *
     * Only plugins installed in the plugins/ folder can be active.
     *
     * Plugins in the mu-plugins/ folder can't be "activated," so this function will
     * return false for those plugins.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.5.0
     *
     * @param string $plugin Path to the plugin file relative to the plugins' directory.
     *
     * @return bool True, if in the active plugins list. False, not in the list.
     */
    public static function is_plugin_active($plugin)
    {
    }
    /**
     * Determines whether the plugin is active for the entire network.
     *
     * Only plugins installed in the plugins/ folder can be active.
     *
     * Plugins in the mu-plugins/ folder can't be "activated," so this function will
     * return false for those plugins.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 3.0.0
     *
     * @param string $plugin Path to the plugin file relative to the plugins' directory.
     *
     * @return bool True if active for the network, otherwise false.
     */
    public static function is_plugin_active_for_network($plugin)
    {
    }
    /**
     * Get the active plugins name and versions.
     *
     * @return array
     */
    public static function get_active_plugins()
    {
    }
    /**
     * Get the active plugins' information.
     *
     * @return array
     */
    public static function get_active_plugins_info()
    {
    }
    /**
     * Sets translated strings for a script.
     *
     * Works only if the script has already been registered.
     *
     * @param string $handle The Script handle the textdomain will be attached to.
     * @param string $domain Optional. Text domain. Default 'default'.
     * @param string $path   Optional. The full file path to the directory containing translation files.
     *
     * @return bool True if the text domain was successfully localized, false otherwise.
     */
    public static function set_script_translations($handle, $domain = 'default', $path = '')
    {
    }
}