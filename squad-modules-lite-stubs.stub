<?php
/**
 * Generated stub declarations for Squad Modules for Divi.
 * @see https://squadmodules.com/
 * @see https://github.com/mralaminahamed/phpstan-squad-modules-lite-stubs
 */

namespace DiviSquad\Admin {
    /**
     * Assets class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class Assets
    {
        /**
         * Get the lis of admin extra asset allowed page for the plugin.
         *
         * @return array
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function get_plugin_extra_asset_allowed_pages()
        {
        }
        /**
         * Enqueue the plugin's scripts and styles files in the WordPress admin area.
         *
         * @param string $hook_suffix Hook suffix for the current admin page.
         *
         * @return void
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function wp_hook_enqueue_plugin_admin_asset($hook_suffix)
        {
        }
        /**
         * Get the lis of admin asset allowed page for the plugin.
         *
         * @return array
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function get_plugin_asset_allowed_pages()
        {
        }
        /**
         * Enqueue extra scripts and styles files in the WordPress admin area.
         *
         * @param string $hook_suffix Hook suffix for the current admin page.
         *
         * @return void
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function wp_hook_enqueue_extra_admin_asset($hook_suffix)
        {
        }
        /**
         * Set localize data for admin area.
         *
         * @param array $exists_data Exists extra data.
         *
         * @return array
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function wp_common_localize_script_data($exists_data)
        {
        }
        /**
         * Set localize data for admin area.
         *
         * @param array $exists_data Exists extra data.
         *
         * @return array
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function wp_localize_script_data($exists_data)
        {
        }
    }
}
namespace DiviSquad\Admin\Plugin {
    /**
     * Plugin Action Links class
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class ActionLinks
    {
    }
    /**
     * Plugin Admin Footer Text class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class AdminFooterText
    {
        /**
         * Filters the "Thank you" text displayed in the admin footer.
         *
         * @param string $footer_text The content that will be printed.
         *
         * @return  string
         * @since 1.3.2
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function add_plugin_footer_text($footer_text)
        {
        }
        /**
         * Filters the version/update text displayed in the admin footer.
         *
         * @param string $content The content that will be printed.
         *
         * @return  string
         * @since 1.4.8
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function add_update_footer_text($content)
        {
        }
    }
    /**
     * Plugin Row Meta class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class RowMeta
    {
    }
}
namespace DiviSquad\Base\DiviBuilder {
    /**
     * Builder Utils class
     *
     * @since   1.0.0
     * @package DiviSquad
     */
    #[\AllowDynamicProperties]
    abstract class Module extends \ET_Builder_Module
    {
        /**
         * Utils folder name.
         *
         * @since 1.0.0
         * @var string
         */
        public $folder_name = 'et_pb_divi_squad_modules';
        /**
         * Stylesheet selector for tooltip container.
         *
         * @since 1.0.0
         * @var string
         */
        public string $tooltip_css_element = '';
        /**
         * The instance of Utils class
         *
         * @var Utils\Base
         */
        public $squad_utils;
        /**
         * Utils credits.
         *
         * @since 1.0.0
         * @var string[]
         */
        protected $module_credits = array('module_uri' => '', 'author' => 'Divi Squad', 'author_uri' => \DiviSquad\Core\Supports\Links::HOME_URL . '?utm_campaign=wporg&utm_source=module_modal&utm_medium=module_author_link');
        /**
         * The icon for module.
         *
         * @since 1.0.0
         * @var string
         */
        public string $icon = '';
        /**
         * The icon path for module.
         *
         * @since 1.0.0
         * @var string
         */
        public string $icon_path = '';
        /**
         * The list of icon eligible element
         *
         * @var array
         */
        protected $icon_not_eligible_elements = array();
        /**
         * Get module defined fields + automatically generated fields
         *
         * @return array
         */
        public function get_complete_fields() : array
        {
        }
        /**
         * Check if an element is eligible for an icon.
         *
         * @param string $element
         *
         * @return bool
         */
        protected function is_icon_eligible(string $element) : bool
        {
        }
        /**
         * Log an error and optionally send an error report.
         *
         * @since 3.2.0
         *
         * @param mixed $error       The exception or error to log.
         * @param array $context     Additional context for the error.
         * @param bool  $send_report Whether to send an error report.
         *
         * @return void
         */
        protected function log_error(\Throwable $error, array $context = array(), bool $send_report = true) : void
        {
        }
        /**
         * Render an error message when an exception occurs.
         *
         * @return string The HTML for the error message.
         */
        protected function render_error_message() : string
        {
        }
        /**
         * Render a notice.
         *
         * @since 3.2.0
         *
         * @param string $message The message to display.
         * @param string $type    The type of notice (error, warning, success, info).
         *
         * @return string
         */
        protected function render_notice(string $message, string $type = 'info') : string
        {
        }
    }
    /**
     * Builder Utils class
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.1.0 mark as deprecated
     */
    #[\AllowDynamicProperties]
    abstract class DiviSquad_Module extends \DiviSquad\Base\DiviBuilder\Module
    {
    }
    /**
     * Integration API Base Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    abstract class Integration
    {
        /**
         * The plugin name.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected string $name = '';
        /**
         * Absolute path to the plugin's directory.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected string $plugin_dir = '';
        /**
         * The plugin's directory URL.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected string $plugin_dir_url = '';
        /**
         * The plugin's version
         *
         * @since 1.0.0
         *
         * @var string The plugin's version
         */
        protected string $version = '';
        /**
         * The asset build for the plugin
         *
         * @since 1.0.0
         *
         * @var string The plugin's version
         */
        protected string $build_path = 'build/divi-builder-4/';
        /**
         * Constructor.
         *
         * @param string $name           The plugin's WP Plugin name.
         * @param string $plugin_dir     Absolute path to the plugin's directory.
         * @param string $plugin_dir_url The plugin's directory URL.
         */
        public function __construct(string $name, string $plugin_dir, string $plugin_dir_url)
        {
        }
        /**
         * Performs initialization tasks.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public abstract function initialize();
        /**
         * Get the plugin version number
         *
         * @since 1.0.0
         *
         * @return string
         */
        public abstract function get_version();
    }
}
namespace DiviSquad\Base\DiviBuilder\Integration {
    /**
     * Integration API Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    abstract class ShortcodeAPI extends \DiviSquad\Base\DiviBuilder\Integration
    {
        /**
         * Loads custom modules when the builder is ready.
         */
        public abstract function hook_et_builder_ready();
        /**
         * Performs initialization tasks.
         */
        public function initialize()
        {
        }
        /**
         * Enqueues the plugin's scripts and styles for the admin area.
         */
        public function admin_hook_enqueue_scripts()
        {
        }
        /**
         * Enqueues minified (production) or non-minified (hot reloaded) backend styles.
         */
        public function enqueue_backend_styles()
        {
        }
        /**
         * Enqueues the plugin's scripts and styles.
         */
        public function wp_hook_enqueue_scripts()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder {
    /**
     * Integration API Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.1.0 mark as deprecated
     */
    abstract class IntegrationAPI extends \DiviSquad\Base\DiviBuilder\Integration\ShortcodeAPI
    {
    }
    /**
     * Integration API Base Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.1.0 mark as deprecated
     */
    abstract class IntegrationAPIBase extends \DiviSquad\Base\DiviBuilder\Integration
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils {
    /**
     * Builder Utils Interface
     *
     * @package     DiviSquad
     * @since       1.5.0
     * @deprecated  3.1.0 marked as deprecated
     */
    interface UtilsInterface
    {
    }
}
namespace DiviSquad\Base\Factories\AdminMenu {
    /**
     * Menu Interface.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    interface MenuInterface
    {
        /**
         * The permission for menu management.
         *
         * @return string
         */
        public function get_permission();
        /**
         * Slug of the main menu.
         *
         * @return  string
         */
        public function get_main_menu_slug();
        /**
         * Get details about the Main Menu.
         *
         * @return array Details about the Main Menu.
         */
        public function get_main_menu();
        /**
         * Get details about the Sub Menu.
         *
         * @return array Details about the Sub Menu.
         */
        public function get_sub_menus();
        /**
         * Load template file for admin pages.
         *
         * @return void
         */
        public function get_template();
        /**
         * Add the CSS classes for the body tag in the admin.
         *
         * @return string
         */
        public function get_body_classes();
    }
    /**
     * Abstract class representing the Menu.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    abstract class Menu implements \DiviSquad\Base\Factories\AdminMenu\MenuInterface
    {
        /**
         * The permission for menu management.
         *
         * @return string
         */
        public function get_permission()
        {
        }
        /**
         * Slug of the main menu.
         *
         * @return  string
         */
        public function get_main_menu_slug()
        {
        }
        /**
         * Position of the main menu.
         *
         * @return  int
         */
        public function get_main_menu_position()
        {
        }
        /**
         * Details about the Main Menu.
         *
         * @return  array Details about the Main Menu.
         */
        public function get_main_menu()
        {
        }
        /**
         * Details about the Sub Menu.
         *
         * @return  array Details about the Sub Menu.
         */
        public function get_sub_menus()
        {
        }
        /**
         * Load template file for admin pages.
         *
         * @return  void
         */
        public function get_template()
        {
        }
        /**
         * Add the CSS classes for the body tag in the admin.
         *
         * @return string
         */
        public function get_body_classes()
        {
        }
    }
    /**
     * Abstract class representing the Menu.
     *
     * @package     DiviSquad
     * @since       2.0.0
     * @deprecated  3.0.0
     */
    abstract class MenuCore extends \DiviSquad\Base\Factories\AdminMenu\Menu
    {
    }
}
namespace DiviSquad\Base\Factories\BrandAsset {
    /**
     * Branding Asset Interface.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    interface AssetInterface
    {
        /**
         * The branding asset type.
         *
         * @return string
         */
        public function get_type();
        /**
         * The branding asset position.
         *
         * @return string
         */
        public function get_position();
    }
    /**
     * Abstract class representing the Branding.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    abstract class Asset implements \DiviSquad\Base\Factories\BrandAsset\AssetInterface
    {
        /**
         * The plugin base.
         *
         * @return string
         */
        public function get_plugin_base()
        {
        }
        /**
         * The branding asset is allowed in network.
         *
         * @return bool
         */
        public function is_allow_network() : bool
        {
        }
        /**
         * The plugin action links.
         *
         * @return array
         */
        public function get_action_links() : array
        {
        }
        /**
         * The plugin row actions.
         *
         * @return array
         */
        public function get_row_actions()
        {
        }
        /**
         * The plugin footer text.
         *
         * @return string
         */
        public function get_plugin_footer_text() : string
        {
        }
        /**
         * The plugin update footer text.
         *
         * @return string
         */
        public function get_update_footer_text() : string
        {
        }
    }
    /**
     * Abstract class representing the Branding.
     *
     * @package DiviSquad
     * @since   3.0.0
     * @deprecated 3.1.7
     */
    abstract class BrandAsset extends \DiviSquad\Base\Factories\BrandAsset\Asset
    {
    }
    /**
     * Branding Asset Interface.
     *
     * @package DiviSquad
     * @since   3.0.0
     * @deprecated 3.1.7
     */
    interface BrandAssetInterface
    {
    }
}
namespace DiviSquad\Base\Factories\PluginAsset {
    /**
     * The Asset Interface.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    interface AssetInterface
    {
        /**
         * Enqueue scripts, styles, and other assets in the WordPress frontend and admin area.
         *
         * @param string $type The type of the script. Default is 'frontend'.
         * @param string $hook_suffix The hook suffix for the current admin page.
         *
         * @return void
         */
        public function enqueue_scripts($type = 'frontend', $hook_suffix = '');
        /**
         * Localize script data.
         *
         * @param string       $type The type of the localize data. Default is 'raw'. Accepts 'raw' or 'output'.
         * @param string|array $data The data to localize.
         *
         * @return string|array
         */
        public function get_localize_data($type = 'raw', $data = array());
    }
    /**
     * The Plugin Asset class.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    abstract class Asset implements \DiviSquad\Base\Factories\PluginAsset\AssetInterface
    {
    }
    /**
     * The Plugin Asset class.
     *
     * @package DiviSquad
     * @since   3.0.0
     * @deprecated 3.1.7
     */
    abstract class PluginAsset extends \DiviSquad\Base\Factories\PluginAsset\Asset
    {
    }
    /**
     * The Asset Interface.
     *
     * @package DiviSquad
     * @since   3.0.0
     * @deprecated 3.1.7
     */
    interface PluginAssetInterface
    {
    }
}
namespace DiviSquad\Core {
    /**
     * Class Memory
     *
     * Manages plugin settings with caching capabilities to reduce database queries.
     *
     * @since   2.0.0
     * @package DiviSquad
     */
    class Memory
    {
        /**
         * Stored option data.
         *
         * @since 2.0.0
         * @var array
         */
        private array $data = array();
        /**
         * WordPress option name.
         *
         * @since 2.0.0
         * @var string
         */
        private string $option_name;
        /**
         * Cache group name.
         *
         * @since 2.0.0
         * @var string
         */
        private string $cache_group;
        /**
         * Data modification status.
         *
         * @since 2.0.0
         * @var bool
         */
        private bool $is_modified = false;
        /**
         * Batch operations queue.
         *
         * @since 2.0.0
         * @var array
         */
        private array $batch_queue = array();
        /**
         * Initialize the Memory class.
         *
         * @since 2.0.0
         * @param string $prefix Optional. Plugin prefix for option naming. Default 'divi-squad'.
         */
        public function __construct(string $prefix = 'divi-squad')
        {
        }
        /**
         * Initialize data from cache or database.
         *
         * @since 2.0.0
         * @return void
         */
        private function load_data_from_storage() : void
        {
        }
        /**
         * Migrate legacy options if they exist.
         *
         * @since 3.2.0
         *
         * @return void
         */
        private function maybe_migrate_legacy_options() : void
        {
        }
        /**
         * Get all stored options.
         *
         * @since 2.0.0
         *
         * @return array
         */
        public function get_all() : array
        {
        }
        /**
         * Get the count of stored options.
         *
         * @since 2.0.0
         *
         * @return int
         */
        public function count() : int
        {
        }
        /**
         * Check if a field exists.
         *
         * @since 2.0.0
         *
         * @param string $field Field key to check.
         *
         * @return bool
         */
        public function has(string $field) : bool
        {
        }
        /**
         * Get a field value.
         *
         * @since 2.0.0
         *
         * @param string $field   Field key.
         * @param mixed  $default Optional. Default value if field doesn't exist.
         *
         * @return mixed
         */
        public function get(string $field, $default = null)
        {
        }
        /**
         * Set a field value.
         *
         * @since 2.0.0
         *
         * @param string $field Field key.
         * @param mixed  $value Field value.
         *
         * @return void
         */
        public function set(string $field, $value) : void
        {
        }
        /**
         * Update an existing field.
         *
         * @since 2.0.0
         *
         * @param string $field Field key.
         * @param mixed  $value New value.
         *
         * @return bool True if updated, false if field doesn't exist.
         */
        public function update(string $field, $value) : bool
        {
        }
        /**
         * Delete a field.
         *
         * @since 2.0.0
         *
         * @param string $field Field key.
         *
         * @return bool True if deleted, false if field doesn't exist.
         */
        public function delete(string $field) : bool
        {
        }
        /**
         * Add a value to an array field.
         *
         * @since 2.0.0
         *
         * @param string $field Field key.
         * @param mixed  $value Value to add.
         *
         * @return void
         * @throws Exception If field is not an array.
         */
        public function add_to_array(string $field, $value) : void
        {
        }
        /**
         * Remove a value from an array field.
         *
         * @since 2.0.0
         *
         * @param string $field Field key.
         * @param mixed  $value Value to remove.
         *
         * @return bool True if value was removed.
         * @throws Exception If field is not an array.
         */
        public function remove_from_array(string $field, $value) : bool
        {
        }
        /**
         * Queue a batch operation.
         *
         * @since 2.0.0
         * @param string $operation Operation type ('set', 'update', 'delete').
         * @param string $field Field key.
         * @param mixed  $value Optional. Value for set/update operations.
         * @return void
         */
        public function queue_batch_operation(string $operation, string $field, $value = null) : void
        {
        }
        /**
         * Execute all queued batch operations.
         *
         * @since 2.0.0
         * @return void
         */
        public function execute_batch() : void
        {
        }
        /**
         * Sync modified data to the database.
         *
         * @since 2.0.0
         * @return void
         */
        public function sync_data() : void
        {
        }
        /**
         * Clear all stored data.
         *
         * @since 2.0.0
         * @return void
         */
        public function clear_all() : void
        {
        }
    }
}
namespace DiviSquad\Base {
    /**
     * Memory class for managing Divi Squad plugin settings.
     *
     * This class provides a caching layer for WordPress options,
     * improving performance by reducing database queries and adding
     * advanced features for option management.
     *
     * @package DiviSquad\Base
     * @since 2.0.0
     * @deprecated 3.2.0 Use `DiviSquad\Core\Memory` instead.
     */
    class Memory extends \DiviSquad\Core\Memory
    {
    }
}
namespace DiviSquad\Integrations {
    /**
     * Admin Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class Admin
    {
        /**
         * Get the instance of the current class.
         *
         * @return void
         * @deprecated 3.0.0 marked as deprecated.
         */
        public static function load()
        {
        }
        /**
         * Fires when enqueuing scripts for all admin pages.
         *
         * @param \DiviSquad\Admin\Assets $admin_asset The instance of Admin asset class.
         *
         * @return void
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function register_admin_scripts($admin_asset)
        {
        }
        /**
         * Include all actions links for the plugin.
         *
         * @param SquadAdmin\Plugin\ActionLinks $action_links The instance of Plugin action links class.
         *
         * @return void
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function register_plugin_action_links($action_links)
        {
        }
        /**
         * Include all row metas for the plugin.
         *
         * @param SquadAdmin\Plugin\RowMeta $row_meta The instance of the Plugin row meta.
         *
         * @return void
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function register_plugin_row_meta($row_meta)
        {
        }
        /**
         * Include admin footer text for the plugin.
         *
         * @param SquadAdmin\Plugin\AdminFooterText $footer_text The instance of the Plugin row meta.
         *
         * @return void
         * @since 1.2.0
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function register_plugin_footer_text($footer_text)
        {
        }
        /**
         * Include update footer text for the plugin at admin area.
         *
         * @param SquadAdmin\Plugin\AdminFooterText $footer_text The instance of the Plugin row meta.
         *
         * @return void
         * @since 1.4.8
         * @deprecated 3.0.0 marked as deprecated.
         */
        protected static function register_update_footer_text($footer_text)
        {
        }
    }
}
namespace DiviSquad\Core\Traits {
    /**
     * Singleton trait.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    trait Singleton
    {
        /**
         * The instance of the current class.
         *
         * @var self|null
         */
        private static $instance = null;
        /**
         * Get the instance of the current class.
         *
         * @return self
         */
        public static function get_instance()
        {
        }
        /**
         * Create an instance of the current class.
         *
         * @return self
         */
        private static function create_instance()
        {
        }
        /**
         * Initialize the instance.
         */
        protected function initialize()
        {
        }
        /**
         * Serializing instances of this class is forbidden.
         *
         * @access public
         * @since  1.0.0
         */
        public function __wakeup()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @access private
         * @since  1.0.0
         */
        private function __clone()
        {
        }
    }
}
namespace DiviSquad\Integrations {
    /**
     * Define integration helper functionalities for this plugin.
     *
     * This class provides methods for version compatibility checks,
     * setting plugin options, and displaying admin notices.
     *
     * @since   1.0.0
     * @package DiviSquad
     * @deprecated 3.2.0 marked as deprecated.
     */
    class WP
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * The plugin options.
         *
         * @var array
         */
        protected $options;
        /**
         * Checks compatibility with the current version.
         *
         * @since 1.2.3
         *
         * @param string $required       Minimum required version.
         * @param string $target_version The current version.
         *
         * @return bool True if a required version is compatible or empty, false if not.
         */
        public static function version_compare(string $required, string $target_version) : bool
        {
        }
        /**
         * Checks if the target version is a pre-release version.
         *
         * @since 1.3.0
         *
         * @param string $version The version to check.
         *
         * @return bool True if the version is a pre-release, false otherwise.
         */
        public static function version_pre(string $version) : bool
        {
        }
        /**
         * Compares two versions and checks if the first version is older than the second.
         *
         * @since 1.4.0
         *
         * @param string $version         The version to check.
         * @param string $compare_version The version to compare against.
         *
         * @return bool True if $version is older than $compare_version, false otherwise.
         */
        public static function is_older_version(string $version, string $compare_version) : bool
        {
        }
        /**
         * Set the plugin options.
         *
         * @param array $options The plugin options.
         */
        public function set_options(array $options)
        {
        }
        /**
         * Initializes the plugin and checks for compatibility.
         *
         * @return bool True if all compatibility checks pass, false otherwise.
         */
        public function let_the_journey_start() : bool
        {
        }
        /**
         * Checks PHP version compatibility.
         *
         * @return bool True if PHP version is compatible, false otherwise.
         */
        private function check_php_compatibility() : bool
        {
        }
        /**
         * Checks WordPress version compatibility.
         *
         * @return bool True if WordPress version is compatible, false otherwise.
         */
        private function check_wordpress_compatibility() : bool
        {
        }
        /**
         * Checks Divi compatibility.
         *
         * @return bool True if Divi is compatible, false otherwise.
         */
        private function check_divi_compatibility() : bool
        {
        }
        /**
         * Admin notice for the required PHP version.
         */
        public function required_php_version_missing_notice()
        {
        }
        /**
         * Admin notice for the required WordPress version.
         */
        public function required_wordpress_version_missing_notice()
        {
        }
        /**
         * Admin notice for required Divi version.
         */
        public function required_divi_version_missing_notice()
        {
        }
        /**
         * Admin notice for required Divi Builder version.
         */
        public function required_divi_builder_version_missing_notice()
        {
        }
        /**
         * Admin notice for Divi Builder if missing.
         */
        public function divi_builder_missing_notice()
        {
        }
        /**
         * Get a list of all the allowed HTML tags.
         *
         * @param string $level Allowed levels are basic and intermediate.
         *
         * @return array
         */
        public function get_allowed_html_tags(string $level = 'basic') : array
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * Assets Class
     *
     * @package     DiviSquad
     * @since       1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class Assets
    {
        /**
         * Enqueue scripts for frontend.
         *
         * @return void
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Enqueue scripts for builder.
         *
         * @return void
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function enqueue_scripts_vb()
        {
        }
        /**
         * Load requires asset extra in the visual builder by default.
         *
         * @param string $output Exist output.
         *
         * @return string
         * @deprecated 3.0.0 marked as deprecated.
         */
        public function wp_localize_script_data($output)
        {
        }
    }
}
namespace DiviSquad\Base\Factories {
    /**
     * Feature Management class
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    abstract class SquadFeatures
    {
        /**
         * Get the type of Divi Builder, default is: D4. Available opinions are: D4, D5.
         *
         * @var string
         */
        protected string $builder_type = 'D4';
        /**
         * Retrieve the list of registered.
         *
         * @return array[]
         */
        public abstract function get_registered_list();
        /**
         * Retrieve the list of inactive registered.
         *
         * @return array
         */
        public abstract function get_inactive_registries() : array;
        /**
         * Retrieve the list of default active registered.
         *
         * @return array
         */
        public abstract function get_default_registries() : array;
        /**
         * Retrieve details by the registered name.
         *
         * @param array  $registries The array list of available registries.
         * @param string $name       The name of the current registry.
         *
         * @return array
         */
        protected function get_details_by_name(array $registries, string $name) : array
        {
        }
        /**
         * Retrieve the filtered list of registered.
         *
         * @param array         $registered The list of registered.
         * @param callable|null $callback   The callback function to filter the current registriy.
         *
         * @return array
         */
        protected function get_filtered_registries(array $registered, callable $callback) : array
        {
        }
        /**
         * Verify third party plugin requirements for current registry.
         *
         * @param array $registry_info  Current registry information.
         * @param array $active_plugins Active plugin lists from current installation.
         *
         * @return bool
         */
        protected function verify_requirements(array $registry_info, array $active_plugins) : bool
        {
        }
        /**
         * Load the module class.
         *
         * @param array       $registered The available modules list.
         * @param array       $defaults   The default activated registries list.
         * @param mixed       $activate   The user-defined activated registries list.
         * @param array       $inactivate The user-defined inactivated registries list.
         * @param string|null $version    Current version of the plugin.
         *
         * @return array
         */
        protected function get_verified_registries(array $registered, array $defaults, $activate, array $inactivate, ?string $version) : array
        {
        }
    }
}
namespace DiviSquad\Managers\Features {
    /**
     * Extension Manager class
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Extensions extends \DiviSquad\Base\Factories\SquadFeatures
    {
        /**
         * Get available extensions.
         *
         * @return array[]
         */
        public function get_registered_list()
        {
        }
        /**
         * Get default active extensions.
         *
         * @return array
         */
        public function get_default_registries() : array
        {
        }
        /**
         * Get inactive extensions.
         *
         * @return array
         */
        public function get_inactive_registries() : array
        {
        }
        /**
         * Load enabled extensions
         *
         * @param string $path The defined directory.
         *
         * @return void
         */
        public function load_extensions(string $path)
        {
        }
        /**
         * Load enabled extensions
         *
         * @param string $path   The defined directory.
         * @param Memory $memory The instance of Memory class.
         *
         * @return void
         */
        protected function load_extensions_files(string $path, \DiviSquad\Core\Memory $memory)
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * Extension Manager class
     *
     * @package     DiviSquad
     * @since       1.0.0
     * @deprecated  3.0.0 marked as deprecated.
     */
    class Extensions extends \DiviSquad\Managers\Features\Extensions
    {
    }
}
namespace DiviSquad\Managers\Features {
    /**
     * Module Manager class
     *
     * @since   1.0.0
     * @package DiviSquad
     */
    class Modules extends \DiviSquad\Base\Factories\SquadFeatures
    {
        /**
         * Get all modules including extra modules.
         *
         * @return array[]
         */
        public function get_all_modules_with_locked() : array
        {
        }
        /**
         *  Get available modules.
         *
         * @return array[]
         */
        public function get_registered_list()
        {
        }
        /**
         *  Get inactive modules.
         *
         * @return array
         */
        public function get_inactive_registries() : array
        {
        }
        /**
         * Get active modules.
         *
         * @return array
         */
        public function get_active_registries() : array
        {
        }
        /**
         * Get active modules.
         *
         * @return array
         */
        public function get_active_modules() : array
        {
        }
        /**
         * Get default modules.
         *
         * @param string $module_name The module name.
         *
         * @return bool
         */
        public function is_module_active(string $module_name) : bool
        {
        }
        /**
         * Check if the module is active by class name.
         *
         * @param string $module_classname The module class name.
         *
         * @return bool
         */
        public function is_module_active_by_classname(string $module_classname) : bool
        {
        }
        /**
         * Load enabled modules for Divi Builder from defined directory.
         *
         * @param string      $path            The defined directory.
         *
         * @return void
         */
        public function load_modules(string $path)
        {
        }
        /**
         * Load the module class.
         *
         * @param string      $path            The module class path.
         * @param Memory      $memory          The instance of Memory class.
         *
         * @return void
         */
        protected function load_module_files(string $path, \DiviSquad\Core\Memory $memory)
        {
        }
        /**
         * Filter list of modules with specific keys.
         *
         * @param array $input_array Running module configuration.
         *
         * @return array
         */
        public function custom_array_slice(array $input_array) : array
        {
        }
        /**
         *  Get default active modules.
         *
         * @return array
         */
        public function get_default_registries() : array
        {
        }
        /**
         * Check the current module type.
         *
         * @param array $module The array of current module.
         *
         * @return bool
         */
        protected function verify_module_type(array $module) : bool
        {
        }
        /**
         * Verify the requirements of the module.
         *
         * @param array       $activated_module The module.
         * @param string      $module_key       The module name key.
         *
         * @return void
         */
        private function load_module_if_exists(array $activated_module, string $module_key)
        {
        }
        /**
         * Load the module class.
         *
         * @since 2.1.2
         *
         * @param array   $module          The module.
         *
         * @param string  $module_key      The module specification key.
         *
         * @return void
         */
        protected function require_module_class(string $module_key = 'name', array $module = array())
        {
        }
        /**
         * Load the module class from path.
         *
         * @param string      $path            The module class path.
         * @param string      $module          The module name.
         *
         * @return void
         */
        protected function require_module_path(string $path, string $module)
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * Module Manager class
     *
     * @package     DiviSquad
     * @since       1.0.0
     * @deprecated  3.0.0 marked as deprecated.
     */
    class Modules extends \DiviSquad\Managers\Features\Modules
    {
    }
}
namespace DiviSquad\Modules {
    /**
     * Post-Grid Child Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class PostGridChild extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * The list of element types
         *
         * @var array
         */
        protected $element_types = array();
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 3.1.0
         */
        public function get_custom_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Generate styles.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        private function squad_generate_all_styles($attrs)
        {
        }
        /**
         * Render post name icon.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function squad_generate_element_title_font_icon_styles($attrs)
        {
        }
        /**
         * Render all styles for icon.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function squad_generate_all_icon_styles($attrs)
        {
        }
    }
}
namespace DiviSquad\Modules\PostGridChild {
    /**
     * Post-Grid Child Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     * @deprecated 3.0.0 marked as deprecated.
     */
    class PostGridChild extends \DiviSquad\Modules\PostGridChild
    {
    }
}
namespace DiviSquad\Core\Traits {
    /**
     * The Filesystem trait
     *
     * @package DiviSquad
     * @since   3.2.0
     */
    trait UseWPFilesystem
    {
        /**
         * Get the filesystem.
         *
         * @access protected
         * @return WP_Filesystem_Base
         */
        protected function get_wp_fs() : \WP_Filesystem_Base
        {
        }
    }
}
namespace DiviSquad\Utils\Media {
    /**
     * The Filesystem class.
     *
     * @since      3.0.0
     * @package    DiviSquad
     * @deprecated 3.2.0 Use DiviSquad\Core\Traits\UseWPFilesystem instead
     */
    class Filesystem
    {
        use \DiviSquad\Core\Traits\UseWPFilesystem;
    }
}
namespace DiviSquad\Core\Supports\Polyfills {
    /**
     * String Helper class.
     *
     * @package DiviSquad
     * @since   1.2.3
     */
    class Str
    {
        /**
         * Polyfill for `str_starts_with()` function added in PHP 8.0.
         *
         * Performs a case-sensitive check indicating if
         * the haystack begins with a needle.
         *
         * @param String $haystack The string to search in.
         * @param String $needle   The substring to search for in the `$haystack`.
         *
         * @return bool True if `$haystack` starts with `$needle`, otherwise false.
         */
        public static function starts_with(string $haystack, string $needle) : bool
        {
        }
        /**
         * Polyfill for `str_ends_with()` function added in PHP 8.0.
         *
         * Performs a case-sensitive check indicating if
         * the haystack ends with a needle.
         *
         * @param string $haystack The string to search in.
         * @param string $needle   The substring to search for in the `$haystack`.
         *
         * @return bool True if `$haystack` ends with `$needle`, otherwise false.
         */
        public static function ends_with(string $haystack, string $needle) : bool
        {
        }
        /**
         * Polyfill for `str_contains()` function added in PHP 8.0.
         *
         * Performs a case-sensitive check indicating if a needle is contained in a haystack.
         *
         * @param string $haystack The string to search in.
         * @param string $needle   The substring to search for in the `$haystack`.
         *
         * @return bool True if `$needle` is in `$haystack`, otherwise false.
         */
        public static function contains(string $haystack, string $needle) : bool
        {
        }
        /**
         * Polyfill for `str_word_count()` function.
         *
         * Performs a case-sensitive check indicating if a needle is contained in a haystack.
         *
         * @param string  $string_content The string.
         * @param int     $format         Specify the return value of this function, options are: 0, 1, 2.
         * @param ?string $characters     The substring to search for in the `$haystack`.
         *
         * @return array|int True if `$needle` is in `$haystack`, otherwise false.
         */
        public static function word_count(string $string_content, int $format = 0, string $characters = null)
        {
        }
        /**
         * Remove all `\t` and `\n` from the string content.
         *
         * @since SQUAD_MODULES_SINCE
         *
         * @param string $string_content The string content to remove new lines and tabs.
         *
         * @return array|string|string[]
         */
        public static function remove_new_lines_and_tabs(string $string_content)
        {
        }
    }
}
namespace DiviSquad\Utils\Polyfills {
    /**
     * String Helper class.
     *
     * @since      1.2.3
     * @package    DiviSquad
     * @deprecated 3.2.0 Use DiviSquad\Core\Supports\Polyfills\Str instead
     */
    class Str extends \DiviSquad\Core\Supports\Polyfills\Str
    {
    }
}
namespace DiviSquad\Utils {
    /**
     * Singleton trait.
     *
     * @since      1.0.0
     * @package    DiviSquad
     * @deprecated 3.2.0 Use DiviSquad\Core\Traits\Singleton instead
     */
    trait Singleton
    {
        /**
         * The instance of the current class.
         *
         * @var self|null
         */
        private static $instance = null;
        /**
         * Get the instance of the current class.
         *
         * @return self
         */
        public static function get_instance()
        {
        }
        /**
         * Create an instance of the current class.
         *
         * @return self
         */
        private static function create_instance()
        {
        }
        /**
         * Initialize the instance.
         */
        protected function initialize()
        {
        }
        /**
         * Serializing instances of this class is forbidden.
         *
         * @access public
         * @since  1.0.0
         */
        public function __wakeup()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @access private
         * @since  1.0.0
         */
        private function __clone()
        {
        }
    }
}
namespace DiviSquad\Base {
    /**
     * The Base class for Core
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    abstract class Core
    {
        /**
         * The plugin admin menu slug.
         *
         * @var string
         */
        protected string $admin_menu_slug = '';
        /**
         * The plugin options.
         *
         * @var array
         */
        protected array $options = array();
        /**
         * The Plugin name.
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected string $name;
        /**
         * The Plugin Text Domain.
         *
         * @var string
         */
        protected string $textdomain;
        /**
         * The Plugin Version.
         *
         * @since 1.4.5
         *
         * @var string
         */
        protected string $version;
        /**
         * The plugin option prefix
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected string $opt_prefix;
        /**
         * The Script handle the text domain will be attached to.
         *
         * @var string
         */
        protected string $localize_handle;
        /**
         * The full file path to the directory containing translation files.
         *
         * @var string
         */
        protected string $localize_path;
        /**
         * List of containers
         *
         * @var array
         */
        protected array $container = array();
        /**
         * Get the plugin options.
         *
         * @return array
         */
        public abstract function get_options();
        /**
         * Get the plugin version.
         *
         * @return string
         */
        public abstract function get_version();
        /**
         * Get the plugin version (doted).
         *
         * @return string
         */
        public abstract function get_version_dot();
        /**
         * Get the plugin name.
         *
         * @return string
         */
        public function get_name() : string
        {
        }
        /**
         * Get the plugin text domain.
         *
         * @return string
         */
        public function get_textdomain() : string
        {
        }
        /**
         * The full file path to the directory containing translation files.
         *
         * @return string
         */
        public function get_localize_path() : string
        {
        }
        /**
         * Get the plugin admin menu slug.
         *
         * @return string
         */
        public function get_admin_menu_slug() : string
        {
        }
        public function get_admin_menu_position()
        {
        }
        /**
         * Get the plugin option prefix.
         *
         * @return string
         */
        public function get_option_prefix() : string
        {
        }
        /**
         * Load the local text domain.
         *
         * @return void
         */
        public function load_text_domain()
        {
        }
        /**
         * Load css variables in the admin panel.
         *
         * @return void
         */
        public function wp_hook_enqueue_admin_scripts()
        {
        }
        /**
         * The admin interface asset and others.
         *
         * @return void
         */
        protected function load_global_assets()
        {
        }
        /**
         * Set the localize data.
         *
         * @return void
         */
        public function localize_scripts_data()
        {
        }
        /**
         * Load css variables in the frontend.
         *
         * @return void
         */
        public function wp_hook_enqueue_scripts()
        {
        }
        /**
         * Load the localized data in the frontend and admin panel.
         *
         * @return void
         */
        public function wp_hook_enqueue_localize_data()
        {
        }
        /**
         * Localizes a script.
         *
         * Works only if the script has already been registered.
         *
         * @param string $object_name Name for the JavaScript object. Passed directly, so it should be qualified JS variable.
         * @param array  $l10n        The data itself. The data can be either a single or multidimensional array.
         *
         * @return string Localizes a script.
         */
        public function localize_script(string $object_name, array $l10n) : string
        {
        }
        /**
         * Resolve the plugin data.
         *
         * @param string $plugin_file Absolute path to the main plugin file.
         *
         * @return array
         * @throws \RuntimeException If the plugin file does not exist or the function cannot be included.
         */
        protected function get_plugin_data(string $plugin_file) : array
        {
        }
        /**
         * Set the plugin options.
         *
         * @param string $key The key to set.
         *
         * @return bool
         */
        public function __isset(string $key)
        {
        }
        /**
         * Set the plugin options.
         *
         * @param string $key The key to set.
         *
         * @return mixed
         */
        public function __get(string $key)
        {
        }
        /**
         * Set the plugin options.
         *
         * @param string $key   The key to set.
         * @param mixed  $value The value to set.
         *
         * @return void
         */
        public function __set(string $key, $value)
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Module {
    /**
     * Abstract FormStyler Class
     *
     * This class provides the base functionality for styling form elements
     * in the Divi Builder. It includes methods for generating fields, styles,
     * and handling transitions for various form components.
     *
     * @since   1.0.0
     * @package DiviSquad
     * @extends Module
     */
    abstract class FormStyler extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * CSS Selectors configuration
         *
         * @since 3.2.0
         * @var array
         */
        protected array $squad_css_selectors = array();
        /**
         * CSS selector for the form
         *
         * @since 3.2.0
         * @var string
         */
        protected string $form_selector;
        /**
         * CSS selector for form fields
         *
         * @since 3.2.0
         * @var string
         */
        protected string $field_selector;
        /**
         * CSS selector for the submit button
         *
         * @since 3.2.0
         * @var string
         */
        protected string $submit_button_selector;
        /**
         * CSS selector for error messages
         *
         * @since 3.2.0
         * @var string
         */
        protected string $error_message_selector;
        /**
         * CSS selector for success messages
         *
         * @since 3.2.0
         * @var string
         */
        protected string $success_message_selector;
        /**
         * Constructor for the FormStyler class.
         *
         * Initializes the parent constructor and sets up the selectors and hooks.
         *
         * @since  3.2.0
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * @since  3.2.0
         * @access public
         *
         * @return array Array of toggle settings.
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * Defines the advanced field configurations for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array An array of advanced field configurations.
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Get fields for the module.
         *
         * @since  1.0.0
         * @access public
         *
         * @return array Array of fields for the module.
         */
        public function get_fields() : array
        {
        }
        /**
         * Get custom CSS fields configuration.
         *
         * @since  3.2.0
         * @access public
         *
         * @return array Custom CSS fields configuration.
         */
        public function get_custom_css_fields_config() : array
        {
        }
        /**
         * Get transition fields CSS properties.
         *
         * @since  3.2.0
         * @access public
         *
         * @return array Array of transition fields CSS properties.
         */
        public function get_transition_fields_css_props() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return void
         */
        protected abstract function squad_init_selectors() : void;
        /**
         * Set up hooks for the FormStyler.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_setup_hooks() : void
        {
        }
        /**
         * Get a specific selector or group of selectors
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Get the form selector
         * $form_wrapper = $this->squad_get_css_selector('form.wrapper');
         *
         * // Get all field selectors
         * $field_selectors = $this->squad_get_css_selector('fields.all');
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $key Dot notation key for the selector
         *
         * @return string|array|null
         */
        protected function squad_get_css_selector(string $key)
        {
        }
        /**
         * Get a selector string
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Get the normal state form selector string
         * $form_wrapper = $this->squad_get_css_selector_string('form.wrapper');
         *
         * // Get the hover state for all field selectors
         * $field_selectors_hover = $this->squad_get_css_selector_string('fields.all', 'v1', 'hover');
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $key   Dot notation key for the selector
         * @param string $state Selector state (default: 'normal')
         *
         * @return string
         */
        protected function squad_get_css_selector_string(string $key, string $state = 'normal') : ?string
        {
        }
        /**
         * Get hover selector string
         *
         * @param string $key Dot notation key for the selector
         *
         * @return string
         */
        protected function squad_get_hover_selector_string(string $key) : ?string
        {
        }
        /**
         * Get hover selector string
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Get the hover selector for the submit button
         * $submit_button_hover = $this->get_hover_selector_string('submit_button.all');
         *
         * // Get the hover selector for form fields
         * $fields_hover = $this->get_hover_selector_string('fields.all');
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $selector The base selector.
         *
         * @return string
         */
        protected function squad_get_hover_selector(string $selector) : string
        {
        }
        /**
         * Update a specific selector
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Update the form selector
         * $this->squad_update_css_selector('form.wrapper', '%%order_class%% .new-form-wrapper');
         *
         * // Update field selectors with normal and hover states
         * $this->squad_update_css_selector('fields.all', [
         *     'normal' => '%%order_class%% .new-field',
         *     'hover' => '%%order_class%% .new-field:hover'
         * ]);
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string|array $value   New selector value
         * @param string       $version Selector version (default: 'v1')
         *
         * @param string       $key     Dot notation key for the selector
         */
        protected function squad_update_css_selector(string $key, $value, string $version = 'v1') : void
        {
        }
        /**
         * Add :hover pseudo-class to a single selector.
         *
         * @since  3.2.0
         * @access private
         *
         * @param string $selector A single CSS selector.
         *
         * @return string The selector with :hover added.
         */
        protected function squad_add_hover_to_selector(string $selector) : string
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get design fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of design fields.
         */
        protected function squad_get_design_fields() : array
        {
        }
        /**
         * Get advanced fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of advanced fields.
         */
        protected function squad_get_advanced_fields() : array
        {
        }
        /**
         * Get background fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of background fields.
         */
        protected function squad_get_background_fields() : array
        {
        }
        /**
         * Add a background field.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $label       Field label.
         * @param string $base_name   Base name for the field.
         * @param string $toggle_slug Toggle slug for the field.
         *
         * @return array Background field configuration.
         */
        protected function squad_add_background_field(string $label, string $base_name, string $toggle_slug) : array
        {
        }
        /**
         * Get button fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields_after_background List of fields after the background fields
         * @param array $fields_before_margin    List of fields before the margin fields.
         *
         * @return array Array of button fields.
         */
        protected function squad_get_button_fields(array $fields_after_background, array $fields_before_margin) : array
        {
        }
        /**
         * Get additional design fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of checkbox and radio fields.
         */
        protected function squad_get_additional_design_fields() : array
        {
        }
        /**
         * Get custom spacing fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of custom spacing fields.
         */
        protected function squad_get_custom_spacing_fields() : array
        {
        }
        /**
         * Get margin and padding fields for a specific element.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $prefix Element prefix.
         * @param string $label  Element label.
         *
         * @return array Margin and padding fields.
         */
        protected function squad_get_margin_padding_fields(string $prefix, string $label) : array
        {
        }
        /**
         * Add a custom spacing field.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $label    Field label.
         * @param string $type     Field type (custom_margin or custom_padding).
         * @param array  $settings Additional field settings.
         *
         * @return array Custom spacing field configuration.
         */
        protected function squad_add_custom_spacing_field(string $label, string $type, array $settings) : array
        {
        }
        /**
         * Get additional custom fields for the module.
         *
         * This method can be overridden in child classes to add custom fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of additional custom fields.
         */
        protected function squad_get_customizable_design_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * This method can be overridden in child classes to specify removable fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of removable fields.
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Add transition fields to the provided fields array.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add transition fields to.
         *
         * @return void
         */
        protected function squad_add_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add wrapper transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add wrapper transition fields to.
         *
         * @return void
         */
        protected function squad_add_wrapper_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add field transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add field transition fields to.
         *
         * @return void
         */
        protected function squad_add_field_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add error message transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add error message transition fields to.
         *
         * @return void
         */
        protected function squad_add_error_message_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add success message transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add success message transition fields to.
         *
         * @return void
         */
        protected function squad_add_success_message_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add button transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add button transition fields to.
         *
         * @return void
         */
        protected function squad_add_button_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add checkbox and radio transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add checkbox and radio transition fields to.
         *
         * @return void
         */
        protected function squad_add_checkbox_radio_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add generic transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add generic transition fields to.
         *
         * @return void
         */
        protected function squad_add_generic_transition_fields(array &$fields) : void
        {
        }
        /**
         * Generate all styles for the module.
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Generate all styles for the current module
         * $this->squad_generate_all_styles($this->props);
         *
         * // Generate styles with custom attributes
         * $custom_attrs = array_merge($this->props, ['custom_field' => 'value']);
         * $this->squad_generate_all_styles($custom_attrs);
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        protected function squad_generate_all_styles(array $attrs) : void
        {
        }
        /**
         * Get module stylesheet selectors.
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Get all stylesheet selectors for the current module
         * $selectors = $this->squad_get_module_stylesheet_selectors($this->props);
         *
         * // Get selectors with custom attributes
         * $custom_attrs = array_merge($this->props, ['custom_field' => 'value']);
         * $custom_selectors = $this->squad_get_module_stylesheet_selectors($custom_attrs);
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $attrs List of attributes.
         *
         * @return array Array of stylesheet selectors.
         */
        protected function squad_get_module_stylesheet_selectors(array $attrs) : array
        {
        }
        /**
         * Add background options to the stylesheet selectors.
         *
         * This method populates the provided options array with background styling options
         * for various form elements.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $options Reference to the array of options to be populated with background options.
         */
        protected function squad_get_background_stylesheet_options(array &$options) : void
        {
        }
        /**
         * Get background option fields for various form elements.
         *
         * This method defines the selectors for applying background styles
         * to different components of the form, such as the wrapper, fields, buttons,
         * and message areas.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_background_stylesheet_option_fields() : array
        {
        }
        /**
         * Add checkbox and radio options to the stylesheet selectors.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $options Array of options to add checkbox and radio options to.
         *
         * @return void
         */
        protected function squad_add_checkbox_radio_stylesheet_options(array &$options) : void
        {
        }
        /**
         * Add button width option to the stylesheet selectors.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $options Array of options to add button width option to.
         * @param array $attrs   List of attributes.
         *
         * @return void
         */
        protected function squad_add_button_width_stylesheet_option(array &$options, array $attrs) : void
        {
        }
        /**
         * Add margin and padding options to the stylesheet selectors.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $options Array of options to add margin and padding options to.
         *
         * @return void
         */
        protected function squad_add_margin_padding_stylesheet_options(array &$options) : void
        {
        }
        /**
         * Get margin and padding option fields for various form elements.
         *
         * This method defines the selectors for applying margin and padding styles
         * to different components of the form, such as the wrapper, fields, buttons,
         * and message areas.
         *
         * @since  3.2.0
         * @access protected
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_margin_padding_stylesheet_option_fields() : array
        {
        }
        /**
         * Generate module styles.
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Generate styles for the current module
         * $selectors = $this->squad_get_module_stylesheet_selectors($this->props);
         * $this->squad_form_styler_generate_module_styles($this->props, $selectors);
         *
         * // Generate styles with custom attributes and selectors
         * $custom_attrs = array_merge($this->props, ['custom_field' => 'value']);
         * $custom_selectors = $this->squad_get_module_stylesheet_selectors($custom_attrs);
         * $this->squad_form_styler_generate_module_styles($custom_attrs, $custom_selectors);
         * ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $attrs   List of attributes.
         * @param array $options Control attributes.
         *
         * @return void
         */
        protected function squad_form_styler_generate_module_styles(array $attrs, array $options) : void
        {
        }
        /**
         * Generate background style.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array  $attrs      List of attributes.
         * @param string $option_key Option key.
         * @param array  $option     Option configuration.
         *
         * @return void
         */
        protected function squad_generate_background_style(array $attrs, string $option_key, array $option) : void
        {
        }
        /**
         * Generate default style.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $option_key Option key.
         * @param array  $option     Option configuration.
         *
         * @return void
         */
        protected function squad_generate_default_style(string $option_key, array $option) : void
        {
        }
        /**
         * Generate single style.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $option_key Option key.
         * @param array  $option     Option configuration.
         * @param string $data_type  Data type.
         *
         * @return void
         */
        protected function squad_generate_single_style(string $option_key, array $option, string $data_type) : void
        {
        }
        /**
         * Generate margin and padding style.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $option_key Option key.
         * @param array  $option     Option configuration.
         *
         * @return void
         */
        protected function squad_generate_margin_padding_style(string $option_key, array $option) : void
        {
        }
        /**
         * Remove pre-assigned fields from the fields array.
         *
         * Here is an inline example of how to use this method:
         * ```
         * // Remove specific fields from the fields array
         * $all_fields = $this->get_fields();
         * $fields_to_remove = ['field1', 'field2'];
         * $updated_fields = $this->squad_remove_pre_assigned_fields($all_fields, $fields_to_remove);
         *
         * // Remove fields based on a condition
         * $fields_to_remove = [];
         * foreach ($all_fields as $key => $field) {
         *     if (strpos($key, 'deprecated_') === 0) {
         *         $fields_to_remove[] = $key;
         *     }
         * }
         * $updated_fields = $this->squad_remove_pre_assigned_fields($all_fields, $fields_to_remove);
         *  ```
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $removals List of removable fields.
         *
         * @param array $fields   List of fields.
         *
         * @return array Updated fields array.
         */
        protected function squad_remove_pre_assigned_fields(array $fields, array $removals) : array
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder {
    /**
     * Builder DiviBackend Placeholder class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    abstract class Placeholder
    {
        /**
         *  Get The defaults data for module.
         *
         * @return array
         */
        public function get_modules_defaults() : array
        {
        }
        /**
         * Filters backend data passed to the Visual Builder.
         * This function is used to add static helpers whose content rarely changes.
         * eg: google fonts, module default, and so on.
         *
         * @param array $exists Exists definitions.
         *
         * @return array
         */
        public abstract function static_asset_definitions($exists = array());
        /**
         * Used to update the content of the cached definitions js file.
         *
         * @param string $content content.
         *
         * @return string
         */
        public abstract function asset_definitions($content);
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils {
    /**
     * Common trait.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    trait CommonTrait
    {
        /**
         * Decode json data from properties in module.
         *
         * @param string $html_content json data raw content from module.
         *
         * @return array
         */
        public static function decode_json_data(string $html_content) : array
        {
        }
        /**
         * Collect actual props from child module with escaping raw html.
         *
         * @param string $content The raw content form child element.
         *
         * @return string
         */
        public static function collect_raw_props(string $content) : string
        {
        }
        /**
         * Collect actual props from child module with escaping raw html.
         *
         * @param string $content The raw content form child element.
         *
         * @return array
         * @throws \RuntimeException When json error found.
         */
        public static function collect_child_json_props(string $content) : array
        {
        }
        /**
         * Collect actual props from child module with escaping raw html.
         *
         * @param string $content The raw content form child element.
         *
         * @return string
         */
        public static function json_format_raw_props(string $content) : string
        {
        }
        /**
         * Collect all modules from Divi Builder.
         *
         * @param array $modules_array  All modules array..
         * @param array $allowed_prefix The allowed prefix list.
         *
         * @return array
         */
        public static function get_all_modules(array $modules_array, array $allowed_prefix = array()) : array
        {
        }
        /**
         * Clean order class name from the class list for current module.
         *
         * @param array  $classnames All CSS classes name the module has.
         * @param string $slug       Utils slug.
         *
         * @return string[]
         */
        public static function clean_order_class(array $classnames, string $slug) : array
        {
        }
        /**
         * Get margin and padding selectors for main and hover
         *
         * @param string $main_css_element Main css selector of element.
         *
         * @return array
         */
        public static function selectors_margin_padding(string $main_css_element) : array
        {
        }
        /**
         * Get max_width selectors for main and hover
         *
         * @param string $main_css_element Main css selector of an element.
         *
         * @return array[]
         */
        public static function selectors_max_width(string $main_css_element) : array
        {
        }
        /**
         * Get default selectors for main and hover
         *
         * @param string $main_css_element Main css selector of element.
         *
         * @return array[]
         */
        public static function selectors_default(string $main_css_element) : array
        {
        }
        /**
         * Get background selectors for main and hover
         *
         * @param string $main_css_element Main css selector of an element.
         *
         * @return array[]
         */
        public static function selectors_background(string $main_css_element) : array
        {
        }
        /**
         * Convert field name into css property name.
         *
         * @param string $field Field name.
         *
         * @return string|string[]
         */
        public static function field_to_css_prop(string $field)
        {
        }
    }
    /**
     * Fields class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    trait FieldsTrait
    {
        /**
         * Get HTML tag elements for text item.
         *
         * @return array<string, string>
         */
        public static function get_html_tag_elements() : array
        {
        }
        /**
         * Default fields for Heading toggles.
         *
         * @param string $field_label The heading toggle label name.
         * @param int    $priority    The toggle priority, default is 55.
         *
         * @return array
         */
        public static function get_heading_toggles(string $field_label, int $priority = 55) : array
        {
        }
        /**
         * Get heading elements for toggles.
         *
         * @return string[][]
         */
        public static function get_heading_elements() : array
        {
        }
        /**
         * Get Block elements for toggles.
         *
         * @return string[][]
         */
        public static function get_block_elements() : array
        {
        }
        /**
         * Add text clip settings.
         *
         * @param array $options The options for text clip fields.
         *
         * @return array
         */
        public static function get_text_clip_fields(array $options = array()) : array
        {
        }
        /**
         * Add Z Index fields for element.
         *
         * @param array $options The options for z index fields.
         *
         * @return array
         */
        public static function add_z_index_field(array $options = array()) : array
        {
        }
        /**
         *  Get general fields.
         *
         * @return array[]
         */
        public static function get_general_fields() : array
        {
        }
        /**
         *  Add button fields.
         *
         * @param array $options The options for button fields.
         *
         * @return array
         */
        public function get_button_fields(array $options = array()) : array
        {
        }
        /**
         *  Add button associated fields.
         *
         * @param array $options The options for button fields.
         *
         * @return array
         */
        public function get_button_associated_fields(array $options = array()) : array
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Fields {
    /**
     * Field Compatibility class
     *
     * @package DiviSquad
     * @author  The WP Squad <support@squadmodules.com>
     * @since   1.0.0
     */
    trait CompatibilityTrait
    {
        /**
         * Fix border transition issues.
         *
         * @param array  $fields   The defined fields list.
         * @param string $slug     The slug of the current module.
         * @param string $selector The css selector.
         *
         * @return array
         */
        public static function fix_border_transition(array &$fields, string $slug, string $selector) : array
        {
        }
        /**
         * Fix font style transition issues.
         *
         * Take all the attributes from divi advanced 'fonts' field and set the transition with given selector.
         *
         * @param array  $fields   The defined fields list.
         * @param string $slug     The slug of the current module.
         * @param string $selector The css selector.
         *
         * @return array $fields
         */
        public static function fix_fonts_transition(array &$fields, string $slug, string $selector) : array
        {
        }
        /**
         * Fix box-shadow transition issues.
         *
         * @param array  $fields   The defined fields list.
         * @param string $slug     The slug of the current module.
         * @param string $selector The css selector.
         *
         * @return array
         */
        public static function fix_box_shadow_transition(array &$fields, string $slug, string $selector) : array
        {
        }
    }
    /**
     * Field Definition Trait.
     *
     * This trait provides utility methods for creating standardized field definitions
     * used across Divi Builder modules.
     *
     * @since   1.0.0
     * @package DiviSquad
     */
    trait DefinitionTrait
    {
        /**
         * Adds a filter field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label         The label for the filter.
         * @param string $tab_slug      The tab slug under which the filter is grouped.
         * @param string $toggle_slug   The toggle slug for the specific setting group.
         * @param array  $css_selectors The CSS selectors for targeting the element.
         * @param array  $depends_on    Dependencies that determine when the filter is active.
         * @param array  $show_if_not   Conditions under which the filter should not be shown.
         *
         * @return array The filter configuration array.
         */
        public static function add_filters_field(string $label, string $tab_slug, string $toggle_slug, array $css_selectors, array $depends_on = array(), array $show_if_not = array()) : array
        {
        }
        /**
         * Adds a border field configuration for Divi modules.
         *
         * @since 3.2.0
         *
         * @param string $label The label for the border field.
         * @param array  $args  Optional. An array of arguments to customize the field.
         *
         * @return array Configured border field array for use in Divi modules.
         */
        public static function add_border_field(string $label, array $args = array()) : array
        {
        }
        /**
         * Adds a box shadow field configuration for Divi modules.
         *
         * @since 1.0.0
         * @since 3.2.0 Improved flexibility and alignment with Divi standards.
         *
         * @param string $label The label for the box shadow field.
         * @param array  $args  Optional. An array of arguments to customize the field.
         *
         * @return array Configured box shadow field array for use in Divi modules.
         */
        public static function add_box_shadow_field(string $label, array $args = array()) : array
        {
        }
        /**
         * Adds a yes/no field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The yes/no field configuration array.
         */
        public static function add_yes_no_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds a color field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The color field configuration array.
         */
        public static function add_color_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds a select box field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The select box field configuration array.
         */
        public static function add_select_box_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds a placement field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The placement field configuration array.
         */
        public static function add_placement_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds an alignment field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The alignment field configuration array.
         */
        public static function add_alignment_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds transition fields configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param array $options Additional options for the transition fields.
         *
         * @return array The transition fields configuration array.
         */
        public static function add_transition_fields(array $options = array()) : array
        {
        }
        /**
         * Adds a range field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         * @param array  $conditions Additional conditions for the field.
         *
         * @return array The range field configuration array.
         */
        public static function add_range_field(string $label, array $properties = array(), array $conditions = array()) : array
        {
        }
        /**
         * Adds a font field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The font field configuration array.
         */
        public static function add_font_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds a margin and padding field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param string $label      The field label.
         * @param array  $properties Additional properties for the field.
         *
         * @return array The margin and padding field configuration array.
         */
        public static function add_margin_padding_field(string $label, array $properties = array()) : array
        {
        }
        /**
         * Adds a background field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param array $properties Additional properties for the field.
         *
         * @return array The background field configuration array.
         */
        public function add_background_field(array $properties = array()) : array
        {
        }
        /**
         * Gets background field options for Divi modules.
         *
         * @since 1.0.0
         *
         * @param array $properties Additional properties for the field.
         *
         * @return array Background field options.
         */
        public static function get_background_field_options(array $properties = array()) : array
        {
        }
        /**
         * Adds all background fields for Divi modules.
         *
         * @since 1.0.0
         *
         * @param array $properties        Additional properties for the field.
         * @param array $background_fields The additional background fields for the current field.
         *
         * @return array Complete background field configuration.
         */
        protected function add_background_fields(array $properties = array(), array $background_fields = array()) : array
        {
        }
        /**
         * Adds a background gradient field configuration for Divi modules.
         *
         * @since 1.0.0
         *
         * @param array $properties Additional properties for the field.
         *
         * @return array The background gradient field configuration array.
         */
        public function add_background_gradient_field(array $properties = array()) : array
        {
        }
    }
    /**
     * Field Processor class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    trait ProcessorTrait
    {
        /**
         * Process styles for width fields in the module.
         *
         * @since 1.0.0
         *
         * @param array $options Options of current width.
         *
         * @return void
         */
        public function generate_additional_styles(array $options = array())
        {
        }
        /**
         * Collect any props value from mapping values.
         *
         * @param array  $options           The option array data.
         * @param string $qualified_name    The current field name.
         * @param string $last_modified_key The last modified key.
         *
         * @return array
         */
        public function collect_prop_value_responsive(array $options, string $qualified_name, string $last_modified_key) : array
        {
        }
        /**
         * Process styles for responsive in the module.
         *
         * @param array $options The options property for processing styles.
         *
         * @return void
         */
        public function process_responsive_styles(array $options)
        {
        }
        /**
         * Set actual position for icon or image in show on hover effect for the current element with default, responsive and hover.
         *
         * @since 1.0.0
         *
         * @param array $options Options of current width.
         *
         * @return void
         */
        public function generate_show_icon_on_hover_styles(array $options = array())
        {
        }
        /**
         * Collect icon prop width event if responsive mode.
         *
         * @since 1.0.0
         *
         * @param array $options Options of current width.
         *
         * @param array $props   List of attributes.
         *
         * @return array
         */
        private static function get_icon_hover_effect_prop_width($props, array $options = array()) : array
        {
        }
        /**
         * Collect the value of any props for Icon on hover effect.
         *
         * @since 1.0.0
         *
         * @param array $options Options of current width.
         *
         * @param array $props   List of attributes.
         *
         * @return string
         */
        private static function hover_effect_generate_css(array $props, array $options = array()) : string
        {
        }
        /**
         * Collect any props value from mapping values.
         *
         * @param array  $options       The option array data.
         * @param string $current_value The current field value.
         *
         * @return mixed
         */
        public static function collect_prop_mapping_value(array $options, string $current_value)
        {
        }
        /**
         * Process styles for margin and padding fields in the module.
         *
         * @since 1.0.0
         *
         * @param array $options Options of current width.
         *
         * @return void
         */
        public function generate_margin_padding_styles(array $options = array())
        {
        }
        /**
         * Process Text Clip styles.
         *
         * @param array $options The additional options for processing text clip features.
         *
         * @return void
         */
        public function generate_text_clip_styles(array $options = array())
        {
        }
        /**
         * Process divider styles.
         *
         * @param array $options The additional options for processing divider features.
         *
         * @return void
         */
        public function generate_divider_styles(array $options = array())
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils {
    /**
     * Deprecated Methods And Properties Trait
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    trait DeprecationsTrait
    {
        /**
         * The default deprecated version.
         *
         * @var string
         */
        private string $deprecated_version = '3.1.0';
        /**
         * Array of deprecated properties.
         *
         * @var array
         */
        private array $deprecated_properties = array('squad_divider_defaults' => array('version' => '3.1.0', 'message' => 'Use the property $divider_defaults instead of.', 'value' => array('divider_style' => 'solid', 'divider_position' => 'bottom', 'divider_weight' => '2px')), 'squad_divider_show_options' => array('version' => '3.1.0', 'message' => 'Use the property $divider_show_options instead of.', 'value' => array('off' => 'No', 'on' => 'Yes')));
        /**
         * Array of deprecated methods.
         *
         * @var array
         */
        private array $deprecated_methods = array('get_hansel_and_gretel' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->breadcrumbs->get_hansel_and_gretel() instead of $this->squad_utils->get_hansel_and_gretel()'), 'get_divider_defaults' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_defaults() instead of $this->squad_utils->get_divider_defaults()'), 'get_divider_default' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_default() instead of $this->squad_utils->get_divider_default()'), 'get_divider_show_options' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_show_options() instead of $this->squad_utils->get_divider_show_options()'), 'initiate_the_divider_element' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->initiate_element() instead of $this->squad_utils->initiate_the_divider_element()'), 'get_divider_element_fields' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_fields() instead of $this->squad_utils->get_divider_element_fields()'), 'get_divider_field_options' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->divider->get_field_options() instead of $this->squad_utils->get_divider_field_options()'), 'get_mask_shape' => array('version' => '3.1.0', 'message' => 'Use the method $this->squad_utils->mask_shape->get_shape() instead of $this->squad_utils->get_mask_shape()'));
        /**
         * Magic method to handle deprecated property access.
         *
         * @param string $name The property name.
         *
         * @return mixed The value of the deprecated property.
         * @throws InvalidArgumentException|WP_Exception If the property does not exist.
         */
        public function __get(string $name)
        {
        }
        /**
         * Magic method to handle deprecated method calls.
         *
         * @param string $name      The method name.
         * @param array  $arguments The method arguments.
         *
         * @return mixed The result of the method call.
         * @throws InvalidArgumentException|WP_Exception If the method does not exist.
         */
        public function __call(string $name, array $arguments)
        {
        }
        /**
         * Trigger a deprecated warning.
         *
         * @param string $name    The name of the deprecated element.
         * @param string $version The version since deprecation.
         * @param string $message The deprecation message.
         * @param string $type    The type of the deprecated element ('property' or 'method').
         *
         * @return void
         * @throws WP_Exception If the error cannot be triggered.
         */
        private function trigger_deprecated_warning(string $name, string $version, string $message, string $type)
        {
        }
        /**
         * Handle calls to deprecated utility methods.
         *
         * @param string $name      The name of the deprecated method.
         * @param array  $arguments The arguments passed to the method.
         *
         * @return mixed The result of the method call.
         * @throws BadMethodCallException If the deprecated method is not implemented.
         */
        private function handle_deprecated_utility_method(string $name, array $arguments)
        {
        }
        /**
         * Set the default deprecated version.
         *
         * @param string $version The new deprecated version.
         *
         * @return void
         */
        public function set_deprecated_version(string $version)
        {
        }
        /**
         * Add a new deprecated property.
         *
         * @param string $name    The property name.
         * @param string $version The version since deprecation.
         * @param string $message The deprecation message.
         * @param mixed  $value   The default value of the deprecated property.
         *
         * @return void
         */
        public function add_deprecated_property(string $name, string $version, string $message, $value)
        {
        }
        /**
         * Add a new deprecated method.
         *
         * @param string $name    The method name.
         * @param string $version The version since deprecation.
         * @param string $message The deprecation message.
         *
         * @return void
         */
        public function add_deprecated_method(string $name, string $version, string $message)
        {
        }
    }
    /**
     * Utils Base class
     *
     * @package DiviSquad
     * @author  The WP Squad <support@squadmodules.com>
     * @since   2.0.0
     *
     * @property-read Utils\Elements\Divider     $divider     Divider Element utility.
     * @property-read Utils\Elements\Breadcrumbs $breadcrumbs Breadcrumbs Element utility.
     * @property-read Utils\Elements\MaskShape   $mask_shape  Mask Shape Element utility.
     */
    abstract class Base
    {
        use \DiviSquad\Base\DiviBuilder\Utils\CommonTrait;
        use \DiviSquad\Base\DiviBuilder\Utils\FieldsTrait;
        use \DiviSquad\Base\DiviBuilder\Utils\Fields\CompatibilityTrait;
        use \DiviSquad\Base\DiviBuilder\Utils\Fields\DefinitionTrait;
        use \DiviSquad\Base\DiviBuilder\Utils\Fields\ProcessorTrait;
        use \DiviSquad\Base\DiviBuilder\Utils\DeprecationsTrait;
        /**
         * The instance of Squad Module.
         *
         * @var Module
         */
        protected \DiviSquad\Base\DiviBuilder\Module $element;
        /**
         * Container for dynamic properties.
         *
         * @var array
         */
        protected array $container = array();
        /**
         * Utility class mapping.
         *
         * @var array
         */
        protected array $utility_class_map = array('divider' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Divider::class, 'breadcrumbs' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Breadcrumbs::class, 'mask_shape' => \DiviSquad\Base\DiviBuilder\Utils\Elements\MaskShape::class);
        /**
         * Initialize the Utils class.
         *
         * @param Module $element The module instance.
         */
        public function __construct($element = null)
        {
        }
        /**
         * Lazy load a utility.
         *
         * @param string $name The utility name.
         * @return mixed The utility instance.
         */
        protected function lazy_load_utility($name)
        {
        }
        /**
         * Get the dynamic property value.
         *
         * @param string $name The property name.
         *
         * @return mixed
         */
        public function __get(string $name)
        {
        }
        /**
         * Set the dynamic property value.
         *
         * @param string $name The property name.
         * @param mixed  $value The property value.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Check if a dynamic property exists.
         *
         * @param string $name The property name.
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * Unset a dynamic property.
         *
         * @param string $name The property name.
         */
        public function __unset($name)
        {
        }
        /**
         * Get the module instance.
         *
         * @return Module
         */
        public function get_element()
        {
        }
        /**
         * Add a new utility to the class map.
         *
         * @param string $name The name of the utility.
         * @param string $utility_class The full class name of the utility.
         */
        protected function add_utility_to_class_map($name, $utility_class)
        {
        }
        /**
         * Remove a utility from the class map and container.
         *
         * @param string $name The name of the utility.
         */
        protected function remove_utility($name)
        {
        }
        /**
         * Check if a utility exists in the class map.
         *
         * @param string $name The name of the utility.
         * @return bool
         */
        public function has_utility($name)
        {
        }
        /**
         * Get all utility names.
         *
         * @return array
         */
        public function get_all_utility_names()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder {
    /**
     * Builder Utils Class
     *
     * @package DiviSquad
     * @since   1.5.0
     */
    final class Utils extends \DiviSquad\Base\DiviBuilder\Utils\Base
    {
        /**
         * Connect with non-static public functions.
         *
         * @param Module $element The instance of ET Builder Element (Squad Module).
         *
         * @return Utils
         */
        public static function connect(\DiviSquad\Base\DiviBuilder\Module $element) : \DiviSquad\Base\DiviBuilder\Utils
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Database {
    /**
     * Database utilities class for managing table structures.
     *
     * @since 3.1.0
     */
    class DatabaseUtils
    {
        /**
         * Generate SQL CREATE TABLE statement from schema.
         *
         * @since  3.1.0
         *
         * @param string $table_name Table name to generate SQL for.
         * @param array  $schema     Table schema definition.
         *
         * @return string Generated SQL statement.
         */
        public static function generate_create_table_sql(string $table_name, array $schema) : string
        {
        }
        /**
         * Generate column definition SQL.
         *
         * @since  3.1.0
         *
         * @param string $column_name Column name.
         * @param array  $definition  Column definition array.
         *
         * @return string Column definition SQL.
         */
        private static function generate_column_definition(string $column_name, array $definition) : string
        {
        }
        /**
         * Generate index definition SQL.
         *
         * @since  3.1.0
         *
         * @param string $column_name Column name.
         * @param array  $definition  Column definition array.
         *
         * @return string Index definition SQL.
         */
        private static function generate_index_definition(string $column_name, array $definition) : string
        {
        }
        /**
         * Verify if a table exists and create it if it doesn't.
         *
         * @since  3.1.0
         *
         * @param string $table_name Table name to verify/create.
         * @param array  $schema     Table schema.
         *
         * @return bool   True if table exists or was created successfully.
         */
        public static function verify_and_create_table(string $table_name, array $schema) : bool
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements {
    /**
     * Breadcrumbs Utils Helper Class
     *
     * @package DiviSquad
     * @since   1.5.0
     */
    class Breadcrumbs
    {
        /**
         * Function that generates the HTML from breadcrumbs.
         *
         * @param string $_home_text   The home text.
         * @param string $_before_text The before text for the titles.
         * @param string $_delimiter   The separator.
         *
         * @return string
         */
        public function get_hansel_and_gretel($_home_text = 'Home', $_before_text = '', $_delimiter = '&#x39;')
        {
        }
    }
    /**
     * Custom Fields Utils Helper Class
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class CustomFields
    {
        /**
         * Supported post types.
         *
         * @var array Supported post types.
         */
        protected static $post_types = array('post');
        /**
         * Supported field types with their corresponding processor classes.
         *
         * @var array<string, array<string, class-string>>
         */
        protected static $processors = array('collections' => array('custom_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors\WordPress::class, 'acf_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors\Advanced::class), 'definitions' => array('custom_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions\WordPress::class, 'acf_fields' => \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions\Advanced::class));
        /**
         * Runtime data storage.
         *
         * @var array<string, array>
         */
        protected static $storage = array('instances' => array(), 'options' => array(), 'definitions' => array());
        /**
         * Field Manager Instance
         *
         * @var CustomFields\Managers\Fields
         */
        private static $fields_manager;
        /**
         * Initialize the CustomFields class.
         *
         * @return void
         * @throws \Exception If the manager class does not exist or is not instantiable.
         */
        public static function init()
        {
        }
        /**
         * Get all fields of a specific type.
         *
         * @param string $field_type The field type (acf, WordPress, etc.).
         * @param int    $post_id    The current post id.
         *
         * @return array<string, string>
         * @throws InvalidArgumentException If the field type is not supported.
         */
        public static function get_fields($field_type, $post_id)
        {
        }
        /**
         * Get module definitions for module usages
         *
         * @param string $field_type The field type (acf, WordPress, etc.).
         *
         * @return array<string, mixed>
         * @throws InvalidArgumentException If the field type is not supported.
         */
        public static function get_definitions($field_type)
        {
        }
        /**
         * Get the CustomFieldsManager instance.
         *
         * @return CustomFields\Managers\Fields
         * @throws InvalidArgumentException If the manager is not supported.
         * @throws \Exception If the manager class does not exist or is not instantiable.
         */
        public static function get_fields_manager()
        {
        }
        /**
         * Get supported post types.
         *
         * @return array|string[]
         */
        public static function get_supported_post_types()
        {
        }
        /**
         * Fetch fields of a specific type.
         *
         * @param string $field_type The field type (acf, WordPress, etc.).
         * @param string $storage    The storage type (collections, definitions.).
         *
         * @return CustomFields\Definition|CustomFields\Processor
         * @throws InvalidArgumentException If the field type is not supported.
         */
        public static function get($field_type, $storage = 'collections')
        {
        }
        /**
         * Get current field processor class name
         *
         * @param string $field_type The field type (acf_fields, custom_fields, etc.).
         * @param string $storage    The storage type (collections, definitions.).
         *
         * @return class-string
         */
        protected static function get_class($field_type, $storage = 'collections')
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields {
    /**
     * Interface for defining custom field operations.
     *
     * This interface provides methods for retrieving various types of custom fields
     * and their associated properties.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    interface DefinitionInterface
    {
        /**
         * Get common fields that are applicable across different post types.
         *
         * This method should return an array of custom fields that are commonly used
         * and applicable to multiple or all post types.
         *
         * @return array An array of common custom field definitions.
         */
        public function get_common_fields();
        /**
         * Get an array of empty fields.
         *
         * This method should return an array of custom fields that are considered "empty"
         * or have no default value.
         *
         * @return array An array of empty custom field definitions.
         */
        public function get_empty_fields();
        /**
         * Get default fields for a specific post type.
         *
         * This method should return an array of default custom fields for the given post type,
         * taking into account any provided options.
         *
         * @param string $post_type The post type for which to retrieve default fields.
         * @param array  $options   Additional options to customize the returned fields.
         *
         * @return array An array of default custom field definitions for the specified post type.
         */
        public function get_default_fields($post_type, $options);
        /**
         * Get associated fields.
         *
         * This method should return an array of custom fields that are associated
         * with the current context or implementation.
         *
         * @param array $fields_types Collect custom fields types.
         *
         * @return array An array of associated custom field definitions.
         */
        public function get_associated_fields($fields_types = array());
        /**
         * Get fields that are not eligible.
         *
         * This method should return an array of custom fields that are considered
         * not eligible for use in the current context or implementation.
         *
         * @return array An array of custom field definitions that are not eligible.
         */
        public function get_not_eligible_fields();
    }
    /**
     * Class Definition
     *
     * Provides a base implementation for definition classes in the DiviSquad plugin.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    abstract class Definition implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\DefinitionInterface
    {
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definitions {
    /**
     * Advanced Custom Field Definitions Class
     *
     * Implements advanced custom field definitions with support for complex field types
     * and sophisticated filtering options.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class Advanced extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definition
    {
        /**
         * Get common fields that are applicable across different post types.
         *
         * This method returns an array of advanced custom fields that are commonly used
         * and applicable to multiple or all post types, including more complex field types.
         *
         * @return array An array of common custom field definitions.
         */
        public function get_common_fields()
        {
        }
        /**
         * Get an array of empty fields.
         *
         * This method returns an array of custom fields that are considered "empty"
         * or have no default value, potentially including complex field types.
         *
         * @return array An array of empty custom field definitions.
         */
        public function get_empty_fields()
        {
        }
        /**
         * Get default fields for a specific post type.
         *
         * This method returns an array of default custom fields for the given post type,
         * taking into account any provided options and potentially including advanced field types.
         *
         * @param string $post_type The post type for which to retrieve default fields.
         * @param array  $options   Additional options to customize the returned fields.
         *
         * @return array An array of default custom field definitions for the specified post type.
         */
        public function get_default_fields($post_type, $options)
        {
        }
        /**
         * Get associated fields.
         *
         * This method returns an array of custom fields that are associated
         * with the current context or implementation, potentially including
         * fields with advanced functionality or relationships.
         *
         * @param array $fields_types Collect custom fields types.
         *
         * @return array An array of associated custom field definitions.
         */
        public function get_associated_fields($fields_types = array())
        {
        }
        /**
         * Get fields that are not eligible.
         *
         * This method returns an array of custom fields that are considered
         * not eligible for use in the current context or implementation,
         * potentially based on advanced criteria or user roles.
         *
         * @return array An array of custom field definitions that are not eligible.
         */
        public function get_not_eligible_fields()
        {
        }
    }
    /**
     * WordPress Custom Field Definitions Class
     *
     * Implements WordPress-specific custom field definitions for use with Divi Builder.
     *
     * @package DiviSquad
     * @since 3.1.0
     */
    class WordPress extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Definition
    {
        /**
         * Get common fields that are applicable across different post types.
         *
         * This method returns an array of custom fields that are commonly used
         * and applicable to multiple or all post types in WordPress.
         *
         * @return array An array of common custom field definitions.
         */
        public function get_common_fields()
        {
        }
        /**
         * Get an array of empty fields.
         *
         * This method returns an array of custom fields that are considered "empty"
         * or have no default value, specifically for WordPress integration.
         *
         * @return array An array of empty custom field definitions.
         */
        public function get_empty_fields()
        {
        }
        /**
         * Get default fields for a specific post type.
         *
         * This method returns an array of default custom fields for the given post type,
         * taking into account any provided options.
         *
         * @param string $post_type The post type for which to retrieve default fields.
         * @param array  $options   Additional options to customize the returned fields.
         *
         * @return array An array of default custom field definitions for the specified post type.
         */
        public function get_default_fields($post_type, $options)
        {
        }
        /**
         * Get associated fields.
         *
         * This method returns an array of custom fields that are associated
         * with the current context or implementation in WordPress.
         *
         * @param array $fields_types Collect custom fields types.
         *
         * @return array An array of associated custom field definitions.
         */
        public function get_associated_fields($fields_types = array())
        {
        }
        /**
         * Get fields when custom fields are not eligible.
         *
         * This method returns an array of custom fields that are considered
         * not eligible for use in the current WordPress context or implementation.
         *
         * @return array An array of custom field definitions when custom fields are not eligible.
         */
        public function get_not_eligible_fields()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields {
    /**
     * Interface ManagerInterface
     *
     * Defines the contract for manager classes in the DiviSquad plugin.
     *
     * @package DiviSquad
     * @since   3.1.1
     */
    interface ManagerInterface
    {
        /**
         * Initialize the manager.
         *
         * This method should set up any necessary hooks or initial configurations.
         *
         * @since 3.1.1
         *
         * @return void
         */
        public function init();
        /**
         * Get data from the manager.
         *
         * This method should retrieve the main data that the manager is responsible for.
         *
         * @since 3.1.1
         *
         * @param array $args Optional. Arguments to modify the query.
         * @return array The retrieved data.
         */
        public function get_data($args = array());
        /**
         * Clear the cache for this manager.
         *
         * This method should clear any cached data that the manager maintains.
         *
         * @since 3.1.1
         *
         * @return void
         */
        public function clear_cache();
    }
    /**
     * Class Manager
     *
     * Provides a base implementation for manager classes in the DiviSquad plugin.
     *
     * @package DiviSquad
     * @since   3.1.1
     */
    abstract class Manager implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\ManagerInterface
    {
        /**
         * Cache group for this manager.
         *
         * @var string
         */
        protected $cache_group;
        /**
         * Cache key prefix for this manager.
         *
         * @var string
         */
        protected $cache_key_prefix;
        /**
         * Constructor.
         *
         * @since 3.1.1
         *
         * @param string $cache_group The cache group for this manager.
         * @param string $cache_key_prefix The cache key prefix for this manager.
         */
        public function __construct($cache_group, $cache_key_prefix)
        {
        }
        /**
         * Get data from the cache or generate it if not cached.
         *
         * @since 3.1.1
         *
         * @param string   $key        The cache key.
         * @param callable $callback   The function to generate the data if not cached.
         * @param int      $expiration Optional. The expiration time of the cached data in seconds. Default 3600.
         * @return mixed The cached or generated data.
         */
        protected function get_cached_data($key, $callback, $args = array(), $expiration = 3600)
        {
        }
        /**
         * Clear the cache for this manager.
         *
         * @since 3.1.1
         *
         * @return void
         */
        public function clear_cache()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Traits {
    /**
     * Table Population Trait
     *
     * This trait provides methods for efficiently populating and managing
     * custom fields tables in WordPress, with a focus on performance
     * and memory optimization.
     *
     * @since 3.1.0
     */
    trait TablePopulationTrait
    {
        /**
         * Batch size for processing records.
         * Adjust based on server capabilities.
         *
         * @since 3.1.0
         * @var   int
         */
        protected int $batch_size = 5000;
        /**
         * Maximum execution time for each batch (seconds).
         *
         * @since 3.1.0
         * @var   int
         */
        protected int $max_batch_time = 20;
        /**
         * Tracked post types for custom fields.
         *
         * @var bool
         */
        protected bool $is_table_exists = false;
        /**
         * Populate the summary table efficiently.
         *
         * @since  3.1.0
         * @return void
         */
        public function populate_summary_table()
        {
        }
        /**
         * Verify if the custom fields table exists.
         *
         * @since  3.2.0
         *
         * @return bool True if table exists.
         */
        protected function is_table_exists() : bool
        {
        }
        /**
         * Process a batch of records.
         *
         * @since  3.1.0
         *
         * @param int $last_id Last processed ID.
         *
         * @return int Next last ID or 0 if complete.
         */
        protected function process_batch(int $last_id) : int
        {
        }
        /**
         * Check if table needs to be populated.
         *
         * @since  3.1.0
         * @return bool True if table needs population.
         */
        protected function needs_population() : bool
        {
        }
        /**
         * Prepare post types for SQL query.
         *
         * @since  3.1.0
         * @return string SQL-ready post types string.
         */
        protected function prepare_post_types() : string
        {
        }
        /**
         * Get meta keys that exist in postmeta but not in the collection table.
         * Optimized query using INNER JOIN and NOT IN clause.
         *
         * @since  3.1.0
         * @return array Array of missing meta keys with their post types.
         */
        public function get_missing_meta_keys() : array
        {
        }
        /**
         * Get meta keys count by post type.
         * Helper method to analyze meta keys distribution.
         *
         * @since  3.1.0
         * @return array Array of meta key counts by post type.
         */
        public function get_meta_keys_count_by_post_type() : array
        {
        }
        /**
         * Get the optimal batch size based on server resources.
         *
         * @since  3.1.0
         * @return int Optimal batch size.
         */
        protected function get_optimal_batch_size() : int
        {
        }
        /**
         * Validate batch size is within acceptable limits.
         *
         * @since  3.1.0
         *
         * @param int $size Batch size to validate.
         *
         * @return int Validated batch size.
         */
        protected function validate_batch_size(int $size) : int
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Managers {
    /**
     * Fields Class
     *
     * Manages custom fields across different post types in WordPress.
     *
     * @since   3.1.1
     * @package DiviSquad
     */
    class Fields extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Manager
    {
        use \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Traits\TablePopulationTrait;
        /**
         * The name of the summary table in the database.
         *
         * @since 3.1.1
         * @var   string
         */
        protected string $table_name;
        /**
         * Array of post types to track custom fields for.
         *
         * @since 3.1.1
         * @var   array
         */
        protected array $tracked_post_types;
        /**
         * Instance of the CustomFieldsUpgrader class.
         *
         * @since 3.1.1
         * @var   Upgraders
         */
        private \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Managers\Upgraders $upgrader;
        /**
         * Version of the current table structure.
         *
         * @since 3.1.1
         * @var   string
         */
        private string $table_version = '1.0';
        /**
         * Constructor.
         *
         * @since  3.1.1
         *
         * @param array $post_types Array of post types to track custom fields for.
         */
        public function __construct(array $post_types = array('post'))
        {
        }
        /**
         * Initialize the manager
         *
         * @since 3.1.1
         */
        public function init() : void
        {
        }
        /**
         * Get data from the manager.
         *
         * @since  3.1.1
         *
         * @param array $args Optional. Arguments to modify the query.
         *
         * @return array The retrieved data.
         */
        public function get_data($args = array()) : array
        {
        }
        /**
         * Verify and create table if needed.
         *
         * @since  3.1.1
         * @return bool True if table exists and is valid.
         */
        public function is_table_verified() : bool
        {
        }
        /**
         * Check table version and update if needed.
         *
         * @since  3.1.1
         */
        public function check_table_version() : void
        {
        }
        /**
         * Run database upgrades.
         *
         * @since  3.1.1
         */
        public function run_upgrades() : void
        {
        }
        /**
         * Update summary table for added/updated postmeta.
         *
         * @since  3.1.1
         *
         * @param int    $meta_id   Metadata ID.
         * @param int    $object_id Object ID.
         * @param string $meta_key  Meta key.
         */
        public function update_summary(int $meta_id, int $object_id, string $meta_key) : void
        {
        }
        /**
         * Delete from summary table when postmeta is deleted.
         *
         * @since  3.1.1
         *
         * @param array  $meta_ids  Meta IDs being deleted.
         * @param int    $object_id Object ID.
         * @param string $meta_key  Meta key.
         */
        public function delete_from_summary(array $meta_ids, int $object_id, string $meta_key) : void
        {
        }
        /**
         * Get custom field keys.
         *
         * @since  3.1.1
         *
         * @param string $post_type Post type.
         * @param int    $limit     Results limit.
         *
         * @return array
         */
        public function get_custom_field_keys(string $post_type = 'post', int $limit = 30) : array
        {
        }
    }
    /**
     * Upgrader Class
     *
     * Manages database upgrades for the custom fields summary table.
     * This class handles version tracking and applies necessary database
     * structure changes when upgrading from older versions.
     *
     * @since   3.1.1
     * @package DiviSquad
     */
    class Upgraders
    {
        /**
         * The name of the summary table in the database.
         *
         * @since 3.1.1
         * @var string
         */
        private $summary_table_name;
        /**
         * The option name used to store the current version in the database.
         *
         * @since 3.1.1
         * @var string
         */
        private $version_option_name = 'custom_fields_summary_version';
        /**
         * The current version of the database structure.
         *
         * @since 3.1.1
         * @var string
         */
        private $current_version = '1.0';
        /**
         * Constructor.
         *
         * @since 3.1.1
         */
        public function __construct()
        {
        }
        /**
         * Run necessary database upgrades.
         *
         * Checks the installed version against the current version and
         * performs any necessary upgrade procedures.
         *
         * @since 3.1.1
         *
         * @param string $table The name of the summary table in the database.
         *
         * @return void
         */
        public function run_upgrades($table)
        {
        }
        /**
         * Perform specific upgrade procedures.
         *
         * This method contains the logic for upgrading the database
         * structure from one version to another.
         *
         * @since 3.1.1
         *
         * @param string $from_version The version to upgrade from.
         *
         * @return void
         */
        private function perform_upgrades($from_version)
        {
        }
        /**
         * @return string
         */
        public function get_summary_table_name()
        {
        }
        /**
         * Get the current version of the database structure.
         *
         * @since 3.1.1
         *
         * @return string The current version.
         */
        public function get_current_version()
        {
        }
        /**
         * Set the current version of the database structure.
         *
         * This method is primarily used for testing purposes or manual version management.
         *
         * @since 3.1.1
         *
         * @param string $version The version to set.
         *
         * @return void
         */
        public function set_current_version($version)
        {
        }
        /**
         * Check if an upgrade is needed.
         *
         * Compares the installed version with the current version to determine
         * if an upgrade is necessary.
         *
         * @since 3.1.1
         *
         * @return bool True if an upgrade is needed, false otherwise.
         */
        public function is_upgrade_needed()
        {
        }
        /**
         * Get the installed version of the database structure.
         *
         * @since 3.1.1
         *
         * @return string The installed version.
         */
        public function get_installed_version()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields {
    /**
     * Custom Field interface
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    interface ProcessorInterface
    {
        /**
         * Inform that the processor is eligible or not.
         *
         * @return bool
         */
        public function is_eligible();
        /**
         * Collect custom fields and generate a formatted array.
         *
         * @return array An array where keys are original field names and values are formatted field names.
         */
        public function get_formatted_fields();
        /**
         * Get all custom fields for a specific post.
         *
         * @param int $post_id The ID of the post.
         * @return array An array of custom fields, where keys are field names and values are field values.
         */
        public function get_fields($post_id);
        /**
         * Check if a post has a specific custom field.
         *
         * @param int    $post_id The ID of the post to check.
         * @param string $field_key The key of the custom field to check for.
         * @return bool True if the custom field exists, false otherwise.
         */
        public function has_field($post_id, $field_key);
        /**
         * Get a specific custom field by post ID and field key.
         *
         * @param int    $post_id The ID of the post to retrieve the custom field for.
         * @param string $field_key The key of the custom field to retrieve.
         * @param mixed  $default_value The default value to return if the field is not found.
         * @return mixed The value of the custom field, or the default value if not found.
         */
        public function get_field_value($post_id, $field_key, $default_value = null);
        /**
         * Get the value of a selected post meta key for a specific post, with additional options.
         *
         * @param int    $post_id The ID of the post.
         * @param string $meta_key The meta key to retrieve.
         * @param array  $options Additional options for retrieving the meta value.
         * @return mixed The meta value if successful, default value if not found.
         */
        public function get_field_value_advanced($post_id, $meta_key, array $options = array());
    }
    /**
     * Custom Fields Base Class
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    abstract class Processor implements \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\ProcessorInterface
    {
        /**
         * Supported post types.
         *
         * @var array
         */
        protected $post_types = array();
        /**
         * Blacklisted keys
         *
         * @var array Blacklisted keys that should be excluded from custom fields.
         */
        protected $blacklisted_keys = array();
        /**
         * Custom fields suffixes
         *
         * @var array Suffixes that should be excluded from custom fields.
         */
        protected $excluded_suffixes = array();
        /**
         * Custom fields prefixes
         *
         * @var array Prefixes that should be excluded from custom fields.
         */
        protected $excluded_prefixes = array();
        /**
         * Available custom fields.
         *
         * @var array List of available custom fields.
         */
        protected $fields = array();
        /**
         * Available custom fields with its value.
         *
         * @var array List of available custom fields.
         */
        protected $custom_fields = array();
        /**
         * Check if a field should be included based on various criteria.
         *
         * @param string $field_key The field key to check.
         * @return bool Whether the field should be included.
         */
        protected abstract function should_include_field($field_key);
        /**
         * Get the supported post types for the processor.
         *
         * @return array|string[]
         */
        protected abstract function get_supported_post_types();
        /**
         * Format a field name by replacing underscores and hyphens with spaces.
         *
         * @param string $field_key The field key to format.
         * @return string The formatted field name.
         */
        protected function format_field_name($field_key)
        {
        }
        /**
         * Get the value of a selected post meta key for a specific post, with additional options.
         *
         * @param int    $post_id The ID of the post.
         * @param string $meta_key The meta key to retrieve.
         * @param array  $options Additional options for retrieving the meta value.
         * @return mixed The meta value if successful, default value if not found.
         */
        public function get_field_value_advanced($post_id, $meta_key, array $options = array())
        {
        }
        /**
         * Collect custom fields types and generate a formatted array.
         *
         * @return array
         */
        public function get_formatted_fields_types()
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processors {
    /**
     * Custom Fields (Advanced Custom Field) element Class
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class Advanced extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processor
    {
        /**
         * Supported post types.
         *
         * @var array<string>
         */
        protected $post_types = array('post');
        /**
         * Blacklisted keys that should be excluded from custom fields.
         *
         * @var array<string>
         */
        protected $blacklisted_keys = array();
        /**
         * Suffixes that should be excluded from custom fields.
         *
         * @var array<string>
         */
        protected $excluded_suffixes = array();
        /**
         * Prefixes that should be excluded from custom fields.
         *
         * @var array<string>
         */
        protected $excluded_prefixes = array();
        /**
         * Supported fields types from advanced custom fields.
         *
         * @var array<string>
         */
        protected $supported_field_types = array('text', 'number', 'textarea', 'range', 'email', 'url', 'image', 'select', 'date_picker', 'wysiwyg');
        /**
         * Available custom fields group
         *
         * @var array
         */
        protected $field_groups = array();
        /**
         * Available custom fields
         *
         * @var array
         */
        protected $fields_data = array();
        /**
         * Available custom field values
         *
         * @var array
         */
        protected $field_values = array();
        /**
         * Inform that the processor is eligible or not.
         *
         * @return bool
         */
        public function is_eligible()
        {
        }
        /**
         * Collect available custom field values from the postmeta table for specific post.
         *
         * @param int $post_id The ID of the post.
         *
         * @return array An array of unique custom field values.
         */
        public function get_available_field_values($post_id)
        {
        }
        /**
         * Get post meta values for given keys.
         *
         * @param int   $post_id        The ID of the post.
         * @param array $acf_field_keys Array of ACF field keys to retrieve.
         * @param int   $limit          Maximum number of results to return.
         *
         * @return array An array of post meta values.
         */
        private function get_post_meta_values($post_id, $acf_field_keys, $limit)
        {
        }
        /**
         * Collect custom fields and generate a formatted array.
         *
         * @return array
         */
        public function get_formatted_fields()
        {
        }
        /**
         * Collect custom fields types and generate a formatted array.
         *
         * @return array
         */
        public function get_formatted_fields_types()
        {
        }
        /**
         * Get all custom fields for a specific post.
         *
         * @param int $post_id The ID of the post.
         * @return array An array of custom fields, where keys are field names and values are field values.
         */
        public function get_fields($post_id)
        {
        }
        /**
         * Check if a post has a specific custom field.
         *
         * @param int    $post_id The ID of the post to check.
         * @param string $field_key The key of the custom field to check for.
         * @return bool True if the custom field exists, false otherwise.
         */
        public function has_field($post_id, $field_key)
        {
        }
        /**
         * Get a specific custom field by post ID and field key.
         *
         * @param int    $post_id The ID of the post to retrieve the custom field for.
         * @param string $field_key The key of the custom field to retrieve.
         * @param mixed  $default_value The default value to return if the field is not found.
         * @return mixed The value of the custom field, or the default value if not found.
         */
        public function get_field_value($post_id, $field_key, $default_value = null)
        {
        }
        /**
         * Get the supported post types for the processor.
         *
         * @return array|string[]
         */
        protected function get_supported_post_types()
        {
        }
        /**
         * Get supported field types.
         *
         * @return array|string[]
         */
        protected function get_supported_field_types()
        {
        }
        /**
         * Check if a field should be included based on various criteria.
         *
         * @param string $field_key The field key to check.
         * @return bool Whether the field should be included.
         */
        protected function should_include_field($field_key)
        {
        }
    }
    /**
     * Custom Fields (WordPress) element Class
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class WordPress extends \DiviSquad\Base\DiviBuilder\Utils\Elements\CustomFields\Processor
    {
        /**
         * Blacklisted keys
         *
         * @var array Blacklisted keys that should be excluded from custom fields.
         */
        protected $blacklisted_keys = array('_edit_lock', '_edit_last', '_thumbnail_id', '_wp_page_template', '_wp_old_slug', '_wp_trash_meta_time', '_wp_trash_meta_status');
        /**
         * Suffixes
         *
         * @var array Suffixes that should be excluded from custom fields.
         */
        protected $excluded_suffixes = array('active', 'enabled', 'disabled', 'hidden', 'flag');
        /**
         * Prefixes
         *
         * @var array Prefixes that should be excluded from custom fields.
         */
        protected $excluded_prefixes = array('wp' => array('_wp_', 'wp_', '_oembed_'), 'divi' => array('et_'), 'yoast' => array('_yoast_', 'yoast_', '_wpseo_'), 'others' => array('_aioseop_', '_elementor_', 'rank_math_', '_acf_', '_wc_', '_transient_', '_site_transient_', '_menu_item_'));
        /**
         * Available custom formated fields
         *
         * @var array
         */
        protected $formatted_fields = array();
        /**
         * Available custom field values
         *
         * @var array
         */
        protected $field_values = array();
        /**
         * Inform that the processor is eligible or not.
         *
         * @return bool
         */
        public function is_eligible()
        {
        }
        /**
         * Collect custom fields and generate a formatted array.
         *
         * @return array An array where keys are original field names and values are formatted field names.
         * @throws \Exception If the post type is not supported.
         */
        public function get_formatted_fields()
        {
        }
        /**
         * Get all custom fields for a specific post.
         *
         * @param int $post_id The ID of the post.
         * @return array An array of custom fields, where keys are field names and values are field values.
         * @throws \Exception If the post type is not supported.
         */
        public function get_fields($post_id)
        {
        }
        /**
         * Check if a post has a specific custom field.
         *
         * @param int    $post_id The ID of the post to check.
         * @param string $field_key The key of the custom field to check for.
         * @return bool True if the custom field exists, false otherwise.
         */
        public function has_field($post_id, $field_key)
        {
        }
        /**
         * Get a specific custom field by post ID and field key.
         *
         * @param int    $post_id The ID of the post to retrieve the custom field for.
         * @param string $field_key The key of the custom field to retrieve.
         * @param mixed  $default_value The default value to return if the field is not found.
         * @return mixed The value of the custom field, or the default value if not found.
         */
        public function get_field_value($post_id, $field_key, $default_value = null)
        {
        }
        /**
         * Get the supported post types for the processor.
         *
         * @return array|string[]
         */
        protected function get_supported_post_types()
        {
        }
        /**
         * Check if a field should be included based on various criteria.
         *
         * @param string $field_key The field key to check.
         * @return bool Whether the field should be included.
         */
        protected function should_include_field($field_key)
        {
        }
        /**
         * Collect available custom fields from the postmeta table.
         *
         * @return array An array of unique custom field keys.
         * @throws \Exception If the post type is not supported.
         */
        protected function get_available_fields()
        {
        }
        /**
         * Collect available custom field values from the postmeta table for specific post.
         *
         * @param int $post_id The ID of the post.
         *
         * @return array An array of unique custom field values.
         * @throws \Exception If the post type is not supported.
         */
        protected function get_available_field_values($post_id)
        {
        }
        /**
         * Get post meta values for given keys.
         *
         * @param int   $post_id   The ID of the post.
         * @param array $meta_keys Array of meta keys to retrieve.
         * @param int   $limit     Maximum number of results to return.
         *
         * @return array An array of post meta values.
         */
        private function get_post_meta_values($post_id, $meta_keys, $limit)
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements {
    /**
     * Divider Utils Helper Class
     *
     * @package DiviSquad
     * @since   1.5.0
     */
    class Divider
    {
        /**
         * The instance of ET Builder Element.
         *
         * @var object
         */
        public $module;
        /**
         * Constructor.
         *
         * @param object $module The instance of ET Builder Element.
         */
        public function __construct($module)
        {
        }
        /**
         * Get show options for divider.
         *
         * @return array
         */
        public function get_show_options()
        {
        }
        /**
         * Get the default data.
         *
         * @param string $field The instance of ET Builder Element.
         *
         * @return string
         */
        public function get_default($field)
        {
        }
        /**
         * Get the default data.
         *
         * @return array
         */
        public function get_defaults()
        {
        }
        /**
         * Get the default data for initiate.
         *
         * @return void The shape
         */
        public function initiate_element()
        {
        }
        /**
         * Get the field for divider module
         *
         * @param array $options The options for divider module fields.
         *
         * @return array the field
         */
        public function get_fields($options = array())
        {
        }
    }
    /**
     * Main class for handling various form types.
     *
     * @package DiviSquad
     * @since 1.5.0
     */
    class Forms
    {
        const DEFAULT_FORM_ID = 'cfcd208495d565ef66e7dff9f98764da';
        /**
         * Supported form types with their corresponding processor classes.
         *
         * @var array<string, string>
         */
        protected static array $supported_form_types = array('cf7' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\ContactForm7::class, 'wpforms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\WPForms::class, 'fluent_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\FluentForms::class, 'ninja_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\NinjaForms::class, 'gravity_forms' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\GravityForms::class, 'forminator' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\Forminator::class, 'formidable' => \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors\Formidable::class);
        /**
         * Form collections.
         *
         * @var array<string, array<string, string>>
         */
        protected static array $collections = array();
        /**
         * Form processors.
         *
         * @var array<string, Forms\FormInterface>
         */
        protected static array $processors = array();
        /**
         * Get allowed fields for the module.
         *
         * @return array List of allowed field types
         */
        public static function get_allowed_fields() : ?array
        {
        }
        /**
         * Get custom spacing prefixes for the module.
         *
         * @return array Custom spacing prefixes
         */
        public static function get_custom_spacing_prefixes() : ?array
        {
        }
        /**
         * Initialize allowed fields.
         *
         * @return array List of allowed field types
         */
        protected static function initialize_allowed_fields() : array
        {
        }
        /**
         * Initialize custom spacing prefixes.
         *
         * @return array Custom spacing prefixes
         */
        protected static function initialize_custom_spacing_prefixes() : array
        {
        }
        /**
         * Get all forms of a specific type.
         *
         * @param string $form_type  The form type (cf7, fluent_forms, etc.).
         * @param string $collection The collection type (title or id).
         *
         * @return array<string, string>
         * @throws InvalidArgumentException If the form type is not supported.
         */
        public static function get_forms_by(string $form_type, string $collection = 'title') : array
        {
        }
        /**
         * Validate form type.
         *
         * @param string $form_type The form type.
         *
         * @throws InvalidArgumentException If the form type is not supported.
         */
        protected static function validate_form_type(string $form_type) : void
        {
        }
        /**
         * Fetch forms of a specific type.
         *
         * @param string $form_type  The form type (cf7, fluent_forms, etc.).
         * @param string $collection The collection type (title or id).
         *
         * @return array<string, string>
         */
        protected static function fetch_forms(string $form_type, string $collection) : array
        {
        }
        /**
         * Initialize form processor.
         *
         * @param string $form_type The form type.
         */
        protected static function initialize_processor(string $form_type) : void
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\Forms {
    /**
     * Form Interface
     *
     * Interface for form processors.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    interface FormInterface
    {
        /**
         * Get forms of a specific type.
         *
         * @param string $collection Either 'id' or 'title'.
         *
         * @return array Associative array of form IDs or titles
         */
        public function get_forms(string $collection) : array;
    }
    /**
     * Abstract class for form processing.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    abstract class Form implements \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\FormInterface
    {
        /**
         * Get the ID of a form.
         *
         * @param mixed $form Form object.
         * @return int Form ID
         */
        protected abstract function get_form_id($form) : int;
        /**
         * Get the title of a form.
         *
         * @param mixed $form Form object.
         * @return string Form title
         */
        protected abstract function get_form_title($form) : string;
        /**
         * Process form data into a consistent format.
         *
         * @param array  $forms      Array of form objects.
         * @param string $collection Either 'id' or 'title'.
         *
         * @return array Processed form data
         */
        protected function process_form_data(array $forms, string $collection) : array
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Processors {
    /**
     * Class for handling Contact Form 7 forms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class ContactForm7 extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Contact Form 7 forms.
         *
         * @param string $collection Either 'id' or 'title'.
         *
         * @return array Associative array of CF7 form IDs or titles
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a CF7 form.
         *
         * @param WP_Post $form CF7 form object.
         *
         * @return int Form ID
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a CF7 form.
         *
         * @param WP_Post $form CF7 form object.
         *
         * @return string Form title
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * Fluent Forms Processor
     *
     * Handles the retrieval and processing of Fluent Forms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class FluentForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Fluent Forms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of Fluent Forms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a Fluent Form.
         *
         * @param object $form The form object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a Fluent Form.
         *
         * @param object $form The form object.
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * Formidable Forms Processor
     *
     * Handles the retrieval and processing of Formidable Forms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class Formidable extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Formidable Forms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of Formidable Forms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a Formidable Form.
         *
         * @param object $form The form object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a Formidable Form.
         *
         * @param object $form The form object.
         *
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * Forminator Forms Processor
     *
     * Handles the retrieval and processing of Forminator Forms.
     *
     * @package DiviSquad
     * @since 3.1.0
     */
    class Forminator extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Forminator Forms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of Forminator Forms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a Forminator Form.
         *
         * @param object $form The form object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a Forminator Form.
         *
         * @param object $form The form object.
         *
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * Gravity Forms Processor
     *
     * Handles the retrieval and processing of Gravity Forms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class GravityForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Gravity Forms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of Gravity Forms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a Gravity Form.
         *
         * @param object $form The form object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a Gravity Form.
         *
         * @param object $form The form object.
         *
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * Ninja Forms Processor
     *
     * Handles the retrieval and processing of Ninja Forms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class NinjaForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get Ninja Forms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of Ninja Forms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a Ninja Form.
         *
         * @param object $form The form object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a Ninja Form.
         *
         * @param object $form The form object.
         *
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
    /**
     * WPForms Processor
     *
     * Handles the retrieval and processing of WPForms.
     *
     * @package DiviSquad
     * @since   3.1.0
     */
    class WPForms extends \DiviSquad\Base\DiviBuilder\Utils\Elements\Forms\Form
    {
        /**
         * Get WPForms.
         *
         * @param string $collection The type of data to collect ('id' or 'title').
         *
         * @return array An array of WPForms data.
         */
        public function get_forms(string $collection) : array
        {
        }
        /**
         * Get the ID of a WPForm.
         *
         * @param WP_Post $form The form post object.
         *
         * @return int The form ID.
         */
        protected function get_form_id($form) : int
        {
        }
        /**
         * Get the title of a WPForm.
         *
         * @param WP_Post $form The form post object.
         *
         * @return string The form title.
         */
        protected function get_form_title($form) : string
        {
        }
    }
}
namespace DiviSquad\Base\DiviBuilder\Utils\Elements {
    /**
     * Mask Shape Element class
     *
     * @package DiviSquad
     * @since   1.5.0
     */
    class MaskShape
    {
        /**
         * Get the Mask Shape according the shape type and its secondary_shape type
         *
         * @param string $type              The shape type.
         * @param string $secondary_shape   The shape secondary_shape type.
         *
         * @return string The shape
         */
        public function get_shape($type = 'shape-01', $secondary_shape = 'off')
        {
        }
    }
}
namespace DiviSquad\Base {
    /**
     * Extension class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    abstract class Extension
    {
        /** The instance of memory.
         *
         * @var Memory
         */
        protected \DiviSquad\Core\Memory $memory;
        /**
         * The list of inactive extensions.
         *
         * @var array
         */
        protected $inactivates;
        /**
         * The name list of extensions.
         *
         * @var array
         */
        protected $name_lists;
        /**
         * The constructor class.
         */
        public function __construct()
        {
        }
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected abstract function get_name() : string;
        /**
         * Load the extension.
         *
         * @return void
         */
        protected abstract function load() : void;
    }
}
namespace DiviSquad\Base\Factories\FactoryBase {
    /**
     * Factory Interface
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    interface FactoryInterface
    {
        /**
         * Add a new item to the list of items.
         *
         * @param string $class_name The class name of the item to add.
         *
         * @return void
         */
        public function add($class_name);
    }
    /**
     * Interface FactoryInterface
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    abstract class Factory implements \DiviSquad\Base\Factories\FactoryBase\FactoryInterface
    {
        /**
         * Init hooks for the factory.
         *
         * @return void
         */
        protected abstract function init_hooks();
        /**
         * Add a new item to the list of items.
         *
         * @param string $class_name The class name of the item to add to the list.
         *
         * @return void
         */
        public abstract function add($class_name);
    }
}
namespace DiviSquad\Base\Factories {
    /**
     * Class AdminMenu
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    final class AdminMenu extends \DiviSquad\Base\Factories\FactoryBase\Factory
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * Store all registry
         *
         * @var AdminMenu\MenuInterface[]
         */
        private static array $registries = array();
        /**
         * Initialize hooks.
         *
         * @return void
         */
        protected function init_hooks()
        {
        }
        /**
         * Add a new menu to the list of menus.
         *
         * @param string $class_name The class name of the menu to add to the list. The class must implement the MenuInterface.
         *
         * @see AdminMenu\MenuInterface interface.
         * @return void
         */
        public function add($class_name)
        {
        }
        /**
         * Enqueue scripts and styles files in the WordPress admin area.
         *
         * @return void
         */
        public function create_admin_menus()
        {
        }
        /**
         * Filters the CSS classes for the body tag in the admin.
         *
         * @since 1.0.4
         *
         * @param string $classes Space-separated list of CSS classes.
         *
         * @return string
         */
        public function add_body_classes(string $classes) : string
        {
        }
        /**
         * Registered all menus.
         *
         * @return array
         */
        public function get_registered_submenus() : array
        {
        }
    }
    /**
     * Class AdminNotice
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    final class AdminNotice extends \DiviSquad\Base\Factories\FactoryBase\Factory
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * Store all registry
         *
         * @var AdminNotice\NoticeInterface[]
         */
        private static array $registries = array();
        /**
         * Initialize hooks.
         *
         * @return void
         */
        protected function init_hooks()
        {
        }
        /**
         * Add a new notice to the list of notices.
         *
         * @param string $class_name The class name of the notice to add to the list. The class must implement the NoticeInterface.
         *
         * @see AdminNotice\NoticeInterface interface.
         * @return void
         */
        public function add($class_name)
        {
        }
        /**
         * Prints admin screen notices in the WordPress admin area.
         *
         * @return void
         */
        public function add_admin_notices()
        {
        }
        /**
         * Filters the CSS classes for the body tag in the admin.
         *
         * @since 1.0.4
         *
         * @param string $classes Space-separated list of CSS classes.
         *
         * @return string
         */
        public function add_body_classes(string $classes) : string
        {
        }
        /**
         * Registered all notices.
         *
         * @return array
         */
        public function get_notices() : array
        {
        }
        /**
         * Set localize data for admin area.
         *
         * @param array $exists_data Exists extra data.
         *
         * @return array
         */
        public function wp_localize_script_data(array $exists_data) : array
        {
        }
    }
}
namespace DiviSquad\Base\Factories\AdminNotice {
    /**
     * Notice Interface.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    interface NoticeInterface
    {
        /**
         * Say that current notice can view or not.
         *
         * @return bool
         */
        public function can_render_it();
        /**
         * Add the CSS classes for the body tag in the admin.
         *
         * @return string
         */
        public function get_body_classes();
        /**
         * Get the template arguments
         *
         * @return array
         */
        public function get_template_args();
        /**
         * Get the template path.
         *
         * @return string
         */
        public function get_template();
    }
    /**
     * Abstract class representing the Notice.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    abstract class Notice implements \DiviSquad\Base\Factories\AdminNotice\NoticeInterface
    {
        /**
         * The template arguments
         *
         * @var array
         */
        protected $template_args = array();
        /**
         * Get the notice id.
         *
         * @var string
         */
        protected $notice_id = '';
        /**
         * Get the template arguments
         *
         * @return array
         */
        public abstract function get_template_args();
        /**
         * Get the template path.
         *
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * Get the template root.
         *
         * @return string
         */
        public function get_template_root()
        {
        }
        /**
         * Get the notice id.
         *
         * @return string
         */
        public function get_notice_id()
        {
        }
    }
}
namespace DiviSquad\Base\Factories {
    /**
     * Class Plugin Branding
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    final class BrandAsset extends \DiviSquad\Base\Factories\FactoryBase\Factory
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * Store all branding assets.
         *
         * @var array<string, BrandAsset\AssetInterface[]>
         */
        private static array $registries = array('plugin_action_links' => array(), 'plugin_row_actions' => array(), 'admin_footer_text' => array());
        /**
         * Initialize the hooks.
         *
         * @return void
         */
        protected function init_hooks()
        {
        }
        /**
         * Add a new item to the list of items.
         *
         * @param string $class_name The class name of the banding asset. Must implement the BrandingAssetInterface.
         *
         * @see BrandAsset\AssetInterface interface.
         * @return void
         */
        public function add($class_name)
        {
        }
        /**
         * Add some link to plugin action links.
         *
         * @param string[] $actions     An array of plugin action links. By default, this can include 'activate', 'deactivate', and 'delete'.
         * @param string   $plugin_file Path to the plugin file relative to the plugins' directory.
         *
         * @return array All action links for plugin.
         */
        public function add_plugin_actions(array $actions, string $plugin_file) : array
        {
        }
        /**
         * Add some link to plugin row actions.
         *
         * @param string[] $actions     An array of plugin row actions. By default, this can include 'activate', 'deactivate', and 'delete'.
         * @param string   $plugin_file Path to the plugin file relative to the plugins' directory.
         *
         * @return array All row actions for plugin.
         */
        public function add_plugin_row_actions(array $actions, string $plugin_file) : array
        {
        }
        /**
         * Add some text to plugin footer text.
         *
         * @param string $text The text to be displayed in the footer.
         *
         * @return string The text to be displayed in the footer.
         */
        public function add_plugin_footer_text(string $text) : string
        {
        }
        /**
         * Add some text to plugin update footer text.
         *
         * @param string $content The content that will be printed.
         *
         * @return string The content that will be printed.
         */
        public function update_plugin_footer_text(string $content) : string
        {
        }
    }
    /**
     * Abstract class representing the Plugin Asset.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    final class PluginAsset extends \DiviSquad\Base\Factories\FactoryBase\Factory
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * The list of registries.
         *
         * @var PluginAsset\AssetInterface[]
         */
        private static array $registries = array();
        /**
         * Init hooks for the factory.
         *
         * @return void
         */
        protected function init_hooks()
        {
        }
        /**
         * Add a new item to the list of items.
         *
         * @param string $class_name The class name of the item to add to the list.
         *
         * @return void
         */
        public function add($class_name)
        {
        }
        /**
         * Enqueue scripts.
         *
         * @return void
         */
        public function add_enqueue_scripts()
        {
        }
        /**
         * Enqueue admin scripts.
         *
         * @param string $hook_suffix Hook suffix for the current admin page.
         *
         * @return void
         */
        public function add_admin_enqueue_scripts(string $hook_suffix)
        {
        }
        /**
         * Add localize script data.
         *
         * @param array $data The data to localize.
         *
         * @return array
         */
        public function add_localize_backend_extra_data(array $data) : array
        {
        }
        /**
         * Add localize script data.
         *
         * @param string $data The data to localize.
         *
         * @return string
         */
        public function add_localize_backend_extra(string $data) : string
        {
        }
    }
    /**
     * Class RestRoute
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    final class RestRoute extends \DiviSquad\Base\Factories\FactoryBase\Factory
    {
        use \DiviSquad\Core\Traits\Singleton;
        /**
         * Store all registered routes
         *
         * @var array
         */
        private static array $registries = array();
        /**
         * Initialize hooks.
         *
         * @return void
         */
        protected function init_hooks()
        {
        }
        /**
         * Add a new route to the list of routes.
         *
         * @param string $class_name The class name of the route to add. Must implement RouteInterface.
         * @return void
         */
        public function add($class_name)
        {
        }
        /**
         * Get the namespace for a given product name.
         *
         * @param string $name Current product name.
         *
         * @return string
         */
        public function get_namespace(string $name) : string
        {
        }
        /**
         * Register all routes for our endpoints.
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Ensure each route has a permission callback.
         *
         * @param array $args Route arguments.
         *
         * @return array
         */
        private function ensure_permission_callback(array $args) : array
        {
        }
        /**
         * Get all registered routes for a given product name.
         *
         * @param string $name Current product name.
         *
         * @return array
         */
        public function get_registered_routes(string $name) : array
        {
        }
        /**
         * Format the route name for readability.
         *
         * @param string $route Original route string.
         *
         * @return string
         */
        private function format_route_name(string $route) : string
        {
        }
    }
}
namespace DiviSquad\Base\Factories\RestRoute {
    /**
     * Interface for the Route class.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    interface RouteInterface
    {
        /**
         * The route namespace
         *
         * @return string
         */
        public function get_namespace();
        /**
         * The route name
         *
         * @return string
         */
        public function get_name();
        /**
         * Available routes for current Rest Route
         *
         * @return array
         */
        public function get_routes();
    }
    /**
     * Abstract class representing the Route.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    abstract class Route implements \DiviSquad\Base\Factories\RestRoute\RouteInterface
    {
        /**
         * API Version
         *
         * @var string
         */
        protected $version = 'v1';
        /**
         * The route namespace
         *
         * @return string
         */
        public function get_namespace()
        {
        }
        /**
         * The route name
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * The route name
         *
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * Available routes for current Rest Route
         *
         * @return array
         */
        public function get_routes()
        {
        }
    }
}
namespace DiviSquad\Core {
    /**
     * Cache Class
     *
     * Handles all caching operations using WordPress Object Cache.
     *
     * @since   3.2.0
     * @package DiviSquad
     */
    class Cache
    {
        /**
         * Whether we're using an external object cache.
         *
         * @var bool
         */
        private bool $using_external_cache;
        /**
         * Cache statistics for debugging.
         *
         * @var array
         */
        private array $stats;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get cache value.
         *
         * @param string    $key    Cache key.
         * @param string    $group  Optional. Cache group.
         * @param bool      $force  Optional. Force refresh.
         * @param bool|null &$found Optional. Whether key was found.
         *
         * @return mixed|false The cache contents on success, false on failure.
         */
        public function get(string $key, string $group = 'divi-squad', bool $force = false, ?bool &$found = false)
        {
        }
        /**
         * Set cache value.
         *
         * @param string $key    Cache key.
         * @param mixed  $value  Value to cache.
         * @param string $group  Optional. Cache group.
         * @param int    $expiry Optional. Expiration time in seconds.
         *
         * @return bool True on success, false on failure.
         */
        public function set(string $key, $value, string $group = 'divi-squad', int $expiry = 3600) : bool
        {
        }
        /**
         * Delete cache value.
         *
         * @param string $key   Cache key.
         * @param string $group Optional. Cache group.
         *
         * @return bool True on success, false on failure.
         */
        public function delete(string $key, string $group = 'divi-squad') : bool
        {
        }
        /**
         * Get cache statistics.
         *
         * @return array Cache statistics.
         */
        public function get_stats() : array
        {
        }
        /**
         * Reset cache statistics.
         *
         * @return void
         */
        public function reset_stats()
        {
        }
        /**
         * Check if using external object cache.
         *
         * @return bool True if using external cache, false otherwise.
         */
        public function is_using_external_cache() : bool
        {
        }
    }
    /**
     * Freemius SDK integration class.
     *
     * @since   1.0.0
     * @package DiviSquad
     */
    final class Publisher
    {
        /**
         * Store and retrieve the instance of Freemius SDK
         *
         * @var Freemius The instance of Freemius SDK.
         */
        private \Freemius $fs;
        /**
         * The plugin instance.
         *
         * @var SquadModules The plugin instance.
         */
        private \DiviSquad\SquadModules $plugin;
        /**
         * Integration Constructor
         *
         * @throws Freemius_Exception Thrown when an API call returns an exception.
         */
        public function __construct(\DiviSquad\SquadModules $plugin)
        {
        }
        /**
         * Initialize hooks and filters
         */
        protected function init_hooks()
        {
        }
        /**
         * Retrieve the instance of Freemius SDK
         *
         * @return Freemius The instance of Freemius SDK.
         */
        public function get_fs() : \Freemius
        {
        }
        /**
         * Get the status of Freemius sdk is installed or not.
         *
         * @return bool
         */
        public function is_installed() : bool
        {
        }
        /**
         * Get the Freemius start file path.
         *
         * @return string|bool
         */
        private function get_sdk_start_file_path()
        {
        }
        /**
         * Show the contact submenu item only when the user has a valid non-expired license.
         *
         * @param bool   $is_visible The filtered value. Whether the submenu item should be visible or not.
         * @param string $menu_id    The ID of the submenu item.
         *
         * @return bool If true, the menu item should be visible.
         */
        public function fs_hook_is_submenu_visible(bool $is_visible, string $menu_id) : bool
        {
        }
        /**
         * Update plugin icon url for opt-in screen,.
         *
         * @return string The src url of plugin icon.
         */
        public function fs_hook_plugin_icon() : string
        {
        }
        /**
         * Get the account template path.
         *
         * @param array|string $content The template content.
         *
         * @return string
         */
        public function fs_hook_get_account_template($content) : string
        {
        }
        /**
         * Get the account template path.
         *
         * @param array|string $content The template content.
         *
         * @return string
         */
        public function fs_hook_get_default_template($content) : string
        {
        }
        /**
         * Control the visibility of admin notices.
         *
         * @param string $module_unique_affix Module's unique affix.
         * @param mixed  $value               The value on which the filters hooked to `$tag` are applied on.
         *
         * @return bool The filtered value after all hooked functions are applied to it.
         * @since  2.0.0
         */
        public function fs_hook_show_admin_notice(string $module_unique_affix, $value) : bool
        {
        }
        /**
         * Modify the plugin title based on free and pro plugin
         *
         * @since  2.0.0
         *
         * @param string $title The plugin title.
         *
         * @return string The activated plugin title between free and pro
         */
        public function fs_hook_plugin_title(string $title) : string
        {
        }
        /**
         * Modify the plugin version based on free and pro plugin
         *
         * @since  2.0.0
         *
         * @param string $version The plugin version.
         *
         * @return string The activated plugin title between free and pro
         */
        public function fs_hook_plugin_version(string $version) : string
        {
        }
        /**
         * Remove all notices from the squad template pages.
         *
         * @return void
         */
        public function wp_hook_clean_admin_content_section() : void
        {
        }
        /**
         * Enqueue the plugin's scripts and styles files in the WordPress admin area.
         *
         * @param string $hook_suffix The current admin page.
         *
         * @return void
         */
        public function wp_hook_enqueue_scripts(string $hook_suffix) : void
        {
        }
        /**
         * Remove all third party dependencies from the squad template pages.
         *
         * @return void
         */
        public function wp_hook_clean_third_party_deps() : void
        {
        }
        /**
         * Remove unnecessary styles from the current page.
         *
         * @param WP_Scripts|WP_Styles $root The Core class of dependencies.
         *
         * @return void
         */
        public function remove_unnecessary_dependencies($root) : void
        {
        }
        /**
         * Get the dependencies of the squad scripts.
         *
         * @param _WP_Dependency[] $registered The registered scripts.
         *
         * @return array
         */
        public function get_squad_dependencies(array $registered) : array
        {
        }
    }
    /**
     * Class Requirements
     *
     * Handles the management of Divi requirements for Squad Modules.
     *
     * @since   3.2.0
     * @package DiviSquad
     */
    class Requirements
    {
        /**
         * Required Divi version.
         *
         * @var mixed
         */
        private $required_version;
        /**
         * Get Divi installation status.
         *
         * Checks if the Divi theme or Extra theme is active, or if the Divi Builder plugin is active.
         *
         * @since 3.2.0
         *
         * @return bool True if Divi or Extra theme is active, or Divi Builder plugin is active, false otherwise.
         */
        public function did_fulfilled() : bool
        {
        }
        /**
         * Register the admin page.
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function register_pre_loaded_admin_page() : void
        {
        }
        /**
         * Register the admin page.
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function register_admin_page() : void
        {
        }
        /**
         * Remove all notices from the squad template pages.
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function clean_admin_content_section() : void
        {
        }
        /**
         * Render the admin page.
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_admin_page() : void
        {
        }
        /**
         * Get notice content based on Divi status
         *
         * @since 3.2.0
         *
         * @return string
         */
        private function get_notice_content() : string
        {
        }
    }
}
namespace DiviSquad\Core\Supports {
    /**
     * Link Class
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Links
    {
        /**
         * The plugin home URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const HOME_URL = 'https://squadmodules.com/';
        /**
         * The plugin support URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const PRICING_URL = 'https://squadmodules.com/pricing/';
        /**
         * The plugin issues URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const ISSUES_URL = 'https://github.com/thewpsquad/squad-modules/issues';
        /**
         * The plugin URL from WP.org.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const WP_ORG_URL = 'http://wordpress.org/plugins/squad-modules-for-divi/';
        /**
         * The plugin support URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const SUPPORT_URL = 'https://wordpress.org/support/plugin/squad-modules-for-divi/#postform';
        /**
         * The plugin ratting URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const RATTING_URL = 'https://wordpress.org/support/plugin/squad-modules-for-divi/reviews/?rate=5#new-post';
        /**
         * The plugin translate URL.
         *
         * @since 3.0.0
         *
         * @var string
         */
        const TRANSLATE_URL = 'https://translate.wordpress.org/projects/wp-plugins/squad-modules-for-divi';
    }
}
namespace DiviSquad\Core\Supports\Media {
    /**
     * The Image Class with performance optimizations.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Image
    {
        use \DiviSquad\Core\Traits\UseWPFilesystem;
        /**
         * Cache of loaded images.
         *
         * @var array
         */
        protected array $images = array();
        /**
         * KSES defaults for HTML filtering.
         *
         * @var array
         */
        protected array $kses_defaults = array();
        /**
         * Base image directory path.
         *
         * @var string
         */
        protected string $path;
        /**
         * Supported image types.
         *
         * @var array
         */
        protected array $valid_types = array('png', 'jpg', 'jpeg', 'gif', 'svg');
        /**
         * Path validation status.
         *
         * @var bool|WP_Error
         */
        protected $path_validated;
        /**
         * File modification time cache.
         *
         * @var array
         */
        protected array $mtime_cache = array();
        /**
         * Constructor with enhanced initialization.
         *
         * @param string $path Base image directory path.
         */
        public function __construct(string $path)
        {
        }
        /**
         * Get image with optimized loading and caching.
         *
         * @param string $image     Image filename.
         * @param string $type      Image type.
         * @param bool   $as_base64 Whether to return base64 encoded image.
         *
         * @return string|WP_Error Base64 encoded image, raw image data, or error.
         */
        public function get_image(string $image, string $type, bool $as_base64 = true)
        {
        }
        /**
         * Process image as base64.
         *
         * @param string $image_data Raw image data.
         * @param string $type       Image type.
         *
         * @return string Base64 encoded image data.
         */
        protected function process_as_base64(string $image_data, string $type) : string
        {
        }
        /**
         * Get raw image data.
         *
         * @param string $image Image filename.
         *
         * @return string|WP_Error Raw image data or error.
         */
        protected function get_image_raw(string $image)
        {
        }
        /**
         * Validate image type.
         *
         * @param string $type Image type to validate.
         *
         * @return bool Whether the type is valid.
         */
        protected function validate_image_type(string $type) : bool
        {
        }
        /**
         * Validate the image directory path.
         *
         * @return bool|WP_Error
         */
        protected function validate_path()
        {
        }
        /**
         * Check if the image path is validated.
         *
         * @return bool|WP_Error
         */
        public function is_path_validated()
        {
        }
        /**
         * Clear the image cache.
         *
         * @return void
         */
        public function clear_cache() : void
        {
        }
        /**
         * Clear cache for a specific image.
         *
         * @param string $image Image filename.
         * @param string $type  Image type.
         *
         * @return void
         */
        public function clear_image_cache(string $image, string $type) : void
        {
        }
        /**
         * Get allowed HTML for image with enhanced caching.
         *
         * @return array
         */
        public function get_image_allowed_html() : array
        {
        }
    }
    /**
     * The Mask Shape class.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class MaskShape
    {
    }
}
namespace DiviSquad\Core\Supports\Polyfills {
    /**
     * Array Helper class.
     *
     * @package DiviSquad
     * @since   1.2.3
     */
    class Arr
    {
        /**
         * Polyfill for array_key_first() function added in PHP 7.3.
         *
         * Get the first key of the given array without affecting the internal array pointer.
         *
         * @param mixed $a An array.
         *
         * @return string|int|null The first key of array if the array is not empty; `null` otherwise.
         */
        public static function key_first($a)
        {
        }
        /**
         * Polyfill for `array_key_last()` function added in PHP 7.3.
         *
         * Get the last key of the given array without affecting the internal array pointer.
         *
         * @param mixed $a An array.
         *
         * @return string|int|null The last key of array if the array is not empty; `null` otherwise.
         */
        public static function key_last($a)
        {
        }
        /**
         * Check current array data is a list
         *
         * @param array $a The array data.
         *
         * @return bool
         */
        public static function is_list(array $a) : bool
        {
        }
        /**
         * Simple function to sort an array by a specific key. Maintains index association.
         *
         * <code>
         * print_r(array_sort($people, 'age', SORT_DESC)); // Sort by oldest first
         * print_r(array_sort($people, 'surname', SORT_ASC)); // Sort by surname
         * </code>
         *
         * @param array  $array_data The input array.
         * @param string $on         The column number.
         * @param int    $order      The optional parameter flags may be used to modify the sorting behavior using these values.
         *
         * @return array
         */
        public static function sort(array $array_data, string $on, int $order = SORT_ASC) : array
        {
        }
    }
    /**
     * Constant class.
     *
     * @package DiviSquad
     * @since   3.1.1
     */
    class Constant
    {
        /**
         * PHP_INT_MAX constants.
         *
         * @var integer
         */
        const PHP_INT_MAX = 9223372036854775807;
        /**
         * PHP_INT_MIN constants.
         *
         * @var integer
         */
        const PHP_INT_MIN = -9.223372036854776E+18;
        // @phpstan-ignore-line
    }
}
namespace DiviSquad\Core\Supports {
    /**
     * Site Health Info Manager.
     *
     * @package DiviSquad
     * @author  The WP Squad <support@squadmodules.com>
     * @since   3.1.0
     */
    class Site_Health
    {
        /**
         * Site_Health constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add section to Info tab.
         *
         * @param array $debug_info Array of all information.
         *
         * @return array Array with added info section.
         * @since 3.1.0
         */
        public function add_info_section(array $debug_info) : array
        {
        }
        /**
         * Get info fields for the Site Health section.
         *
         * @return array
         */
        private function get_info_fields() : array
        {
        }
    }
}
namespace DiviSquad\Core\Supports\Utils {
    /**
     * Helper functions to work with dates, time and timezones.
     *
     * @package DiviSquad
     * @since 3.1.0
     */
    class DateTime
    {
        /**
         * Return date and time formatted as expected.
         *
         * @since 1.6.3
         *
         * @param string|int $date       Date to format.
         * @param string     $format     Optional. Format for the date and time.
         * @param bool       $gmt_offset Optional. GTM offset.
         *
         * @return string
         */
        public static function datetime_format($date, string $format = '', bool $gmt_offset = false) : string
        {
        }
    }
}
namespace DiviSquad\Core\Traits {
    /**
     * Enhanced DeprecatedClassLoader Trait
     *
     * Provides improved handling of deprecated classes with better performance,
     * lazy loading, and more robust error handling.
     *
     * @since 3.2.0
     * @package DiviSquad
     */
    trait DeprecatedClassLoader
    {
        /**
         * Deprecated classes configuration cache
         * Using WeakMap to allow garbage collection of unused class configs
         *
         * @since 3.2.0
         *
         * @var array
         */
        private array $deprecated_classes_cache;
        /**
         * Loaded class status tracking
         *
         * @since 3.2.0
         *
         * @var array<string, bool>
         */
        private array $loaded_classes = array();
        /**
         * Initialize the deprecated class loader with improved caching and validation
         *
         * @since 3.2.0
         *
         * @return void
         * @throws RuntimeException If initialization fails
         */
        public function init_deprecated_class_loader() : void
        {
        }
        /**
         * Load and validate deprecated class configurations
         *
         * @since 3.2.0
         *
         * @return void
         */
        private function load_deprecated_class_configs() : void
        {
        }
        /**
         * Validate deprecated class configuration
         *
         * @since 3.2.0
         *
         * @param string $class_name Class name to validate
         * @param array  $config     Configuration to validate
         *
         * @return bool Whether configuration is valid
         */
        private function validate_class_config(string $class_name, array $config) : bool
        {
        }
        /**
         * Register a deprecated class for lazy loading
         *
         * @since 3.2.0
         *
         * @param string $class_name Full class name
         * @param array  $config     Class configuration
         *
         * @return void
         */
        private function register_deprecated_class(string $class_name, array $config) : void
        {
        }
        /**
         * Schedule class loading via WordPress hook
         *
         * @since 3.2.0
         *
         * @param string $class_name Class to schedule
         * @param array  $config     Loading configuration
         *
         * @return void
         */
        private function schedule_class_loading(string $class_name, array $config) : void
        {
        }
        /**
         * Normalize class configuration with defaults
         *
         * @since 3.2.0
         *
         * @param array $config Raw configuration
         *
         * @return array Normalized configuration
         */
        private function normalize_class_config(array $config) : array
        {
        }
        /**
         * Load a class file with proper error handling
         *
         * @since 3.2.0
         *
         * @param string $class_name Class to load
         * @param string $file_path  File path to load
         *
         * @return bool Whether loading succeeded
         */
        private function load_class_file(string $class_name, string $file_path) : bool
        {
        }
        /**
         * Load a scheduled class with condition checking
         *
         * @since 3.2.0
         *
         * @param string $class_name Class to load
         *
         * @return void
         */
        private function load_scheduled_class(string $class_name) : void
        {
        }
        /**
         * Evaluate a loading condition
         *
         * @since 3.2.0
         * @param callable|array $condition Condition to evaluate
         * @param string         $class_name Context class name
         * @return bool Whether condition passes
         */
        private function evaluate_condition($condition, string $class_name) : bool
        {
        }
        /**
         * Execute a callback if valid
         *
         * @since 3.2.0
         *
         * @param callable|null $callback   Callback to execute
         * @param string        $class_name Context class name
         *
         * @return void
         */
        private function execute_callback(?callable $callback, string $class_name) : void
        {
        }
        /**
         * Get the file path for a deprecated class.
         *
         * @since 3.1.1
         *
         * @param string $class_name The full class name.
         *
         * @return string Absolute path to the deprecated class file
         */
        protected function get_deprecated_class_path(string $class_name) : string
        {
        }
    }
    /**
     * Trait DetectPluginLife
     *
     * Handles plugin version detection and environment checks for Divi Squad plugins.
     * Supports both development and release environments with extensible filter hooks.
     *
     * @since   3.2.0
     * @package DiviSquad
     */
    trait DetectPluginLife
    {
        /**
         * Cached production environment status
         *
         * @since 3.2.0
         * @var bool|null
         */
        private static ?bool $cached_prod_status = null;
        /**
         * Cached premium installation status
         *
         * @since 3.2.0
         * @var bool|null
         */
        private static ?bool $cached_pro_installed = null;
        /**
         * Cached plugin life type
         *
         * @since 3.2.0
         * @var string|null
         */
        private static ?string $cached_life_type = null;
        /**
         * Check if the current environment is production.
         * Handles both dev structure (/squad-modules-for-divi) and release structure (/includes).
         *
         * @since 3.2.0
         * @deprecated 3.2.0 Use $this->is_prod() instead
         *
         * @return bool Returns true if running in production environment
         */
        public function is_prod() : bool
        {
        }
        /**
         * Get the plugin basename of the premium version.
         * Handles different path structures between dev and release environments.
         *
         * @since 3.2.0
         *
         * @return string Returns the pro plugin basename
         */
        public function get_pro_basename() : string
        {
        }
        /**
         * Check if the premium version is activated.
         *
         * @since 3.2.0
         *
         * @return bool Returns true if premium version is active, null if status unknown
         */
        public function is_pro_activated() : bool
        {
        }
        /**
         * Check if running in development environment.
         * Development environment is identified by presence of development-specific files and directories.
         *
         * @since 3.2.0
         *
         * @return bool Returns true if in development environment
         */
        public function is_dev() : bool
        {
        }
        /**
         * Get the plugin life type.
         * Determines environment type based on filesystem structure and premium activation status.
         *
         * @since 3.2.0
         *
         * @return string Returns 'development', 'freemium', or 'premium'
         */
        private function get_plugin_life_type() : string
        {
        }
        /**
         * Check if current installation matches a specific version.
         *
         * @since 3.2.0
         *
         * @param string $version Version to check ('freemium', 'premium', 'development')
         *
         * @return bool True if running specified version
         */
        public function is_version(string $version) : bool
        {
        }
    }
    /**
     * Logger Trait
     *
     * Provides common logging functionality for WordPress plugins.
     *
     * @since      3.2.0
     * @package    DiviSquad
     * @subpackage Base\Traits
     */
    trait Logger
    {
        /**
         * Plugin identifier for log messages.
         *
         * @since 3.2.0
         * @var string
         */
        protected string $log_identifier = 'Squad Modules';
        /**
         * Set the log identifier for this instance.
         *
         * @since 3.2.0
         * @access public
         *
         * @param string $identifier The identifier to use in log messages.
         * @return void
         */
        public function set_log_identifier(string $identifier) : void
        {
        }
        /**
         * Format and write a log message.
         *
         * @since 3.2.0
         * @access protected
         *
         * @param string $level   Log level (ERROR, DEBUG, etc.).
         * @param mixed  $message Message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional data to log.
         * @return void
         */
        protected function write_log(string $level, $message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Format error details for logging.
         *
         * @since 3.2.0
         * @access protected
         *
         * @param Throwable $error   Error object to format.
         * @return string
         */
        protected function format_error_message(\Throwable $error) : string
        {
        }
        /**
         * Add debug backtrace to log message if debug mode is enabled.
         *
         * @since 3.2.0
         * @access protected
         *
         * @param Throwable $error Error object with stack trace.
         * @return void
         */
        protected function log_debug_trace(\Throwable $error) : void
        {
        }
        /**
         * Log a deprecated notice.
         *
         * @since 3.2.0
         * @access public
         *
         * @param string $feature     The deprecated feature.
         * @param string $version     Version since deprecation.
         * @param string $replacement Replacement feature if any.
         * @return void
         */
        public function log_deprecated(string $feature, string $version, string $replacement = '') : void
        {
        }
        /**
         * Log an error message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param Throwable $error       The error that occurred.
         * @param string    $context     Error context description.
         * @param bool      $send_report Whether to send an error report.
         * @param array     $extra_data  Additional data to include.
         * @return void
         */
        public function log_error(\Throwable $error, string $context, bool $send_report = true, array $extra_data = array()) : void
        {
        }
        /**
         * Log a debug message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param mixed  $message Debug message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional debug data.
         * @return void
         */
        public function log_debug($message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Log an informational message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param mixed  $message Informational message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional data.
         * @return void
         */
        protected function log_info($message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Log a warning message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param mixed  $message Warning message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional data.
         * @return void
         */
        protected function log_warning($message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Log a notice message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param mixed  $message Notice message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional data.
         * @return void
         */
        protected function log_notice($message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Log an error message.
         *
         * @since 3.2.0
         * @access public
         *
         * @param mixed  $message Error message to log.
         * @param string $context Context identifier.
         * @param array  $data    Additional data.
         * @return void
         */
        protected function log_critical($message, string $context = 'General', array $data = array()) : void
        {
        }
        /**
         * Send an error report.
         *
         * @since 3.2.0
         * @access protected
         *
         * @param Throwable $error      The error that occurred.
         * @param string    $context    Error context description.
         * @param array     $extra_data Additional data to include.
         * @return void
         */
        protected function send_error_report(\Throwable $error, string $context, array $extra_data = array()) : void
        {
        }
    }
}
namespace DiviSquad\Extensions {
    /**
     * The Post Duplicator class.
     *
     * @package DiviSquad
     * @since   1.4.8
     */
    class Copy extends \DiviSquad\Base\Extension
    {
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected function get_name() : string
        {
        }
        /**
         * Load the extension.
         *
         * @return void
         */
        protected function load() : void
        {
        }
        /**
         * Add CSS body class name for the available post or page.
         *
         * @param string $classes An array of body class names.
         *
         * @return string
         */
        public function admin_body_class(string $classes) : string
        {
        }
        /**
         * Enqueuing scripts for all admin pages.
         *
         * @return void
         */
        public function admin_enqueue_scripts() : void
        {
        }
        /**
         * Enqueuing scripts for all admin pages.
         *
         * @return void
         */
        public function admin_footer_template() : void
        {
        }
        /**
         * Verify allowed screen.
         *
         * @return bool
         */
        public function is_allowed_admin_screen() : bool
        {
        }
        /**
         * Set localize data for admin area.
         *
         * @param array $exists_data Exists extra data.
         *
         * @return array
         */
        public function wp_localize_script_data(array $exists_data) : array
        {
        }
        /**
         * Add the duplicate link to post, page, and custom actions
         *
         * @param string[] $actions An array of row action links. Defaults are 'Edit', 'Quick Edit', 'Restore', 'Trash', 'Delete Permanently', 'Preview', and 'View'.
         * @param WP_Post  $post    The post-object.
         *
         * @return string[] An array of row action links.
         */
        public function row_actions(array $actions, \WP_Post $post) : array
        {
        }
        /**
         * Add duplicate action in the bulk actions menu of the list table.
         *
         * @param array $actions An array of the available bulk actions.
         *
         * @return string[] An array of bulk actions.
         */
        public function bulk_actions(array $actions) : array
        {
        }
        /**
         * Get the allowed list table for row actions.
         *
         * @return string[]
         */
        public function get_allowed_list_table_for_row_actions() : array
        {
        }
        /**
         * Get the allowed post types.
         *
         * @return string[]
         */
        public function get_allowed_post_types_for_bulk_actions() : array
        {
        }
        /**
         * Duplicate the post.
         *
         * @param array $options The post duplication options.
         *
         * @return void
         * @throws \RuntimeException When the post duplication failed.
         */
        public static function duplicate_the_post(array $options)
        {
        }
    }
    /**
     * The Divi Library Shortcode class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    class Divi_Layout_Shortcode extends \DiviSquad\Base\Extension
    {
        /**
         * Create New Admin Column
         *
         * @param array $columns Exists columns array data.
         *
         * @return array
         */
        public function create_shortcode_column(array $columns) : array
        {
        }
        /**
         * Get the column slug.
         *
         * @return string
         */
        protected function get_column_slug() : string
        {
        }
        /**
         * Get the column name.
         *
         * @return string
         */
        protected function get_column_name() : string
        {
        }
        /**
         * Display Shortcode
         *
         * @param string $column The current column name.
         * @param int    $id     The current post id.
         *
         * @return void
         */
        public function shortcode_column_content(string $column, int $id) : void
        {
        }
        /**
         * Get the column content.
         *
         * @param int $id The current post id.
         *
         * @return string
         */
        protected function get_column_content(int $id) : string
        {
        }
        /**
         * Create New Shortcode
         *
         * @param array|string|mixed $atts The attributes of the current shortcode.
         *
         * @return string
         */
        public function shortcode_callback($atts) : string
        {
        }
        /**
         * Set a random high-module index when rendering in the visual builder to avoid conflicts with other modules on the same page
         *
         * @param mixed $value The content of current shortcode.
         *
         * @return mixed
         */
        public function shortcode_set_ajax_module_index($value)
        {
        }
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected function get_name() : string
        {
        }
        /**
         * Load the extension.
         *
         * @return void
         */
        protected function load() : void
        {
        }
    }
    /**
     * The Font Upload class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    class Font_Upload extends \DiviSquad\Base\Extension
    {
        /**
         * Allow extra mime type file upload in the current installation.
         *
         * @param array $existing_mimes The existing mime lists.
         *
         * @return array All mime lists with newly appended mimes.
         */
        public function hook_add_extra_mime_types(array $existing_mimes) : array
        {
        }
        /**
         * All mime lists with newly appended mimes.
         *
         * @return array
         */
        protected function get_available_mime_types() : array
        {
        }
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected function get_name() : string
        {
        }
        /**
         * Load the extension.
         *
         * @return void
         */
        protected function load() : void
        {
        }
    }
    /**
     * The JSON class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    class JSON extends \DiviSquad\Base\Extension
    {
        /**
         * Allow extra mime type file upload in the current installation.
         *
         * @since 1.0.0
         *
         * @param array $existing_mimes The existing mime lists.
         *
         * @return array All mime lists with newly appended mimes.
         */
        public function hook_add_extra_mime_types(array $existing_mimes) : array
        {
        }
        /**
         * All mime lists with newly appended mimes.
         *
         * @return array
         */
        public function get_available_mime_types() : array
        {
        }
        /**
         * Filters the "real" file type of the given file.
         *
         * @param array  $wp_checked Values for the extension, mime type, and corrected filename.
         * @param string $file       Full path to the file.
         * @param string $filename   The name of the file.
         */
        public function hook_wp_check_filetype_and_ext(array $wp_checked, string $file, string $filename) : array
        {
        }
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected function get_name() : string
        {
        }
        /**
         * Load the extension.
         *
         * @return void
         */
        protected function load() : void
        {
        }
    }
    /**
     * The SVG class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    class SVG extends \DiviSquad\Base\Extension
    {
        /**
         * Allow extra mime type file upload in the current installation.
         *
         * @since 1.0.0
         *
         * @param array $existing_mimes The existing mime lists.
         *
         * @return array All mime lists with newly appended mimes.
         */
        public function hook_add_extra_mime_types(array $existing_mimes) : array
        {
        }
        /**
         * All mime lists with newly appended mimes.
         *
         * @return array
         */
        public function get_available_mime_types() : array
        {
        }
        /**
         * Filters the "real" file type of the given file.
         *
         * @param array         $wp_check Values for the extension, mime type, and corrected filename.
         * @param string        $file     Full path to the file.
         * @param string        $filename The name of the file.
         * @param string[]|null $mimes    Array of mime types keyed by their file extension regex.
         */
        public function enable__upload(array $wp_check, string $file, string $filename, $mimes = null) : array
        {
        }
        /**
         * Get the extension name.
         *
         * @return string
         */
        protected function get_name() : string
        {
        }
        /**
         * Load the extension.
         *
         * @return void
         */
        protected function load() : void
        {
        }
    }
}
namespace DiviSquad\Integrations {
    /**
     * Divi Squad Core Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    abstract class Core extends \DiviSquad\Base\Core
    {
        /**
         * Load the divi custom modules for the divi builder.
         *
         * @return void
         */
        protected function load_modules_for_builder()
        {
        }
        /**
         *  Load the settings migration.
         *
         * @return void
         */
        public function hook_migrate_builder_settings()
        {
        }
        /**
         *  Load the extensions.
         *
         * @return void
         */
        public function hook_initialize_builder_extension()
        {
        }
        /**
         * Used to update the content of the cached definitions js file.
         *
         * @return void
         */
        public function hook_initialize_builder_asset_definitions()
        {
        }
    }
    /**
     * Divi Squad Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class DiviBuilder extends \DiviSquad\Base\DiviBuilder\Integration\ShortcodeAPI
    {
        /**
         * Get the plugin version number
         *
         * @return string
         */
        public function get_version() : string
        {
        }
        /**
         * Loads custom modules when the builder is ready.
         *
         * @since 1.0.0
         */
        public function hook_et_builder_ready()
        {
        }
    }
    /**
     * Define integration helper functionalities for this plugin.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class DiviBuilderBackend extends \DiviSquad\Base\DiviBuilder\Placeholder
    {
        /**
         * Used to update the content of the cached definitions js file.
         *
         * @param string $content content.
         *
         * @return string
         */
        public function asset_definitions($content) : string
        {
        }
        /**
         * Filters backend data passed to the Visual Builder.
         * This function is used to add static helpers whose content rarely changes.
         * eg: google fonts, module defaults, and so on.
         *
         * @param array $exists The existed definitions.
         *
         * @return array
         */
        public function static_asset_definitions($exists = array()) : array
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * The Ajax actions handler class.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    class Ajax
    {
        /**
         * Load all ajax action.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
}
namespace DiviSquad\Managers\Assets {
    /**
     * Admin class for managing admin-related assets and localization.
     *
     * This class is responsible for registering and enqueuing scripts and styles
     * for the DiviSquad plugin's admin area, as well as preparing localized data
     * for use in JavaScript.
     *
     * @since   3.0.0
     * @package DiviSquad
     */
    class Admin extends \DiviSquad\Base\Factories\PluginAsset\Asset
    {
        /**
         * Enqueue scripts, styles, and other assets in the WordPress admin area.
         *
         * This method is the main entry point for enqueueing admin-specific assets.
         * It checks if the current context is admin and delegates to specific methods
         * for enqueueing scripts and styles.
         *
         * @since 3.0.0
         *
         * @param string $type        The type of the script. Default is 'frontend'.
         * @param string $hook_suffix The hook suffix for the current admin page.
         */
        public function enqueue_scripts($type = 'frontend', $hook_suffix = '')
        {
        }
        /**
         * Localize script data for use in JavaScript.
         *
         * This method prepares data to be localized and made available to JavaScript
         * in the admin area. It combines common data with admin-specific data.
         *
         * @since 3.0.0
         *
         * @param string       $type The type of the localize data. Default is 'raw'.
         * @param string|array $data The data to localize.
         * @return string|array The localized data.
         * @throws Exception
         */
        public function get_localize_data($type = 'raw', $data = array())
        {
        }
        /**
         * Enqueue the plugin's scripts and styles files in the WordPress admin area.
         *
         * This method handles the enqueuing of both common admin assets and
         * Squad-specific assets when on a Squad admin page.
         *
         * @since 3.0.0
         *
         * @param string $hook_suffix Hook suffix for the current admin page.
         */
        protected function enqueue_admin_scripts(string $hook_suffix)
        {
        }
        /**
         * Enqueue common admin assets.
         *
         * This method enqueues scripts and styles that are common to all admin pages.
         *
         * @since 3.0.0
         */
        protected function enqueue_common_admin_assets()
        {
        }
        /**
         * Enqueue assets specific to Squad pages.
         *
         * This method enqueues scripts and styles that are specific to Squad admin pages.
         *
         * @since 3.0.0
         */
        protected function enqueue_squad_page_assets()
        {
        }
        /**
         * Get common localize data for admin area.
         *
         * This method prepares common data to be localized for use in JavaScript,
         * including AJAX URL, asset URL, and REST API routes.
         *
         * @since 3.0.0
         *
         * @param array $existing_data Existing extra data.
         *
         * @return array Combined localized data.
         */
        protected function get_common_localize_data(array $existing_data) : array
        {
        }
        /**
         * Get admin-specific localize data.
         *
         * This method prepares admin-specific data to be localized for use in JavaScript,
         * including version information, admin menus, premium status, links, and more.
         *
         * @since 3.0.0
         *
         * @param array $existing_data Existing extra data.
         *
         * @return array Combined localized data.
         * @throws Exception
         */
        protected function get_admin_localize_data(array $existing_data) : array
        {
        }
        /**
         * Check if the current page is a valid Squad page.
         *
         * This method determines if the current admin page is a Squad-specific page.
         *
         * @since 3.0.0
         *
         * @return bool True if it's a valid Squad page, false otherwise.
         */
        protected function is_valid_squad_page() : bool
        {
        }
        /**
         * Get registered admin menus.
         *
         * This method retrieves the registered admin submenus for the Squad plugin.
         *
         * @since 3.0.0
         *
         * @return array An array of registered admin submenus.
         */
        protected function get_admin_menus() : array
        {
        }
        /**
         * Get premium status information.
         *
         * This method checks and returns information about the premium status of the plugin.
         *
         * @since 3.0.0
         *
         * @return array An array containing premium status information.
         * @throws Exception
         */
        protected function get_premium_status() : array
        {
        }
        /**
         * Get admin links.
         *
         * This method prepares an array of important admin links for the Squad plugin.
         *
         * @since 3.0.0
         *
         * @return array An array of admin links.
         * @throws Exception
         */
        protected function get_admin_links() : array
        {
        }
        /**
         * Get localized strings.
         *
         * This method prepares an array of localized strings for use in JavaScript.
         *
         * @since 3.0.0
         *
         * @return array An array of localized strings.
         */
        protected function get_localized_strings() : array
        {
        }
    }
    /**
     * Modules class for managing module-related assets.
     *
     * This class is responsible for registering and enqueuing scripts and styles
     * for DiviSquad modules, both in the frontend and in the Divi Builder.
     *
     * @since 3.0.0
     * @package DiviSquad
     */
    class Modules extends \DiviSquad\Base\Factories\PluginAsset\Asset
    {
        /**
         * Enqueue scripts and styles for modules.
         *
         * This method is the main entry point for enqueueing module-specific assets.
         * It checks if the current context is frontend and delegates to specific methods
         * for enqueueing scripts and styles.
         *
         * @since 3.0.0
         *
         * @param string $type        The type of the script. Default is 'frontend'.
         * @param string $hook_suffix The hook suffix for the current admin page.
         */
        public function enqueue_scripts($type = 'frontend', $hook_suffix = '')
        {
        }
        /**
         * Get localized script data for modules.
         *
         * This method prepares data to be localized and made available to JavaScript
         * for use with modules.
         *
         * @since 3.0.0
         *
         * @param string       $type The type of the localize data. Default is 'raw'.
         * @param string|array $data The data to localize.
         * @return string|array
         */
        public function get_localize_data($type = 'raw', $data = array())
        {
        }
        /**
         * Enqueue frontend scripts for modules.
         *
         * This method handles the registration and enqueuing of scripts
         * needed for DiviSquad modules in the frontend.
         *
         * @since 3.0.0
         */
        protected function enqueue_frontend_scripts()
        {
        }
        /**
         * Register vendor scripts used by modules.
         *
         * This method registers third-party scripts that are used by DiviSquad modules.
         *
         * @since 3.0.0
         */
        protected function register_vendor_scripts()
        {
        }
        /**
         * Register module-specific scripts.
         *
         * This method registers scripts that are specific to individual DiviSquad modules.
         *
         * @since 3.0.0
         */
        protected function register_module_scripts()
        {
        }
        /**
         * Enqueue scripts for the Divi Builder.
         *
         * This method handles the enqueuing of scripts needed for DiviSquad modules
         * when used within the Divi Builder.
         *
         * @since 3.0.0
         */
        protected function enqueue_builder_scripts()
        {
        }
        /**
         * Enqueue vendor scripts for the Divi Builder.
         *
         * This method enqueues third-party scripts needed in the Divi Builder context.
         *
         * @since 3.0.0
         */
        protected function enqueue_vendor_scripts()
        {
        }
        /**
         * Enqueue form styles for the Divi Builder.
         *
         * This method enqueues styles for various form plugins when used within the Divi Builder.
         *
         * @since 3.0.0
         */
        protected function enqueue_form_styles()
        {
        }
        /**
         * Enqueue Contact Form 7 styles.
         *
         * @since 3.0.0
         */
        protected function enqueue_contact_form7_style()
        {
        }
        /**
         * Enqueue WPForms styles.
         *
         * @since 3.0.0
         */
        protected function enqueue_wpforms_style()
        {
        }
        /**
         * Enqueue Gravity Forms styles.
         *
         * @since 3.0.0
         */
        protected function enqueue_gravity_forms_style()
        {
        }
        /**
         * Register and enqueue legacy Gravity Forms styles.
         *
         * @since 3.0.0
         *
         * @param string $base_url Base URL for Gravity Forms.
         * @param string $version  Gravity Forms version.
         * @param string $min      Minification suffix.
         */
        protected function register_and_enqueue_gf_legacy_styles(string $base_url, string $version, string $min)
        {
        }
        /**
         * Register and enqueue modern Gravity Forms styles.
         *
         * @since 3.0.0
         *
         * @param string $base_url Base URL for Gravity Forms.
         * @param string $version  Gravity Forms version.
         * @param string $min      Minification suffix
         */
        protected function register_and_enqueue_gf_modern_styles(string $base_url, string $version, string $min)
        {
        }
        /**
         * Enqueue Ninja Forms styles.
         *
         * @since 3.0.0
         */
        protected function enqueue_ninja_forms_style()
        {
        }
        /**
         * Enqueue Fluent Forms styles.
         *
         * @since 3.0.0
         */
        protected function enqueue_fluent_forms_style()
        {
        }
        /**
         * Enqueue Formidable Forms styles.
         *
         * @since 3.2.0
         */
        protected function enqueue_forminator_forms_style()
        {
        }
        /**
         * Register Magnific Popup script.
         *
         * @since 3.0.0
         */
        protected function register_magnific_popup()
        {
        }
        /**
         * Enqueue Magnific Popup script.
         *
         * @since 3.0.0
         */
        protected function enqueue_magnific_popup()
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * The plugin branding management class.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Branding
    {
        /**
         * Load all the branding.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
}
namespace DiviSquad\Managers\Branding {
    /**
     * Plugin Admin Footer Text class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class AdminFooterText extends \DiviSquad\Base\Factories\BrandAsset\Asset
    {
        /**
         * The branding type.
         *
         * @return string
         */
        public function get_type() : string
        {
        }
        /**
         * The branding position.
         *
         * @return string
         */
        public function get_position() : string
        {
        }
        /**
         * Filters the "Thank you" text displayed in the admin footer.
         *
         * @return  string
         * @since 1.3.2
         * @throws \Exception When the Freemius SDK is not loaded.
         */
        public function get_plugin_footer_text() : string
        {
        }
        /**
         * Filters the version/update text displayed in the admin footer.
         *
         * @return  string
         * @since 1.4.8
         * @throws \Exception When the Freemius SDK is not loaded.
         */
        public function get_update_footer_text() : string
        {
        }
    }
    /**
     * Plugin Action Links class
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class PluginActionLinks extends \DiviSquad\Base\Factories\BrandAsset\Asset
    {
        /**
         * The branding type.
         *
         * @return string
         */
        public function get_type() : string
        {
        }
        /**
         * The branding position.
         *
         * @return string
         */
        public function get_position() : string
        {
        }
        /**
         * The branding asset is allowed in network.
         *
         * @return bool
         */
        public function is_allow_network() : bool
        {
        }
        /**
         * The plugin action links.
         *
         * @return array
         */
        public function get_action_links() : array
        {
        }
    }
    /**
     * Plugin Row Meta class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class PluginRowActions extends \DiviSquad\Base\Factories\BrandAsset\Asset
    {
        /**
         * The branding type.
         *
         * @return string
         */
        public function get_type() : string
        {
        }
        /**
         * The branding position.
         *
         * @return string
         */
        public function get_position() : string
        {
        }
        /**
         * The plugin row meta actions.
         *
         * @return  array
         * @throws \Exception When the Freemius SDK is not loaded.
         */
        public function get_row_actions() : array
        {
        }
    }
}
namespace DiviSquad\Managers\Emails {
    /**
     * Class ErrorReport
     *
     * Handles error report email creation and delivery with rate limiting,
     * validation, and comprehensive error handling.
     *
     * @since   3.1.7
     * @package DiviSquad\Managers\Emails
     */
    class ErrorReport
    {
        /**
         * Support email recipient
         *
         * @var string
         */
        private string $to = 'support@squadmodules.com';
        /**
         * Error report data
         *
         * @var array
         */
        private array $data = array();
        /**
         * WP_Error instance for error handling
         *
         * @var WP_Error
         */
        private \WP_Error $errors;
        /**
         * Email sending result
         *
         * @var bool
         */
        private bool $result = false;
        /**
         * Rate limit key prefix
         *
         * @var string
         */
        private const RATE_LIMIT_KEY = 'squad_error_report_';
        /**
         * Rate limit window in seconds (15 minutes)
         *
         * @var int
         */
        private const RATE_LIMIT_WINDOW = 900;
        /**
         * Maximum reports per window
         *
         * @var int
         */
        private const MAX_REPORTS = 5;
        /**
         * Required data fields
         *
         * @var array
         */
        private const REQUIRED_FIELDS = array('error_message', 'error_code', 'error_file', 'error_line');
        /**
         * Initialize error report
         *
         * @since 3.1.7
         *
         * @param array $data Error report data
         */
        public function __construct(array $data)
        {
        }
        /**
         * Send error report email with rate limiting and validation
         *
         * @since 3.1.7
         * @return bool Success status
         */
        public function send() : bool
        {
        }
        /**
         * Validate required data fields
         *
         * @since 3.1.7
         * @return bool Validation result
         */
        private function validate_data() : bool
        {
        }
        /**
         * Sanitize input data
         *
         * @since 3.1.7
         *
         * @param array $data Raw input data
         *
         * @return array Sanitized data
         */
        private function sanitize_data(array $data) : array
        {
        }
        /**
         * Get formatted error messages
         *
         * @since 3.1.7
         * @return array Error messages
         */
        private function get_error_messages() : array
        {
        }
        /**
         * Check if rate limit is exceeded
         *
         * @since 3.1.7
         * @return bool Whether sending is allowed
         */
        private function check_rate_limit() : bool
        {
        }
        /**
         * Increment rate limit counter
         *
         * @since 3.1.7
         */
        private function increment_rate_limit() : void
        {
        }
        /**
         * Get rate limit key for current site
         *
         * @since 3.1.7
         * @return string Rate limit key
         */
        private function get_rate_limit_key() : string
        {
        }
        /**
         * Add email filters
         *
         * @since 3.1.7
         */
        private function add_email_filters() : void
        {
        }
        /**
         * Remove email filters
         *
         * @since 3.1.7
         */
        private function remove_email_filters() : void
        {
        }
        /**
         * Generate email subject
         *
         * @since 3.1.7
         * @return string Email subject
         */
        private function get_email_subject() : string
        {
        }
        /**
         * Get email headers
         *
         * @since 3.1.7
         * @return array Email headers
         */
        private function get_email_headers() : array
        {
        }
        /**
         * Generate HTML email content
         *
         * @since 3.1.7
         * @return string Email HTML content
         */
        private function get_email_message_html() : string
        {
        }
        /**
         * Generate fallback message when template is missing
         *
         * @since 3.1.7
         */
        private function generate_fallback_message() : void
        {
        }
        /**
         * Get environment information
         *
         * @since 3.1.7
         * @return array Environment info
         */
        private function get_environment_info() : array
        {
        }
        /**
         * Set HTML content type
         *
         * @since 3.1.7
         * @return string Content type
         */
        public function set_html_content_type() : string
        {
        }
        /**
         * Handle mail failures
         *
         * @since 3.1.7
         *
         * @param WP_Error $error Mail error
         */
        public function set_failure_errors(\WP_Error $error) : void
        {
        }
        /**
         * Get error object
         *
         * @since 3.1.7
         * @return WP_Error Error object
         */
        public function get_errors() : \WP_Error
        {
        }
        /**
         * Get send result
         *
         * @since 3.1.7
         * @return bool Result
         */
        public function get_result() : bool
        {
        }
        /**
         * Send error report quickly
         *
         * @since 3.1.7
         *
         * @param mixed $exception       Error/Exception object
         * @param array $additional_data Additional context
         *
         * @return bool Success status
         */
        public static function quick_send($exception, array $additional_data = array()) : bool
        {
        }
        /**
         * Get active plugins
         *
         * @return string
         */
        private static function get_active_plugins_list() : string
        {
        }
        /**
         * Get the debug log.
         *
         * Retrieves the last 50 lines of the WordPress debug log file.
         *
         * @since 3.1.7
         *
         * @return string The last 50 lines of the debug log or an empty string if the log is not accessible.
         */
        private static function get_debug_log() : string
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * The Menu management class.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Menus
    {
        /**
         * Load all menus.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
}
namespace DiviSquad\Managers\Menus {
    /**
     * Menu class
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    class AdminMenu extends \DiviSquad\Base\Factories\AdminMenu\Menu
    {
        /**
         * Details about the Main Menu.
         *
         * @return  array Details about the Main Menu.
         */
        public function get_main_menu() : array
        {
        }
        /**
         * Details about the Sub Menu.
         *
         * @return  array Details about the Sub Menu.
         */
        public function get_sub_menus() : array
        {
        }
        /**
         * Load template file for admin pages.
         *
         * @return  void
         */
        public function get_template()
        {
        }
        /**
         * Add the CSS classes for the body tag in the admin.
         *
         * @return string
         */
        public function get_body_classes() : string
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * Migrations class for Divi Squad.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Migrations
    {
        /**
         * Initialize the migrations.
         *
         * @return void
         * @since  3.0.0
         */
        public static function init()
        {
        }
    }
    /**
     * Notices
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Notices
    {
        /**
         * Load all notices.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
}
namespace DiviSquad\Managers\Notices {
    /**
     * Welcome (60%) Campaign Class
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    class Discount extends \DiviSquad\Base\Factories\AdminNotice\Notice
    {
        /**
         * The notice id for the notice.
         *
         * @var string
         */
        protected $notice_id = 'welcome-60%-discount';
        /**
         * Check if we can render notice.
         */
        public function can_render_it() : bool
        {
        }
        /**
         * Filters the CSS classes for the body tag in the admin.
         *
         * @return string
         * @since 1.2.5
         */
        public function get_body_classes() : string
        {
        }
        /**
         * Get the template args.
         *
         * @return array
         */
        public function get_template_args() : array
        {
        }
    }
    /**
     * Pro Plugin Class
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    class ProActivation extends \DiviSquad\Base\Factories\AdminNotice\Notice
    {
        /**
         * The notice id for the notice.
         *
         * @var string
         */
        protected $notice_id = 'pro-activation';
        /**
         * Check if we can render notice.
         *
         * @throws \Exception If the notice can't be rendered.
         */
        public function can_render_it() : bool
        {
        }
        /**
         * Filters the CSS classes for the body tag in the admin.
         *
         * @return string
         * @since 1.2.5
         */
        public function get_body_classes() : string
        {
        }
        /**
         * Get the template arguments
         *
         * @return array
         * @since 3.0.0
         */
        public function get_template_args() : array
        {
        }
    }
    /**
     * Plugin Review Class
     *
     * @package DiviSquad
     * @since   1.2.3
     *
     * @ref essential-addons-for-elementor-lite/includes/Traits/Helper.php:551.
     */
    class Review extends \DiviSquad\Base\Factories\AdminNotice\Notice
    {
        /**
         * The notice id for the notice.
         *
         * @var string
         */
        protected $notice_id = 'review';
        /**
         * How Long timeout until first banner shown.
         *
         * @var int
         */
        private $first_time_show = 7;
        /**
         * Init constructor.
         */
        public function __construct()
        {
        }
        /**
         * Check if we can render notice.
         */
        public function can_render_it() : bool
        {
        }
        /**
         * Filters the CSS classes for the body tag in the admin.
         *
         * @return string
         * @since 1.2.5
         */
        public function get_body_classes() : string
        {
        }
        /**
         * Get the template arguments
         *
         * @return array
         * @since 3.0.0
         */
        public function get_template_args() : array
        {
        }
    }
}
namespace DiviSquad\Managers {
    /**
     * Handles loading and registration of plugin assets.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class PluginAssets
    {
        /**
         * Load all the branding.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
    /**
     * Rest API Routes
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class RestRoutes
    {
        /**
         * Load rest route on init time.
         *
         * @return void
         */
        public static function load()
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1 {
    /**
     * Extensions REST API Route Handler
     *
     * Manages REST API endpoints for Divi Squad extensions, including
     * retrieving available, active, and inactive extensions, as well as
     * updating the list of active extensions.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Extensions extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Key for active extensions in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const ACTIVE_EXTENSIONS_KEY = 'active_extensions';
        /**
         * Key for inactive extensions in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const INACTIVE_EXTENSIONS_KEY = 'inactive_extensions';
        /**
         * Key for active extension version in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const ACTIVE_EXTENSION_VERSION_KEY = 'active_extension_version';
        /**
         * Get available routes for the Extensions API.
         *
         * @since 1.0.0
         * @return array Available routes for the Extensions API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Get all registered extensions.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing all registered extensions.
         */
        public function get_extensions($request)
        {
        }
        /**
         * Get active extensions list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing active extensions.
         */
        public function get_active_extensions($request)
        {
        }
        /**
         * Get inactive extensions list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing inactive extensions.
         */
        public function get_inactive_extensions($request)
        {
        }
        /**
         * Get extension names from memory.
         *
         * Retrieves either active or inactive extension names from the plugin's memory.
         *
         * @since 1.0.0
         * @param string $key The key to retrieve from memory ('active_extensions' or 'inactive_extensions').
         * @return array List of extension names.
         */
        private function get_extension_names($key)
        {
        }
        /**
         * Get default extensions based on the provided key.
         *
         * @since 1.0.0
         * @param string $key The key to determine which default extensions to retrieve.
         * @return array Default extensions.
         */
        private function get_default_extensions($key)
        {
        }
        /**
         * Update active extensions list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response on success, WP_Error on failure.
         */
        public function update_active_extensions($request)
        {
        }
        /**
         * Update extension memory with active and inactive extensions.
         *
         * @since 1.0.0
         * @param array $active_extensions List of active extensions.
         * @param array $inactive_extensions List of inactive extensions.
         */
        private function update_extension_memory($active_extensions, $inactive_extensions)
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1\Extensions {
    /**
     * Copy Extension REST API Handler
     *
     * Manages REST API endpoints for the Copy extension, including
     * functionality to duplicate posts.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Copy extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Get available routes for the Copy Extension API.
         *
         * @return array Available routes for the Copy Extension API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has permissions to duplicate posts.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has duplication access, WP_Error object otherwise.
         */
        public function check_duplicate_permissions($request)
        {
        }
        /**
         * Duplicate posts based on the provided options.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function duplicate_posts($request)
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1 {
    /**
     * Modules REST API Route Handler
     *
     * Manages REST API endpoints for Divi Squad modules, including
     * retrieving available, active, and inactive modules, as well as
     * updating the list of active modules.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Modules extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Key for active modules in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const ACTIVE_MODULES_KEY = 'active_modules';
        /**
         * Key for inactive modules in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const INACTIVE_MODULES_KEY = 'inactive_modules';
        /**
         * Key for active module version in memory.
         *
         * @since 1.0.0
         * @var string
         */
        const ACTIVE_MODULE_VERSION_KEY = 'active_module_version';
        /**
         * Get available routes for the Modules API.
         *
         * @since 1.0.0
         * @return array Available routes for the Modules API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Get all registered modules.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing all registered modules.
         */
        public function get_modules($request)
        {
        }
        /**
         * Get active modules list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing active modules.
         */
        public function get_active_modules($request)
        {
        }
        /**
         * Get inactive modules list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response containing inactive modules.
         */
        public function get_inactive_modules($request)
        {
        }
        /**
         * Get module names from memory.
         *
         * Retrieves either active or inactive module names from the plugin's memory.
         *
         * @since 1.0.0
         * @param string $key The key to retrieve from memory ('active_modules' or 'inactive_modules').
         * @return array List of module names.
         */
        private function get_module_names($key)
        {
        }
        /**
         * Get default modules based on the provided key.
         *
         * @since 1.0.0
         * @param string $key The key to determine which default modules to retrieve.
         * @return array Default modules.
         */
        private function get_default_modules($key)
        {
        }
        /**
         * Update active modules list.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response on success, WP_Error on failure.
         */
        public function update_active_modules($request)
        {
        }
        /**
         * Update module memory with active and inactive modules.
         *
         * @since 1.0.0
         * @param array $active_modules List of active modules.
         * @param array $inactive_modules List of inactive modules.
         */
        private function update_module_memory($active_modules, $inactive_modules)
        {
        }
        /**
         * Format a single module's data.
         *
         * @since 1.0.0
         * @param array $module Raw module data.
         * @return array Formatted module data.
         */
        private function format_module($module)
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1\Modules {
    /**
     * PostGrid REST API Handler
     *
     * Manages REST API endpoints for the Post Grid module, including
     * functionality to load more posts.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class PostGrid extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Get available routes for the PostGrid Module API.
         *
         * @return array Available routes for the PostGrid Module API.
         */
        public function get_routes()
        {
        }
        /**
         * Load more posts for the Post Grid module.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function load_more_posts($request)
        {
        }
        /**
         * Sanitize and prepare query parameters.
         *
         * @param array $query_args Raw query arguments.
         * @return array Sanitized and prepared query arguments.
         */
        private function sanitize_and_prepare_query_params($query_args)
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1\Notices {
    /**
     * Discount Notice REST API Handler
     *
     * Manages REST API endpoints for the Welcome 60% Discount Notice,
     * including functionality to mark the notice as done.
     *
     * @package DiviSquad
     * @since   3.0.0
     */
    class Discount extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Get available routes for the Discount Notice API.
         *
         * @return array Available routes for the Discount Notice API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Mark the discount notice as done.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error
         */
        public function mark_discount_notice_done($request)
        {
        }
    }
    /**
     * Pro Activation Notice REST API Handler
     *
     * Manages REST API endpoints for the Plugin Activation Notice,
     * including functionality to close the notice.
     *
     * @package DiviSquad
     * @since   2.0.0
     */
    class ProActivation extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Get available routes for the Pro Activation Notice API.
         *
         * @return array Available routes for the Pro Activation Notice API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Close the activation notice.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object or WP_Error object.
         */
        public function close_activation_notice($request)
        {
        }
    }
    /**
     * Review Notice REST API Handler
     *
     * Manages REST API endpoints for the Plugin Review Notice,
     * including functionality to handle various user interactions.
     *
     * @package DiviSquad\Managers\RestRoutes\Version1\Notices
     * @since   1.0.0
     */
    class Review extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Number of days to wait before showing the notice again.
         *
         * @var int
         */
        private $reminder_delay = 7;
        /**
         * Get available routes for the Review Notice API.
         *
         * @return array Available routes for the Review Notice API.
         */
        public function get_routes()
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Mark the review as completed.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object or WP_Error object.
         */
        public function mark_review_done($request)
        {
        }
        /**
         * Set a reminder for the review.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object or WP_Error object.
         */
        public function set_review_reminder($request)
        {
        }
        /**
         * Increment the count of review notice closures.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object with the updated count.
         */
        public function increment_close_count($request)
        {
        }
        /**
         * Increment the count of support requests from the review notice.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object with the updated count.
         */
        public function increment_support_request_count($request)
        {
        }
    }
}
namespace DiviSquad\Managers\RestRoutes\Version1\WhatsNew {
    /**
     * Changelog REST API Handler
     *
     * Manages REST API endpoints for retrieving changelog information.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Changelog extends \DiviSquad\Base\Factories\RestRoute\Route
    {
        /**
         * Get available routes for the Changelog API.
         *
         * @since 1.0.0
         * @return array Available routes for the Changelog API.
         */
        public function get_routes() : array
        {
        }
        /**
         * Check if the current user has admin permissions.
         *
         * @since 3.1.4
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has admin access, WP_Error object otherwise.
         */
        public function check_admin_permissions($request)
        {
        }
        /**
         * Retrieve the changelog file data.
         *
         * @since 1.0.0
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object or WP_Error object.
         */
        public function get_changelog_data($request)
        {
        }
        /**
         * Get the changelog content.
         *
         * @since 3.1.4
         * @return string|WP_Error Changelog content or WP_Error on failure.
         */
        private function get_changelog_content()
        {
        }
        /**
         * Initialize the WordPress filesystem.
         *
         * @since 3.1.4
         * @return bool True if filesystem is initialized, false otherwise.
         */
        private function initialize_filesystem() : bool
        {
        }
        /**
         * Get the path to the changelog file.
         *
         * @since 1.0.0
         * @return string Path to the changelog file.
         */
        private function get_changelog_file_path() : string
        {
        }
    }
}
namespace DiviSquad\Modules\Creatives {
    /**
     * Breadcrumbs Module Class.
     *
     * @package DiviSquad
     * @since   1.4.0
     */
    class Breadcrumbs extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.4.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.4.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.4.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function generate_additional_styles($attrs)
        {
        }
    }
    /**
     * Divider Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Divider extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Filter multi view value.
         *
         * @param mixed $raw_value Props raw value.
         * @param array $args      Context data.
         *
         * @return mixed
         *
         * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
         */
        public function multi_view_filter_value($raw_value, $args)
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         */
        private function squad_generate_additional_styles($attrs)
        {
        }
        /**
         * Render divider.
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         * @param array                                     $attrs      List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_divider($multi_view, $attrs)
        {
        }
        /**
         * Render divider icon which on is active
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_divider_icon($multi_view)
        {
        }
        /**
         * Render divider icon.
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_divider_font_icon($multi_view)
        {
        }
        /**
         * Render divider image.
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_divider_icon_image($multi_view)
        {
        }
        /**
         * Render divider icon text.
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_divider_icon_text($multi_view)
        {
        }
        /**
         * Render divider lottie image.
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_divider_icon_lottie($multi_view)
        {
        }
    }
    /**
     * The Drop Cap Module Class.
     *
     * @package DiviSquad
     * @since   1.4.0
     */
    class DropCapText extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.4.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.4.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function squad_generate_additional_styles($attrs)
        {
        }
    }
    /**
     * Dual-Button Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class DualButton extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module.
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Filter multi view value.
         *
         * @param mixed $raw_value Props raw value.
         * @param array $args      Context data.
         *
         * @return mixed
         * @since 3.27.1
         *
         * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
         */
        public function multi_view_filter_value($raw_value, $args)
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Render element text with icon
         *
         * @param array  $attrs   List of unprocessed attributes.
         * @param string $element Dynamic element key.
         *
         * @return string
         */
        private function squad_render_element_text($attrs, $element)
        {
        }
        /**
         * Render element icon
         *
         * @param string $element Dynamic element key.
         *
         * @return string
         */
        private function squad_render_element_font_icon($element)
        {
        }
        /**
         * Render element image
         *
         * @param string $element Dynamic element key.
         *
         * @return string
         */
        private function squad_render_element_icon_image($element)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         */
        private function generate_additional_styles($attrs)
        {
        }
        /**
         * Render separator text with icon
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_element_separator($attrs)
        {
        }
    }
    /**
     * Glitch Text Module Class.
     *
     * @package DiviSquad
     * @since   1.2.2
     */
    class GlitchText extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.2.2
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         */
        private function squad_generate_additional_styles($attrs)
        {
        }
    }
    /**
     * Gradient Text Module Class.
     *
     * @package DiviSquad
     * @since   1.2.6
     */
    class GradientText extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.2.6
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         */
        private function squad_generate_additional_styles($attrs)
        {
        }
    }
    /**
     * Scrolling Text Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class ScrollingText extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.3.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
    }
    /**
     * Star Rating Module Class.
     *
     * @package DiviSquad
     * @since   1.4.0
     */
    class StarRating extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.4.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.4.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.4.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Generate html markup for stars.
         *
         * @param array $args List of attributes.
         *
         * @return string
         */
        public static function get_star_rating(array $args = array()) : string
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function generate_additional_styles(array $attrs) : void
        {
        }
    }
    /**
     * Typing Text Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class TypingText extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Render prefix.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        private function render_prefix_text(array $attrs) : string
        {
        }
        /**
         * Render typed text.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        private function render_typed_text(array $attrs) : string
        {
        }
        /**
         * Render suffix.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        private function render_suffix_text(array $attrs) : string
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function generate_additional_styles(array $attrs) : void
        {
        }
    }
}
namespace DiviSquad\Modules\Forms {
    /**
     * ContactForm7 Form Styler Module Class
     *
     * Extends the FormStyler base class to provide specific styling and functionality
     * for Contact Form 7 forms within the Divi Builder interface.
     *
     * @since      1.2.0
     * @package    DiviSquad
     * @subpackage Modules\FormStyler
     */
    class ContactForm7 extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * Sets up the module name, slug, and other initial properties.
         * Also initializes the selectors used throughout the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array An array of toggle settings
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array Advanced fields configuration
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.2.0
         * @access public
         *
         * @param string $content     Content being processed
         * @param string $render_slug Slug of module that is used for rendering output
         * @param array  $attrs       List of unprocessed attributes
         *
         * @return string Module's rendered output
         * @throws Exception If there's an error during rendering.
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the Contact Form 7 module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get module stylesheet selectors.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $attrs List of attributes
         *
         * @return array Array of stylesheet selectors
         */
        protected function squad_get_module_stylesheet_selectors(array $attrs) : array
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of removable fields.
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Add transition fields to the provided fields array.
         *
         * @since  1.0.0
         * @access protected
         *
         * @param array $fields Array of fields to add transition fields to
         *
         * @return void
         */
        protected function squad_add_transition_fields(array &$fields) : void
        {
        }
        /**
         * Get font field configurations
         *
         * @since 3.2.0
         *
         * @return array Font field configurations
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations
         *
         * @since 3.2.0
         *
         * @return array Border field configurations
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations
         *
         * @since 3.2.0
         *
         * @return array Box shadow field configurations
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Get the form HTML.
         *
         * @since  1.2.0
         * @access public
         * @static
         *
         * @param array $attrs List of module attributes
         *
         * @return string The HTML of the selected form or empty string if no form selected
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
    /**
     * FluentForms Form Styler Module Class
     *
     * Extends the FormStyler base class to provide specific styling and functionality
     * for Fluent Forms within the Divi Builder interface.
     *
     * @since      1.4.7
     * @package    DiviSquad
     * @subpackage Modules\FormStyler
     */
    class FluentForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * Sets up the module name, slug, and other initial properties.
         * Also initializes the selectors used throughout the module.
         *
         * @since  1.4.7
         * @access public
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * @since  1.4.7
         * @access public
         *
         * @return array Array of toggle settings
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * @since  1.4.7
         * @access public
         *
         * @return array Advanced fields configuration
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.4.7
         * @access public
         *
         * @param string $content     Content being processed
         * @param string $render_slug Slug of module that is used for rendering output
         * @param array  $attrs       List of unprocessed attributes
         *
         * @return string Module's rendered output
         * @throws Exception If there's an error during rendering
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the Fluent Forms module.
         *
         * @since  1.4.7
         * @access protected
         *
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get module stylesheet selectors.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $attrs List of attributes
         *
         * @return array Array of stylesheet selectors
         */
        protected function squad_get_module_stylesheet_selectors(array $attrs) : array
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of removable fields.
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Get the field selector.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return string The field selector.
         */
        protected function get_field_selector() : string
        {
        }
        /**
         * Get font field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Font field configurations.
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Border field configurations.
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Box shadow field configurations.
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Get the form HTML.
         *
         * @since  1.4.7
         * @access public
         * @static
         *
         * @param array $attrs List of module attributes.
         *
         * @return string The HTML of the selected form or empty string if no form selected.
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
    /**
     * Forminator Form Styler Module Class
     *
     * Extends the FormStyler base class to provide specific styling and functionality
     * for Forminator forms within the Divi Builder interface.
     *
     * @since      1.2.0
     * @package    DiviSquad
     * @subpackage Modules\FormStyler
     */
    class Forminator extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * Sets up the module name, slug, and other initial properties.
         * Also initializes the selectors used throughout the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array An array of toggle settings
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array Advanced fields configuration
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.2.0
         * @access public
         *
         * @param array  $attrs       List of unprocessed attributes.
         * @param string $content     StaticContent being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string Module's rendered output
         * @throws Exception If there's an error during rendering.
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the Forminator module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get advanced fields for the module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array Array of advanced fields.
         */
        protected function squad_get_additional_design_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array Array of removable fields.
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Get the field selector.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return string The field selector.
         */
        protected function get_field_selector() : string
        {
        }
        /**
         * Get font field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Font field configurations.
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Border field configurations.
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Box shadow field configurations.
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Get the form HTML.
         *
         * @since  1.2.0
         * @access public
         * @static
         *
         * @param array $attrs List of module attributes.
         *
         * @return string The HTML of the selected form or empty string if no form selected.
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
    /**
     * GravityForms Form Styler Module Class
     *
     * This class extends the FormStyler to provide custom styling options
     * specifically for Gravity Forms within the Divi Builder interface.
     *
     * @since      1.2.0
     * @package    DiviSquad
     * @extends    FormStyler
     */
    class GravityForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * Sets up the module name, slug, and other initial properties.
         * Also initializes the selectors used throughout the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * Defines the structure of settings toggles in the Divi Builder interface.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array An array of toggle settings.
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * Defines the advanced field configurations for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array An array of advanced field configurations.
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.2.0
         * @access public
         *
         * @param array  $attrs       List of unprocessed attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string The HTML output of the module.
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the Gravity Forms module.
         *
         * This method defines and returns an array of CSS selectors used throughout the module
         * for styling various elements of Gravity Forms. The selectors are organized into
         * categories such as form, typography, fields, messages, etc.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * Sets up the CSS selectors used for various form elements.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Get design fields for the module.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Array of design fields.
         */
        protected function squad_get_design_fields() : array
        {
        }
        /**
         * Get form title fields for the module.
         *
         * Defines the fields related to the form title styling.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An array of form title field definitions.
         */
        protected function squad_get_form_title_fields() : array
        {
        }
        /**
         * Get form description fields for the module.
         *
         * Defines the fields related to the form description styling.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An array of form description field definitions.
         */
        protected function squad_get_form_description_fields() : array
        {
        }
        /**
         * Get validation message fields for the module.
         *
         * Defines the fields related to the validation message styling.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An array of validation message field definitions.
         */
        protected function squad_get_validation_message_fields() : array
        {
        }
        /**
         * Get enable field for title or description.
         *
         * Creates a toggle field for enabling/disabling the title or description.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $type Either 'title' or 'description'.
         *
         * @return array The field definition array.
         */
        protected function squad_get_enable_field(string $type) : array
        {
        }
        /**
         * Get affects for enable field.
         *
         * Determines which fields are affected by the enable toggle.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $type Either 'title' or 'description'.
         *
         * @return array An array of affected field names.
         */
        protected function squad_get_enable_field_affects(string $type) : array
        {
        }
        /**
         * Get margin and padding fields for a specific element.
         *
         * Creates margin and padding fields for the given element.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param string $prefix Element prefix.
         * @param string $label  Element label.
         *
         * @return array An array of margin and padding field definitions.
         */
        protected function squad_get_margin_padding_fields(string $prefix, string $label) : array
        {
        }
        /**
         * Get font field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Font field configurations
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Border field configurations
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Box shadow field configurations
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Add transition fields to the provided fields array.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add transition fields to.
         *
         * @return void
         */
        public function squad_add_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add wrapper transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add wrapper transition fields to.
         *
         * @return void
         */
        protected function squad_add_form_title_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add wrapper transition fields.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add wrapper transition fields to.
         *
         * @return void
         */
        protected function squad_add_form_description_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add validation message transition fields.
         *
         * Adds transition fields for the validation message styling options.
         *
         * @since  3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add validation message transition fields to.
         *
         * @return void
         */
        protected function squad_add_validation_message_transition_fields(&$fields) : void
        {
        }
        /**
         * Get background option fields for various form elements.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_background_stylesheet_option_fields() : array
        {
        }
        /**
         * Get margin and padding option fields for various form elements.
         *
         * This method defines the selectors for applying margin and padding styles
         * to different components of the form, such as the wrapper, fields, buttons,
         * and message areas.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_margin_padding_stylesheet_option_fields() : array
        {
        }
        /**
         * Get the form HTML.
         *
         * Retrieves the HTML for the selected Gravity Form.
         *
         * @since  1.2.0
         * @access public
         * @static
         *
         * @param array $attrs List of attributes.
         *
         * @return string The HTML of the selected form or an empty string if no form is selected.
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
    /**
     * NinjaForms Form Styler Module Class
     *
     * This class extends the FormStyler base class to provide specific styling
     * and functionality for Ninja Forms within the Divi Builder.
     *
     * @since 1.4.7
     * @package DiviSquad
     * @extends FormStyler
     */
    class NinjaForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * @since  1.4.7
         * @access public
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * Defines the structure of settings toggles in the Divi Builder interface.
         *
         * @since  1.2.0
         * @access public
         * @return array An array of toggle settings.
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * Defines the advanced field configurations for the module.
         *
         * @since  1.2.0
         * @access public
         * @return array An array of advanced field configurations.
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.4.7
         * @access public
         * @param  array  $attrs       List of unprocessed attributes.
         * @param  string $content     Content being processed.
         * @param  string $render_slug Slug of module that is used for rendering output.
         * @return string The HTML output of the module.
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the Ninja Forms module.
         *
         * @since  1.4.7
         * @access protected
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  1.4.7
         * @access protected
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @return array
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  1.4.7
         * @access protected
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get design fields for the module.
         *
         * @since  3.2.0
         * @access protected
         * @return array Array of design fields.
         */
        protected function squad_get_design_fields() : array
        {
        }
        /**
         * Get form title fields for the module.
         *
         * Defines the fields related to the form title styling.
         *
         * @since  3.2.0
         * @access protected
         * @return array An array of form title field definitions.
         */
        protected function squad_get_form_title_fields() : array
        {
        }
        /**
         * Get validation message fields for the module.
         *
         * Defines the fields related to the validation message styling.
         *
         * @since 3.2.0
         * @access protected
         * @return array An array of validation message field definitions.
         */
        protected function squad_get_validation_message_fields() : array
        {
        }
        /**
         * Get checkbox and radio fields for the module.
         *
         * @since  1.0.0
         * @access protected
         * @return array Array of checkbox and radio fields.
         */
        protected function squad_get_checkbox_radio_fields() : array
        {
        }
        /**
         * Get additional custom fields for the module.
         *
         * @since  1.4.7
         * @access protected
         * @return array Array of additional custom fields.
         */
        protected function squad_get_customizable_design_fields() : array
        {
        }
        /**
         * Get font field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Font field configurations
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Border field configurations
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array Box shadow field configurations
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Add transition fields to the provided fields array.
         *
         * @param  array $fields Array of fields to add transition fields to.
         *
         * @return void
         * @since  1.4.7
         * @access protected
         */
        protected function squad_add_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add wrapper transition fields.
         *
         * @param  array $fields Array of fields to add wrapper transition fields to.
         *
         * @return void
         * @since  1.0.0
         * @access protected
         */
        protected function squad_add_form_title_transition_fields(array &$fields) : void
        {
        }
        /**
         * Add validation message transition fields.
         *
         * Adds transition fields for the validation message styling options.
         *
         * @since 3.2.0
         * @access protected
         *
         * @param array $fields Array of fields to add validation message transition fields to.
         *
         * @return void
         */
        protected function squad_add_validation_message_transition_fields(array &$fields) : void
        {
        }
        /**
         * Get module stylesheet selectors.
         *
         * @param  array $attrs List of attributes.
         *
         * @return array Array of stylesheet selectors.
         * @since  1.4.7
         * @access protected
         */
        protected function squad_get_module_stylesheet_selectors(array $attrs) : array
        {
        }
        /**
         * Get background option fields for various form elements.
         *
         * @since  3.2.0
         * @access protected
         *
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_background_stylesheet_option_fields() : array
        {
        }
        /**
         * Add checkbox and radio options to the stylesheet selectors.
         *
         * @param  array $options Array of options to add checkbox and radio options to.
         *
         * @return void
         * @since  1.4.7
         * @access protected
         */
        protected function squad_add_checkbox_radio_stylesheet_options(array &$options) : void
        {
        }
        /**
         * Get margin and padding option fields for various form elements.
         *
         * @since 3.2.0
         * @access protected
         *
         * @return array An associative array of form elements and their corresponding CSS selectors.
         */
        protected function squad_get_margin_padding_stylesheet_option_fields() : array
        {
        }
        /**
         * Get the form HTML.
         *
         * @param  array $attrs List of attributes.
         *
         * @return string The HTML of the selected form or an empty string if no form is selected.
         * @since  1.4.7
         * @access public
         * @static
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
    /**
     * WPForms Form Styler Module Class
     *
     * Extends the FormStyler base class to provide specific styling and functionality
     * for WPForms within the Divi Builder interface.
     *
     * @since      1.2.0
     * @package    DiviSquad
     * @subpackage Modules\FormStyler
     */
    class WPForms extends \DiviSquad\Base\DiviBuilder\Module\FormStyler
    {
        /**
         * Module initialization.
         *
         * Sets up the module name, slug, and other initial properties.
         * Also initializes the selectors used throughout the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return void
         */
        public function init() : void
        {
        }
        /**
         * Get settings modal toggles for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array Array of toggle settings
         */
        public function get_settings_modal_toggles() : array
        {
        }
        /**
         * Get advanced fields configuration for the module.
         *
         * @since  1.2.0
         * @access public
         *
         * @return array Advanced fields configuration
         */
        public function get_advanced_fields_config() : array
        {
        }
        /**
         * Render module output.
         *
         * @since  1.2.0
         * @access public
         *
         * @param array  $attrs       List of unprocessed attributes
         * @param string $content     Content being processed
         * @param string $render_slug Slug of module that is used for rendering output
         *
         * @return string Module's rendered output
         * @throws Exception If there's an error during rendering.
         */
        public function render($attrs, $content, $render_slug) : string
        {
        }
        /**
         * Get CSS selectors for the WPForms module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array An associative array of CSS selectors.
         */
        protected function squad_get_css_selectors() : array
        {
        }
        /**
         * Initialize selectors for the form styler.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return void
         */
        protected function squad_init_selectors() : void
        {
        }
        /**
         * Get general fields for the module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array Array of general fields.
         */
        protected function squad_get_general_fields() : array
        {
        }
        /**
         * Get removable fields for the module.
         *
         * @since  1.2.0
         * @access protected
         *
         * @return array Array of removable fields.
         */
        protected function squad_get_removable_fields() : array
        {
        }
        /**
         * Get font field configurations
         *
         * @since 3.2.0
         *
         * @return array Font field configurations
         */
        protected function squad_get_font_fields() : array
        {
        }
        /**
         * Get border field configurations
         *
         * @sinc 3.2.0
         *
         * @return array Border field configurations
         */
        protected function squad_get_border_fields() : array
        {
        }
        /**
         * Get box shadow field configurations
         *
         * @since 3.2.0
         *
         * @return array Box shadow field configurations
         */
        protected function squad_get_box_shadow_fields() : array
        {
        }
        /**
         * Get module stylesheet selectors.
         *
         * @since  1.2.0
         * @access protected
         *
         * @param array $attrs List of attributes.
         *
         * @return array Array of stylesheet selectors.
         */
        protected function squad_get_module_stylesheet_selectors(array $attrs) : array
        {
        }
        /**
         * Get the form HTML.
         *
         * @since  1.2.0
         * @access public
         * @static
         *
         * @param array $attrs List of module attributes.
         *
         * @return string The HTML of the selected form or empty string if no form selected.
         */
        public static function squad_form_styler__get_form_html(array $attrs) : string
        {
        }
    }
}
namespace DiviSquad\Modules\Maps {
    /**
     * Google Map Module Class.
     *
     * @package DiviSquad
     * @since   1.4.7
     */
    class GoogleMap extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.4.7
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.4.7
         */
        public function get_fields()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
    }
}
namespace DiviSquad\Modules\Media {
    /**
     * Before After Image Slider Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class BeforeAfterImageSlider extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get image and associated fields.
         *
         * @param string $image_type The current image name.
         *
         * @return array image and associated fields.
         */
        private function squad_get_image_fields($image_type)
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Render image.
         *
         * @param string $image_type The image type.
         *
         * @return string
         */
        private function squad_render_image($image_type)
        {
        }
        /**
         * Process styles for module output.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        private function squad_generate_all_styles($attrs)
        {
        }
    }
    /**
     * Image Gallery Module Class.
     *
     * @package DiviSquad
     * @since   1.2.0
     */
    class ImageGallery extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.2.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.4.8
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Get attachment html data for gallery module
         *
         * @param array $args Gallery Options.
         *
         * @return string|null Attachments data
         */
        public function get_gallery_html($args = array())
        {
        }
        /**
         * Get attachment data for gallery module
         *
         * @param array $args             Gallery Options.
         * @param array $conditional_tags Additional conditionals tags.
         * @param array $current_page     Current page.
         *
         * @return array|WP_Post[] Attachments data
         */
        public static function get_gallery($args = array(), $conditional_tags = array(), $current_page = array())
        {
        }
        /**
         * Renders gallery items.
         *
         * @param array|WP_Post $attachments     Array of attachment objects.
         * @param string        $images_quantity Quantity of images to display.
         * @param int           $image_count     Count of images per page.
         */
        public function render_gallery_items($attachments, $images_quantity, $image_count)
        {
        }
    }
    /**
     * Image Mask Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class ImageMask extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
    }
    /**
     * Lottie Image Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Lottie extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Render item lottie image
         *
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string
         */
        private function squad_render_lottie($multi_view)
        {
        }
    }
    /**
     * The Drop Cap Module Class.
     *
     * @package DiviSquad
     * @since   1.4.1
     */
    class VideoPopup extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.4.1
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.4.1
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.4.1
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         *
         * @return void
         */
        private function generate_additional_styles(array $attrs) : void
        {
        }
        /**
         * Generate render trigger.
         *
         * @return string
         */
        protected function render_trigger() : string
        {
        }
    }
}
namespace DiviSquad\Modules {
    /**
     * The Post-Grid Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class PostGrid extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Add custom hooks
         *
         * @return void
         */
        public function squad_init_custom_hooks()
        {
        }
        /**
         * Return an added new item(module) text.
         *
         * @return string
         */
        public function add_new_child_text()
        {
        }
        /**
         * Declare general fields for the module.
         *
         * @since 1.0.0
         *
         * @return array[]
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Render module output.
         *
         * @since 1.0.0
         *
         * @param array  $attrs       List of unprocessed attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string module's rendered output.
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Filter multi view value.
         *
         * @param mixed $raw_value Props raw value.
         * @param array $args      Props arguments.
         *
         * @return mixed
         *
         * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
         */
        public function multi_view_filter_value($raw_value, $args)
        {
        }
        /**
         * Render the post-elements in the outside wrapper.
         *
         * @param WP_Post      $post    The current post.
         * @param string|array $content The parent content.
         *
         * @return string
         */
        public function wp_hook_squad_current_outside_post_element($post, $content)
        {
        }
        /**
         * Render the post-elements in the main wrapper.
         *
         * @param WP_Post      $post    The WP POST object.
         * @param string|array $content The parent content.
         *
         * @return string
         */
        public function wp_hook_squad_current_main_post_element($post, $content)
        {
        }
        /**
         * Collect all posts from the database.
         *
         * @since 1.0.0
         *
         * @param array                                     $attrs      List of unprocessed attributes.
         * @param string|array|null                         $content    Content being processed.
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view Multiview object instance.
         *
         * @return string the html output for the post-grid.
         */
        public static function squad_get_posts_html($attrs, $content = null, $multi_view = null)
        {
        }
        /**
         * Render a post element based on its properties.
         *
         * @param WP_Post $post           The current post.
         * @param array   $child_prop     The child properties.
         * @param string  $expected_state The expected state ('on' for outside, 'off' for main).
         *
         * @return string
         */
        protected function squad_render_post_element($post, $child_prop, $expected_state)
        {
        }
        /**
         * Generate content by props with dynamic values.
         *
         * @param WP_Post      $post        The WP POST object.
         * @param string|array $content     The parent content.
         * @param callable     $callback    The render callback.
         *
         * @return string
         */
        protected function squad_generate_props_content($post, $content, $callback)
        {
        }
        /**
         * Build the post query arguments.
         *
         * @since 3.1.0
         *
         * @param array $attrs   List of unprocessed attributes.
         * @param mixed $content Content being processed.
         *
         * @return array
         */
        protected static function squad_build_post_query_args($attrs, $content = null)
        {
        }
        /**
         * Add query arguments for the current loop.
         *
         * @param array $query_args Existing query arguments.
         * @return array Updated query arguments.
         */
        protected static function squad_add_current_loop_args($query_args)
        {
        }
        /**
         * Add query arguments for related posts.
         *
         * @param array   $query_args Existing query arguments.
         * @param WP_Post $post       Current post object.
         * @return array Updated query arguments.
         */
        protected static function squad_add_related_post_args($query_args, $post)
        {
        }
        /**
         * Add query arguments for custom display options.
         *
         * @param array $query_args Existing query arguments.
         * @param array $attrs      Module attributes.
         * @return array Updated query arguments.
         */
        protected static function squad_add_custom_display_args($query_args, $attrs)
        {
        }
        /**
         * Add query arguments for post offset.
         *
         * @param array $query_args Existing query arguments.
         * @param array $attrs      Module attributes.
         * @param int   $paged      Current page number.
         * @return array Updated query arguments.
         */
        protected static function squad_add_offset_args($query_args, $attrs, $paged)
        {
        }
        /**
         * Add query arguments for pagination.
         *
         * @param array $query_args Existing query arguments.
         * @param array $attrs      Module attributes.
         * @param int   $paged      Current page number.
         * @return array Updated query arguments.
         */
        protected static function squad_add_pagination_args($query_args, $attrs, $paged)
        {
        }
        /**
         * Add query arguments for date archives.
         *
         * @param array $query_args Existing query arguments.
         * @return array Updated query arguments.
         */
        protected static function squad_add_date_args($query_args)
        {
        }
        /**
         * Get queried arguments for client side rendering.
         *
         * @param array $attrs List of module attributes.
         * @return array Filtered query arguments.
         */
        protected static function squad_get_client_query_args($attrs)
        {
        }
        /**
         * Render the current post.
         *
         * @since 1.0.0
         *
         * @param WP_Post $post    The WP POST object.
         * @param array   $attrs   The module attributes.
         * @param mixed   $content The content being processed.
         *
         * @return void
         */
        protected static function squad_render_current_post($post, $attrs, $content = null)
        {
        }
        /**
         * Prepare post data for frontend rendering.
         *
         * @param WP_Post $post              The WP POST object.
         * @param WP_User $author            The post author object.
         * @param string  $date_replacement  The date format string.
         *
         * @return array
         */
        protected static function squad_prepare_post_data($post, $author, $date_replacement)
        {
        }
        /**
         * Render the pagination or load more button.
         *
         * @param WP_Query                                  $post_query The WP_Query object.
         * @param array                                     $attrs The module attributes.
         * @param string|array|null                         $content The content being processed.
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view The multiview object instance.
         *
         * @return void
         */
        protected static function squad_maybe_render_pagination($post_query, $attrs, $content = null, $multi_view = null)
        {
        }
        /**
         * Render the pagination or load more button.
         *
         * @param WP_Query                                  $post_query The WP_Query object.
         * @param array                                     $attrs The module attributes.
         * @param string|array|null                         $content The content being processed.
         * @param ET_Builder_Module_Helper_MultiViewOptions $multi_view The multiview object instance.
         *
         * @return void
         */
        protected static function squad_maybe_render_load_more_button($post_query, $attrs, $content = null, $multi_view = null)
        {
        }
        /**
         * Render icon which on is active.
         *
         * @param array $attrs List of attributes.
         *
         * @return string
         */
        protected function squad_render_element_icon($attrs)
        {
        }
        /**
         * Render icon.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        protected function squad_render_element_font_icon($attrs)
        {
        }
        /**
         * Render image.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        protected function squad_render_element_icon_image($attrs)
        {
        }
        /**
         * Render image.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        protected function squad_render_element_icon_text($attrs)
        {
        }
        /**
         * Render element body.
         *
         * @since 1.0.0
         *
         * @param array         $attrs List of attributes.
         * @param false|WP_Post $post  The current post object.
         *
         * @return string
         */
        protected function squad_render_post_element_body($attrs, $post)
        {
        }
        /**
         * Render title element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post      The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_title_element($attrs, $post, $class_name)
        {
        }
        /**
         * Render image element.
         *
         * @since 1.0.0
         * @since 3.1.8 Added the ability to link to the post.
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_image_element($attrs, $post, $class_name)
        {
        }
        /**
         * Render content element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_content_element($attrs, $post, $class_name)
        {
        }
        /**
         * Truncate content to a specified number of words, supporting an expanded set of special characters.
         *
         * @since 1.0.0
         *
         * @param string $content The content to truncate.
         * @param int    $length  The number of words to keep.
         *
         * @return string
         */
        protected function squad_truncate_content($content, $length)
        {
        }
        /**
         * Render author element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_author_element($attrs, $post, $class_name)
        {
        }
        /**
         * Get author name based on the specified type.
         *
         * @since 1.0.0
         *
         * @param WP_User $author           The author object.
         * @param string  $author_name_type The type of author name to return.
         *
         * @return string
         */
        protected function squad_get_author_name($author, $author_name_type)
        {
        }
        /**
         * Render gravatar element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_gravatar_element($attrs, $post, $class_name)
        {
        }
        /**
         * Render date element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_date_element($attrs, $post, $class_name)
        {
        }
        /**
         * Render read more element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param int    $post_id    The post ID.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_read_more_element($attrs, $post_id, $class_name)
        {
        }
        /**
         * Render comments element.
         *
         * @since 1.0.0
         *
         * @param array   $attrs      List of attributes.
         * @param WP_Post $post       The post object.
         * @param string  $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_comments_element($attrs, $post, $class_name)
        {
        }
        /**
         * Render categories element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param int    $post_id    The post ID.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_categories_element($attrs, $post_id, $class_name)
        {
        }
        /**
         * Render tags element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param int    $post_id    The post ID.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_tags_element($attrs, $post_id, $class_name)
        {
        }
        /**
         * Render divider element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_divider_element($attrs, $class_name)
        {
        }
        /**
         * Render custom text element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_custom_text_element($attrs, $class_name)
        {
        }
        /**
         * Render custom field element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param int    $post_id    The post ID.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_custom_field_element($attrs, $post_id, $class_name)
        {
        }
        /**
         * Render advanced custom field element.
         *
         * @since 1.0.0
         *
         * @param array  $attrs      List of attributes.
         * @param int    $post_id    The post ID.
         * @param string $class_name The class name for the element.
         *
         * @return string
         */
        protected function squad_render_advanced_custom_field_element($attrs, $post_id, $class_name)
        {
        }
        /**
         * Format ACF field value based on field type.
         *
         * @since 1.0.0
         *
         * @param array  $attrs           List of attributes.
         * @param mixed  $acf_field_value The ACF field value.
         * @param string $acf_field_type  The ACF field type.
         *
         * @return string
         */
        protected function squad_format_acf_field_value($attrs, $acf_field_value, $acf_field_type)
        {
        }
        /**
         * Render post name icon.
         *
         * @param array $attrs List of attributes.
         *
         * @return string
         */
        protected function squad_render_post_title_font_icon($attrs)
        {
        }
        /**
         * Generate styles.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        protected function squad_generate_all_styles($attrs)
        {
        }
        /**
         * Generate styles.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        protected function squad_generate_layout_styles($attrs)
        {
        }
    }
    /**
     * Post-Reading Time Module Class.
     *
     * @package DiviSquad
     * @since   1.2.2
     */
    class PostReadingTime extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.2.2
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Get the reading time text
         *
         * @param array $attrs List of attributes.
         *
         * @return string
         */
        private function squad_reading_time_text($attrs)
        {
        }
        /**
         * Calculate the reading time of a post.
         *
         * Gets the post-content, counts the images, strips shortcodes, and strips tags.
         * Then count the words. Converts images into a word count and outputs the total reading time.
         *
         * @param int   $post  The Post ID.
         * @param array $attrs List of attributes.
         *
         * @return false|float|string The total reading time for the article or string if it's 0.
         */
        public function disq_calculate_reading_time($post, $attrs)
        {
        }
        /**
         * Adds additional reading time for images.
         *
         * @param int   $total_images     number of images in post.
         * @param array $words_per_minute words per minute.
         *
         * @return int Additional time added to the reading time by images.
         * @since 1.1.0
         */
        public function disq_calculate_images($total_images, $words_per_minute)
        {
        }
        /**
         * Render time infix
         *
         * @param string $attribute    The text attribute name.
         * @param string $css_selector The stylesheet selector for the attribute.
         *
         * @return string
         */
        private function squad_render_time_optional_text($attribute, $css_selector)
        {
        }
        /**
         * Render time suffix
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_time_divider($attrs)
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param array $attrs List of attributes.
         */
        private function squad_generate_additional_styles($attrs)
        {
        }
    }
}
namespace DiviSquad\Modules\StaticContent {
    /**
     * Business Hours Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class BusinessHours extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Return an added new item(module) text.
         *
         * @return string
         */
        public function add_new_child_text()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Render module output
         *
         * @param array  $attrs       List of unprocessed attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string module's rendered output
         * @since 1.0.0
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Render title
         *
         * @return string
         */
        private function squad_render_title_text()
        {
        }
        /**
         * Process styles for module output.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        private function squad_generate_all_styles($attrs)
        {
        }
        /**
         * Generate styles for divider
         */
        private function squad_generate_divider_styles()
        {
        }
    }
    /**
     * Business Hours Day Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class BusinessHoursChild extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get CSS fields transition.
         *
         * Add form field options group and background image on the field list.
         *
         * @since 1.0.0
         */
        public function get_transition_fields_css_props()
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Process styles for module output.
         *
         * @param array $attrs List of unprocessed attributes.
         *
         * @return void
         */
        private function squad_generate_all_styles($attrs)
        {
        }
        /**
         * Generate styles for divider
         *
         * @return void
         */
        private function squad_generate_divider_styles()
        {
        }
        /**
         * Render day name
         *
         * @return string
         */
        private function squad_render_day_time_text()
        {
        }
    }
    /**
     * Flip Box Module Class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class FlipBox extends \DiviSquad\Base\DiviBuilder\Module
    {
        /**
         * Initiate Module.
         * Set the module name on init.
         *
         * @return void
         * @since 1.0.0
         */
        public function init()
        {
        }
        /**
         * Declare general fields for the module
         *
         * @return array[]
         * @since 1.0.0
         */
        public function get_fields()
        {
        }
        /**
         * Get all text related fields for both sides.
         *
         * @param string $side The current slide name.
         *
         * @return array Text related fields.
         */
        private function squad_get_side_text_fields($side)
        {
        }
        /**
         * Get all icons and image related fields for both sides.
         *
         * @param string $side The current slide name.
         *
         * @return array icons and image related fields.
         */
        private function squad_get_side_icon_images_fields($side)
        {
        }
        /**
         * Get all text related fields for both sides.
         *
         * @param string $side The current slide name.
         *
         * @return array Text related fields.
         */
        private function squad_get_side_associate_fields($side)
        {
        }
        /**
         * Get all order fields for both sides.
         *
         * @param string $side The current slide name.
         *
         * @return array order fields.
         */
        private function squad_get_side_order_fields($side)
        {
        }
        /**
         * Get all z index fields for both sides.
         *
         * @param string $side The current slide name.
         *
         * @return array z index fields.
         */
        private function squad_get_side_z_index_fields($side)
        {
        }
        /**
         * Filter multi view value.
         *
         * @param mixed $raw_value Props raw value.
         * @param mixed $args      Arguments.
         *
         * @return mixed
         * @since 3.27.1
         *
         * @see   ET_Builder_Module_Helper_MultiViewOptions::filter_value
         */
        public function multi_view_filter_value($raw_value, $args)
        {
        }
        /**
         * Renders the module output.
         *
         * @param array  $attrs       List of attributes.
         * @param string $content     Content being processed.
         * @param string $render_slug Slug of module that is used for rendering output.
         *
         * @return string
         */
        public function render($attrs, $content, $render_slug)
        {
        }
        /**
         * Renders animation styles for the module output.
         */
        private function squad_generate_animation_styles()
        {
        }
        /**
         * Renders additional styles for the module output.
         *
         * @param string $slide_type The slide type.
         * @param array  $attrs      List of attributes.
         */
        private function squad_generate_additional_styles($slide_type, $attrs)
        {
        }
        /**
         * Render the icon which on is active
         *
         * @param string $slide_type The slide type.
         * @param array  $attrs      List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_slide_icons($slide_type, $attrs)
        {
        }
        /**
         * Render all text elements for slide with dynamic and multiview support for Flip Box.
         *
         * @param string $slide_type The slide type.
         * @param array  $attrs      List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_slide_elements($slide_type, $attrs)
        {
        }
        /**
         * Render button text with icon.
         *
         * @param string $slide_type The slide type.
         * @param array  $attrs      List of unprocessed attributes.
         *
         * @return string
         */
        private function squad_render_button_text($slide_type, $attrs)
        {
        }
        /**
         * Render button icon.
         *
         * @param string $slide_type The slide type.
         *
         * @return string
         */
        private function squad_render_button_font_icon($slide_type)
        {
        }
        /**
         * Render button image.
         *
         * @param string $slide_type The slide type.
         *
         * @return string
         */
        private function squad_render_button_icon_image($slide_type)
        {
        }
    }
}
namespace DiviSquad\Settings {
    /**
     * Migration Interface
     *
     * @package DiviSquad\Base\Factories\ModuleMigration
     * @since   3.0.0
     */
    interface MigrationInterface
    {
        /**
         * Initialize migration.
         */
        public static function init();
        /**
         * Get all fields to need to be migrated.
         *
         * Contains an array with:
         * - key as new field
         * - value consists affected fields as old field and module location
         *
         * @return array New and old fields need to be migrated.
         * @since 3.0.0
         */
        public function get_fields() : array;
        /**
         * Get all modules affected.
         *
         * @return array
         * @since 3.0.0
         */
        public function get_modules() : array;
        /**
         * Migrate from old value into new value.
         *
         * @since 3.0.0
         *
         * @param string $field_name       The field name.
         * @param mixed  $current_value    The current value.
         * @param string $module_slug      The module slug.
         * @param mixed  $saved_value      The saved value.
         * @param string $saved_field_name The saved field name.
         * @param array  $attrs            The attributes.
         * @param mixed  $content          The content.
         * @param string $module_address   The module address.
         *
         * @return mixed
         */
        public function migrate(string $field_name, $current_value, string $module_slug, $saved_value, string $saved_field_name, array $attrs, $content, string $module_address);
        /**
         * Get all modules to need to be migrated.
         *
         * @return array
         */
        public function get_content_migration_modules() : array;
        /**
         * This could have been written as abstract, but it's not as common to be expected to be implemented by every migration
         *
         * @param string $module_slug Internal system name for the module type.
         * @param array  $attrs       Shortcode attributes.
         * @param mixed  $content     Text/HTML content within the current module.
         *
         * @return mixed
         */
        public function migrate_content(string $module_slug, array $attrs, $content);
    }
    /**
     * Class Migration
     *
     * @package DiviSquad
     * @since   2.0.0
     * @since   3.0.0 move to Base\Factories\ModuleMigration
     */
    abstract class Migration implements \DiviSquad\Settings\MigrationInterface
    {
        /**
         * Used to migrate field names.
         *
         * @var array
         */
        public static array $field_name_migrations = array();
        /**
         * Array of hooks.
         *
         * @var array
         */
        public static array $hooks = array('the_content', 'admin_enqueue_scripts', 'et_pb_get_backbone_templates', 'wp_ajax_et_pb_execute_content_shortcodes', 'wp_ajax_et_fb_get_saved_layouts', 'wp_ajax_et_fb_retrieve_builder_data');
        /**
         * The last checked hook.
         *
         * @var string
         */
        public static string $last_hook_checked = '';
        /**
         * Last hook check decision.
         *
         * @var bool
         */
        public static bool $last_hook_check_decision = false;
        /**
         * The largest version of the migrations defined in the migration array.
         *
         * @var string
         */
        public static string $max_version = '4.24.1';
        /**
         * Array of already migrated data.
         *
         * @var array
         */
        public static array $migrated = array();
        /**
         * Array of migrations in format( [ 'version' => 'name of migration script' ] ).
         *
         * @var string[]
         */
        public static array $migrations = array('4.24' => \DiviSquad\Settings\Migration\PostElement::class);
        /**
         * Migrations by version.
         *
         * @var array
         */
        public static array $migrations_by_version = array();
        /**
         * Used to exclude names in case of BB.
         *
         * @var array
         */
        protected static array $bb_excluded_name_changes = array();
        /**
         * Used for migrations where we want to separate the logic for
         * migrating post-attributes and global migrating preset attributes.
         *
         * @var bool
         */
        protected static bool $maybe_global_presets_migration = false;
        /**
         * Version.
         *
         * @var string
         */
        public string $version;
        /**
         * Add or not missing fields.
         *
         * @var bool
         */
        public bool $add_missing_fields = false;
        /**
         * Get all modules to need to be migrated.
         *
         * @return array
         */
        public abstract function get_modules() : array;
        /**
         * Get all fields to need to be migrated.
         *
         * Contains an array with:
         * - key as new field
         * - value consists affected fields as old field and module location
         *
         * @return array New and old fields need to be migrated.
         */
        public abstract function get_fields() : array;
        /**
         * Initialize migration.
         */
        public static function init()
        {
        }
        /**
         * Remove added filters.
         *
         * Used by WPUnit tests.
         *
         * @since 4.16.0
         * @link  https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/#shared-setup-between-related-tests
         */
        public static function tear_down()
        {
        }
        /**
         * Maybe override processed fields.
         *
         * @param array  $fields      Shortcode fields.
         * @param string $module_slug Internal system name for the module type.
         *
         * @return array
         */
        public static function maybe_override_processed_fields(array $fields, string $module_slug) : array
        {
        }
        /**
         * Get migrations.
         *
         * @param string $module_version Module version.
         *
         * @return array|mixed
         */
        public static function get_migrations(string $module_version)
        {
        }
        /**
         * Handle field name migrations.
         *
         * @param array  $fields      Shortcode fields.
         * @param string $module_slug Internal system name for the module type.
         *
         * @return array
         */
        public function handle_field_name_migrations(array $fields, string $module_slug) : array
        {
        }
        /**
         * Migrate field names.
         *
         * @param array  $fields  Shortcode fields.
         * @param string $slug    Internal system name for the module type.
         * @param string $version Version of the migration.
         *
         * @return array
         */
        protected static function migrate_field_names(array $fields, string $slug, string $version)
        {
        }
        /**
         * Maybe override shortcode attributes.
         *
         * @param array  $attrs                          Shortcode attributes.
         * @param array  $unprocessed_attrs              Attributes that have not yet been processed.
         * @param string $module_slug                    Internal system name for the module type.
         * @param string $module_address                 Location of the current module on the page.
         * @param mixed  $content                        Text/HTML content within the current module.
         * @param bool   $maybe_global_presets_migration Whether to include global presets.
         *
         * @return array
         */
        public static function maybe_override_shortcode_attributes(array $attrs, array $unprocessed_attrs, string $module_slug, string $module_address, $content = '', bool $maybe_global_presets_migration = false) : array
        {
        }
        /**
         * Check if the current hook should be handled.
         *
         * @param string $slug Internal system name for the module type.
         *
         * @return bool
         */
        public static function should_handle_render(string $slug) : bool
        {
        }
        /**
         * Migrate from old value into new value.
         *
         * @param string $field_name       Current field name within the current module.
         * @param mixed  $current_value    Current field value within the current module.
         * @param string $module_slug      Internal system name for the module type.
         * @param mixed  $saved_value      Saved field value within the current module.
         * @param string $saved_field_name Saved field name within the current module.
         * @param array  $attrs            Shortcode attributes.
         * @param mixed  $content          Text/HTML content within the current module.
         * @param string $module_address   Location of the current module on the page.
         *
         * @return mixed
         */
        public abstract function migrate(string $field_name, $current_value, string $module_slug, $saved_value, string $saved_field_name, array $attrs, $content, string $module_address);
        /**
         * Maybe override content.
         *
         * @param mixed  $content           Text/HTML content within the current module.
         * @param array  $attrs             Shortcode attributes.
         * @param array  $unprocessed_attrs Attributes that have not yet been processed.
         * @param string $module_slug       Internal system name for the module type.
         *
         * @return mixed
         */
        public static function maybe_override_content($content, array $attrs, array $unprocessed_attrs, string $module_slug)
        {
        }
        /**
         * Get all modules to need to be migrated.
         *
         * @return array
         */
        public function get_content_migration_modules() : array
        {
        }
        /**
         * This could have been written as abstract, but it's not as common to be expected to be implemented by every migration
         *
         * @param string $module_slug Internal system name for the module type.
         * @param array  $attrs       Shortcode attributes.
         * @param mixed  $content     Text/HTML content within the current module.
         *
         * @return mixed
         */
        public function migrate_content(string $module_slug, array $attrs, $content)
        {
        }
    }
}
namespace DiviSquad\Settings\Migration {
    /**
     * Migration process to migrate image into Featured Image of Post Element modules.
     *
     * @since 2.0.0
     */
    class PostElement extends \DiviSquad\Settings\Migration
    {
        /**
         * Migration Version
         *
         * @since 2.0.0
         *
         * @var string
         */
        public string $version = '4.24';
        /**
         * Get all modules affected.
         *
         * @return array
         * @since 2.0.0
         */
        public function get_modules() : array
        {
        }
        /**
         * Get all fields to need to be migrated.
         *
         * Contains an array with:
         * - key as new field
         * - value consists affected fields as old field and module location
         *
         * @return array New and old fields need to be migrated.
         * @since 2.0.0
         */
        public function get_fields() : array
        {
        }
        /**
         * Migrate from old value into new value.
         *
         * @param string $field_name       The field name.
         * @param mixed  $current_value    The current value.
         * @param string $module_slug      The module slug.
         * @param mixed  $saved_value      The saved value.
         * @param string $saved_field_name The saved field name.
         * @param array  $attrs            The attributes.
         * @param mixed  $content          The content.
         * @param string $module_address   The module address.
         *
         * @return mixed
         */
        public function migrate(string $field_name, $current_value, string $module_slug, $saved_value, string $saved_field_name, array $attrs, $content, string $module_address)
        {
        }
    }
}
namespace DiviSquad {
    /**
     * Main Squad Modules Plugin Class
     *
     * This class handles the core functionality of the Squad Modules plugin, including:
     * - Plugin initialization and bootstrapping
     * - Component loading and management
     * - Error logging and reporting
     * - Version management
     * - Path and URL handling
     * - Pro version compatibility
     *
     * @since   1.0.0
     * @package DiviSquad
     *
     * @property Core\Cache                    $cache          Cache manager.
     * @property Core\Memory                   $memory         Memory manager.
     * @property Core\Requirements             $requirements   Requirements checker.
     * @property Core\Supports\Site_Health     $site_health    Site health manager.
     * @property Managers\Features\Modules     $modules        Module manager.
     * @property Managers\Features\Extensions  $extensions     Extension manger.
     */
    final class SquadModules extends \DiviSquad\Integrations\Core
    {
        use \DiviSquad\Core\Traits\DeprecatedClassLoader;
        use \DiviSquad\Core\Traits\DetectPluginLife;
        use \DiviSquad\Core\Traits\Logger;
        use \DiviSquad\Core\Traits\Singleton;
        use \DiviSquad\Core\Traits\UseWPFilesystem;
        /**
         * Admin menu slug used for the plugin's dashboard page.
         *
         * @since 1.0.0
         * @var string
         */
        protected string $admin_menu_slug = 'divi_squad_dashboard';
        /**
         * Freemius publisher instance.
         *
         * @since 3.2.0
         * @var Freemius|null
         */
        private ?\Freemius $publisher = null;
        /**
         * Plugin Constructor
         *
         * Initializes the plugin by:
         * - Setting up core plugin properties
         * - Initializing memory management
         * - Registering WordPress hooks
         * - Loading deprecated class compatibility
         *
         * @since  3.2.0 Added system requirements check
         * @since  3.1.0 Added error handling and logging
         * @since  3.0.0 Added plugin initialization on 'plugin_loaded' hook
         * @since  3.0.0 Added publisher initialization on 'plugin_loaded' hook
         * @since  1.0.0 Initial implementation
         */
        private function __construct()
        {
        }
        /**
         * Register Core WordPress Hooks
         *
         * Sets up all necessary WordPress action and filter hooks for the plugin.
         *
         * @since  3.2.0 Added notice style hooks
         * @since  1.0.0
         * @access private
         *
         * @return void
         */
        private function register_hooks() : void
        {
        }
        /**
         * Set the activation hook.
         *
         * @since  1.0.0
         * @access public
         *
         * @return void
         */
        public function hook_activation()
        {
        }
        /**
         * Set the deactivation hook.
         *
         * @since  1.0.0
         * @access public
         *
         * @return void
         */
        public function hook_deactivation()
        {
        }
        /**
         * Load Initial Components
         *
         * This method is called after the plugin is initialized and sets up additional components.
         *
         * @since  3.2.0
         * @access public
         *
         * @return void
         */
        public function load_initials() : void
        {
        }
        /**
         * Initialize Plugin Settings
         *
         * Sets up core plugin properties and configuration options.
         *
         * @since  1.0.0
         * @access private
         *
         * @return void
         * @throws RuntimeException If plugin data cannot be retrieved
         */
        public function init_plugin_data() : void
        {
        }
        /**
         * Initialize Prerequisites
         *
         * Sets up the core prerequisites for the plugin, including requirements and memory management.
         *
         * @since  3.2.0
         * @access public
         *
         * @return void
         */
        public function init_prerequisites() : void
        {
        }
        /**
         * Get the list of deprecated classes and their configurations.
         *
         * @since  3.0.0
         * @access protected
         *
         * @return array
         */
        protected function get_deprecated_classes_list() : array
        {
        }
        /**
         * Initialize the publisher.
         *
         * This method initializes the publisher instance if the current request is in the admin area
         * and the `Publisher` class is available.
         *
         * @since 3.2.0
         * @access public
         *
         * @return void
         */
        public function init_publisher() : void
        {
        }
        /**
         * Get the Freemius instance.
         *
         * @return Freemius
         * @throws Freemius_Exception If the publisher cannot be initialized
         */
        public function get_publisher() : \Freemius
        {
        }
        /**
         * Run Plugin Initialization
         *
         * Bootstraps the plugin by loading components and firing initialization hooks.
         *
         * @since  1.0.0
         * @access public
         *
         * @return void
         */
        public function run() : void
        {
        }
        /**
         * Load the local text domain.
         *
         * @return void
         */
        public function load_text_domain()
        {
        }
        /**
         * Load Plugin Prerequisite Components
         *
         * Loads all core plugin prerequisite components.
         *
         * @since  3.2.0
         * @access private
         *
         * @return void
         */
        protected function load_plugin_assets() : void
        {
        }
        /**
         * Initialize the plugin with required components.
         *
         * @return void
         */
        protected function init_containers()
        {
        }
        /**
         * Load Plugin Components
         *
         * Loads all core plugin components.
         *
         * @since  1.0.0
         * @access private
         *
         * @return void
         */
        protected function load_components() : void
        {
        }
        /**
         * Load Additional Plugin Components
         *
         * Loads components that require WordPress initialization first.
         *
         * @since  1.0.0
         * @access public
         *
         * @return void
         * @throws Throwable If an error occurs while loading additional components
         */
        public function load_additional_components() : void
        {
        }
        /**
         * Load all extensions.
         *
         * @return void
         */
        protected function load_extensions()
        {
        }
        /**
         * The admin interface asset and others.
         *
         * @return void
         */
        protected function load_admin()
        {
        }
        /**
         * Get the plugin options.
         *
         * @since  1.0.0
         * @access public
         *
         * @return array
         */
        public function get_options() : array
        {
        }
        /**
         * Get a specific option value.
         *
         * @since  1.0.0
         * @access public
         *
         * @param string $key           The option key.
         * @param mixed  $default_value The default value if the option doesn't exist.
         *
         * @return mixed
         */
        public function get_option(string $key, $default_value = null)
        {
        }
        /**
         * Set a specific option value.
         *
         * @since  1.0.0
         * @access public
         *
         * @param string $key   The option key.
         * @param mixed  $value The option value.
         *
         * @return void
         */
        public function set_option(string $key, $value) : void
        {
        }
        /**
         * Get the plugin version number.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_version() : string
        {
        }
        /**
         * Get the plugin version number (dotted).
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_version_dot() : string
        {
        }
        /**
         * Get the plugin base name.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_basename() : string
        {
        }
        /**
         * Get the plugin directory path.
         *
         * @since  1.0.0
         * @access public
         *
         * @param string $path The path to append.
         *
         * @return string
         */
        public function get_path(string $path = '') : string
        {
        }
        /**
         * Get the plugin template path.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_template_path() : string
        {
        }
        /**
         * Get the plugin asset URL.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_asset_url() : string
        {
        }
        /**
         * Get the plugin directory URL.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_url() : string
        {
        }
        /**
         * Get the plugin icon path.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_icon_path() : string
        {
        }
        /**
         * Retrieve the WordPress root path.
         *
         * @since  1.0.0
         * @access public
         *
         * @return string
         */
        public function get_wp_path() : string
        {
        }
    }
}
namespace DiviSquad\Utils {
    /**
     * Utils class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Asset
    {
        /**
         * Get the version
         *
         * @since 1.0.0
         *
         * @return string
         */
        public static function get_the_version()
        {
        }
        /**
         * Resolve the resource root path.
         *
         * @return string
         * @phpstan-return string|null
         */
        public static function root_path()
        {
        }
        /**
         * Resolve the resource root uri.
         *
         * @return string
         */
        public static function root_path_uri()
        {
        }
        /**
         * Get current mode is production or not
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public static function is_production_mode() : bool
        {
        }
        /**
         * Validate the relative path.
         *
         * @param string $relative_path The path string for validation.
         *
         * @return string
         */
        public static function validate_relative_path(string $relative_path) : string
        {
        }
        /**
         * Resolve the resource path.
         *
         * @param string $relative_path The current path string.
         *
         * @return string
         */
        public static function resolve_file_path(string $relative_path) : string
        {
        }
        /**
         * Resolve the resource uri.
         *
         * @param string $relative_path The current path string.
         *
         * @return string
         */
        public static function resolve_file_uri(string $relative_path) : string
        {
        }
        /**
         * Process asset path and version data.
         *
         * @param array $path         The asset relative path with options.
         * @param array $dependencies The asset dependencies.
         *
         * @return array
         */
        public static function process_asset_path_data(array $path, array $dependencies) : array
        {
        }
        /**
         * Set the asset path.
         *
         * @param string $file    The file name.
         * @param array  $options The options for current asset file.
         *
         * @return array
         */
        public static function asset_path(string $file, array $options = array()) : array
        {
        }
        /**
         * Get the admin asset path.
         *
         * @param string $file    The file name.
         * @param array  $options The options for current asset file.
         *
         * @return array
         */
        public static function admin_asset_path(string $file, array $options = array()) : array
        {
        }
        /**
         * Get the module asset path.
         *
         * @param string $file    The file name.
         * @param array  $options The options for current asset file.
         *
         * @return array
         */
        public static function module_asset_path(string $file, array $options = array()) : array
        {
        }
        /**
         * Get the extensions asset path.
         *
         * @param string $file    The file name.
         * @param array  $options The options for current asset file.
         *
         * @return array
         */
        public static function extension_asset_path(string $file, array $options = array()) : array
        {
        }
        /**
         * Get the vendor asset path.
         *
         * @param string $file    The file name.
         * @param array  $options The options for current asset file.
         *
         * @return array
         */
        public static function vendor_asset_path(string $file, array $options = array()) : array
        {
        }
        /**
         * Enqueue styles (deprecated).
         *
         * @since 1.0.0
         *
         * @param string $keyword   Name of the stylesheet. Should be unique.
         * @param array  $path      Relative path of the stylesheet with options for the WordPress root directory.
         * @param array  $deps      Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
         * @param string $media     Optional. The media for which this stylesheet has been defined. Default 'all'.
         * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
         *
         * @return void
         * @deprecated 3.1.0
         */
        public static function style_enqueue(string $keyword, array $path, array $deps = array(), string $media = 'all', bool $no_prefix = false)
        {
        }
        /**
         * Enqueue javascript (deprecated).
         *
         * @since 1.0.0
         *
         * @param string $keyword   Name of the javascript. Should be unique.
         * @param array  $path      Relative path of the javascript with options for the WordPress root directory.
         * @param array  $deps      Optional. An array of registered javascript handles this stylesheet depends on. Default empty array.
         * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
         *
         * @return void
         * @deprecated 3.1.0
         */
        public static function asset_enqueue(string $keyword, array $path, array $deps = array(), bool $no_prefix = false)
        {
        }
        /**
         * Enqueue javascript.
         *
         * @since 1.0.0
         *
         * @param string $keyword   Name of the javascript. Should be unique.
         * @param array  $path      Relative path of the javascript with options for the WordPress root directory.
         * @param array  $deps      Optional. An array of registered javascript handles this stylesheet depends on. Default empty array.
         * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
         *
         * @return void
         */
        public static function enqueue_script(string $keyword, array $path, array $deps = array(), bool $no_prefix = false)
        {
        }
        /**
         * Enqueue styles.
         *
         * @since 1.0.0
         *
         * @param string $keyword   Name of the stylesheet. Should be unique.
         * @param array  $path      Relative path of the stylesheet with options for the WordPress root directory.
         * @param array  $deps      Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
         * @param string $media     Optional. The media for which this stylesheet has been defined. Default 'all'.
         * @param bool   $no_prefix Optional. Set the plugin prefix with asset handle name is or not.
         *
         * @return void
         */
        public static function enqueue_style(string $keyword, array $path, array $deps = array(), string $media = 'all', bool $no_prefix = false)
        {
        }
        /**
         * Register scripts for frontend and builder.
         *
         * @param string $handle The handle name.
         * @param array  $path   The script path url with options.
         * @param array  $deps   The script dependencies.
         *
         * @return void
         */
        public static function register_script(string $handle, array $path, array $deps = array())
        {
        }
        /**
         * Enqueue styles.
         *
         * @since 1.0.0
         *
         * @param string $keyword Name of the stylesheet. Should be unique.
         * @param array  $path    Relative path of the stylesheet with options for the WordPress root directory.
         * @param array  $deps    Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
         * @param string $media   Optional. The media for which this stylesheet has been defined. Default 'all'.
         *
         * @return void
         */
        public static function register_style(string $keyword, array $path, array $deps = array(), string $media = 'all')
        {
        }
        /**
         * Get available script enqueue footer arguments.
         *
         * @since 1.0.0
         *
         * @param bool $strategy Optional. If provided, may be either 'defer' or 'async'. Default false.
         * @param bool $priority Optional. If provided, may be either 'high' or 'low'. Default 'low'.
         *
         * @return array
         */
        public static function footer_arguments(bool $strategy = false, bool $priority = false) : array
        {
        }
    }
    /**
     * Divi class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Divi
    {
        /**
         * Check if Divi theme builder is enabled.
         *
         * @return boolean
         */
        public static function is_bfb_enabled() : bool
        {
        }
        /**
         * Check if Theme Builder is Used on the page.
         *
         * @return boolean
         */
        public static function is_theme_builder_used() : bool
        {
        }
        /**
         * Check if the current screen is the Theme Builder administration screen.
         *
         * @return boolean
         */
        public static function is_tb_admin_screen() : bool
        {
        }
        /**
         * Check if Divi Builder 5 is enabled.
         *
         * @return boolean
         */
        public static function is_d5_enabled() : bool
        {
        }
        /**
         * Check if Divi visual builder is enabled.
         *
         * @return boolean
         */
        public static function is_fb_enabled() : bool
        {
        }
        /**
         * Collect icon type from Divi formatted value.
         *
         * @param string $icon_value Divi formatted value for Icon.
         *
         * @return string
         */
        public static function get_icon_type(string $icon_value) : string
        {
        }
        /**
         * Determine icon font weight
         *
         * @param string $icon_value Divi formatted value for Icon.
         *
         * @return string
         */
        public static function get_icon_font_weight(string $icon_value) : string
        {
        }
        /**
         * Get unicode icon data
         *
         * @param string $icon_value Icon font value.
         *
         * @return string Icon data
         */
        public static function get_icon_data_to_unicode(string $icon_value) : string
        {
        }
        /**
         * Add Icons css into the divi asset list when the Dynamic CSS option is turn on in current installation
         *
         * @param array $global_list The existed global asset list.
         *
         * @return array
         */
        public static function global_assets_list(array $global_list = array()) : array
        {
        }
        /**
         * Add Font Awesome css into the divi asset list when the Dynamic CSS option is turn on in current installation
         *
         * @param array $global_list The existed global asset list.
         *
         * @return array
         */
        public static function global_fa_assets_list(array $global_list = array()) : array
        {
        }
        /**
         * Add Font Awesome css support manually when the Dynamic CSS option is turn on in current installation.
         *
         * @param string $icon_data The icon value.
         *
         * @return void
         */
        public static function inject_fa_icons(string $icon_data)
        {
        }
        /**
         * Returns boolean if any Divi theme installed in the current WordPress installation
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public static function is_any_divi_theme_installed() : bool
        {
        }
        /**
         * Returns boolean if any Divi theme active in the current WordPress installation
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public static function is_any_divi_theme_active() : bool
        {
        }
        /**
         * Returns boolean if the Divi Builder Plugin is installed in the current WordPress installation
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public static function is_divi_builder_plugin_installed() : bool
        {
        }
        /**
         * Returns boolean if the Divi Builder Plugin active in the current WordPress installation
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public static function is_divi_builder_plugin_active() : bool
        {
        }
        /**
         * Returns boolean if any Divi theme is installed active in the current WordPress installation
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public static function is_allowed_theme_activated() : bool
        {
        }
        /**
         * Return the allowed theme list for Divi Utils support
         *
         * @since 1.0.0
         *
         * @return array
         */
        public static function modules_allowed_theme() : array
        {
        }
    }
    /**
     * Helper class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Helper
    {
        /**
         * Fix slash issue for Windows os
         *
         * @param string $path Full path for fixing.
         *
         * @return string
         */
        public static function fix_slash(string $path) : string
        {
        }
        /**
         * Implode array like html attributes.
         *
         * @param array $array_data The associate array data.
         *
         * @return string
         */
        public static function implode_assoc_array(array $array_data) : string
        {
        }
        /**
         * Verify the current screen is a squad page or not.
         *
         * @param string $page_id The page id.
         *
         * @return bool
         */
        public static function is_squad_page(string $page_id = '') : bool
        {
        }
    }
    /**
     * Language recognition chart.
     *
     * @package DiviSquad
     * @since 3.1.4
     */
    class LRCart
    {
        /**
         * Get supported language recognition chart.
         *
         * @since 3.1.4
         *
         * @return string
         */
        public static function get_character_map() : string
        {
        }
    }
    /**
     * Sanitization class.
     *
     * @package DiviSquad
     * @since   1.0.0
     */
    class Sanitization
    {
        /**
         * Sanitize int value.
         *
         * @param int|mixed $value Value.
         *
         * @return int
         */
        public static function sanitize_int($value) : int
        {
        }
        /**
         * Sanitize array value
         *
         * @param mixed $value Value.
         *
         * @link https://github.com/WordPress/WordPress-Coding-Standards/wiki/Sanitizing-array-input-data
         *
         * @return array|string
         */
        public static function sanitize_array($value)
        {
        }
    }
    /**
     * WP Helper class.
     *
     * @package DiviSquad
     * @since   1.2.2
     */
    class WP
    {
        /**
         * Detect if the current site is running in a WordPress Playground environment.
         *
         * @return bool True if the site is running in a WordPress Playground, false otherwise.
         */
        public static function is_playground() : bool
        {
        }
        /**
         * Determines whether a plugin is active.
         *
         * Only plugins installed in the plugins/ folder can be active.
         *
         * Plugins in the mu-plugins/ folder can't be "activated," so this function will
         * return false for those plugins.
         *
         * For more information on this and similar theme functions, check out
         * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
         * Conditional Tags} article in the Theme Developer Handbook.
         *
         * @since 2.5.0
         *
         * @param string $plugin Path to the plugin file relative to the plugins' directory.
         *
         * @return bool True, if in the active plugins list. False, not in the list.
         */
        public static function is_plugin_active(string $plugin) : bool
        {
        }
        /**
         * Determines whether the plugin is active for the entire network.
         *
         * Only plugins installed in the plugins/ folder can be active.
         *
         * Plugins in the mu-plugins/ folder can't be "activated," so this function will
         * return false for those plugins.
         *
         * For more information on this and similar theme functions, check out
         * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
         * Conditional Tags} article in the Theme Developer Handbook.
         *
         * @since 3.0.0
         *
         * @param string $plugin Path to the plugin file relative to the plugins' directory.
         *
         * @return bool True if active for the network, otherwise false.
         */
        public static function is_plugin_active_for_network(string $plugin) : bool
        {
        }
        /**
         * Get the active plugins name and versions.
         *
         * @return array
         */
        public static function get_active_plugins() : array
        {
        }
        /**
         * Get the active plugins' information.
         *
         * @return array
         */
        public static function get_active_plugins_info() : array
        {
        }
        /**
         * Sets translated strings for a script.
         *
         * Works only if the script has already been registered.
         *
         * @param string $handle The Script handle the textdomain will be attached to.
         * @param string $domain Optional. Text domain. Default 'default'.
         * @param string $path   Optional. The full file path to the directory containing translation files.
         *
         * @return bool True if the text domain was successfully localized, false otherwise.
         */
        public static function set_script_translations(string $handle, string $domain = 'default', string $path = '') : bool
        {
        }
        /**
         * Localizes a script.
         *
         * Works only if the script has already been registered.
         *
         * @param string $handle      The Script handle the data will be attached to.
         * @param string $object_name Name for the JavaScript object. Passed directly, so it should be qualified JS variable.
         * @param array  $l10n        The data itself. The data can be either a single or multidimensional array.
         *
         * @return bool True if the script was successfully localized, false otherwise.
         */
        public static function localize_script(string $handle, string $object_name, array $l10n) : bool
        {
        }
    }
}
namespace {
    /**
     * Get the main plugin instance
     *
     * Returns the singleton instance of the main plugin class. This instance is used
     * throughout the plugin to maintain state and coordinate functionality.
     *
     * @since 1.0.0
     * @return DiviSquad\SquadModules Main plugin instance
     * @throws RuntimeException If plugin instance cannot be created
     */
    function divi_squad() : \DiviSquad\SquadModules
    {
    }
    /**
     * Get Freemius SDK instance
     *
     * Returns the singleton instance of the Freemius SDK integration. This is used
     * for licensing, analytics, and deployment functionality.
     *
     * @since 1.0.0
     * @return Freemius Freemius instance or null if initialization fails
     * @throws Exception If Freemius SDK is not available
     */
    function divi_squad_fs() : \Freemius
    {
    }
}